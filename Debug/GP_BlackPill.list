
GP_BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005800  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005998  08005998  00006998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059d8  080059d8  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  080059d8  080059d8  000069d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059e0  080059e0  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059e0  080059e0  000069e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059e4  080059e4  000069e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080059e8  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014ac8  20000070  08005a58  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014b38  08005a58  00007b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae21  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6e  00000000  00000000  00011ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  00013c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096d  00000000  00000000  00014830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001734c  00000000  00000000  0001519d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4c7  00000000  00000000  0002c4e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097cf5  00000000  00000000  000399b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d16a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000388c  00000000  00000000  000d16e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d4f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005980 	.word	0x08005980

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08005980 	.word	0x08005980

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b96a 	b.w	8000e3c <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	460c      	mov	r4, r1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d14e      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8c:	4694      	mov	ip, r2
 8000b8e:	458c      	cmp	ip, r1
 8000b90:	4686      	mov	lr, r0
 8000b92:	fab2 f282 	clz	r2, r2
 8000b96:	d962      	bls.n	8000c5e <__udivmoddi4+0xde>
 8000b98:	b14a      	cbz	r2, 8000bae <__udivmoddi4+0x2e>
 8000b9a:	f1c2 0320 	rsb	r3, r2, #32
 8000b9e:	4091      	lsls	r1, r2
 8000ba0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba8:	4319      	orrs	r1, r3
 8000baa:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f f68c 	uxth.w	r6, ip
 8000bb6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb07 1114 	mls	r1, r7, r4, r1
 8000bc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc6:	fb04 f106 	mul.w	r1, r4, r6
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bd6:	f080 8112 	bcs.w	8000dfe <__udivmoddi4+0x27e>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 810f 	bls.w	8000dfe <__udivmoddi4+0x27e>
 8000be0:	3c02      	subs	r4, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a59      	subs	r1, r3, r1
 8000be6:	fa1f f38e 	uxth.w	r3, lr
 8000bea:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bee:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf6:	fb00 f606 	mul.w	r6, r0, r6
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x94>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c06:	f080 80fc 	bcs.w	8000e02 <__udivmoddi4+0x282>
 8000c0a:	429e      	cmp	r6, r3
 8000c0c:	f240 80f9 	bls.w	8000e02 <__udivmoddi4+0x282>
 8000c10:	4463      	add	r3, ip
 8000c12:	3802      	subs	r0, #2
 8000c14:	1b9b      	subs	r3, r3, r6
 8000c16:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	b11d      	cbz	r5, 8000c26 <__udivmoddi4+0xa6>
 8000c1e:	40d3      	lsrs	r3, r2
 8000c20:	2200      	movs	r2, #0
 8000c22:	e9c5 3200 	strd	r3, r2, [r5]
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d905      	bls.n	8000c3a <__udivmoddi4+0xba>
 8000c2e:	b10d      	cbz	r5, 8000c34 <__udivmoddi4+0xb4>
 8000c30:	e9c5 0100 	strd	r0, r1, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	4608      	mov	r0, r1
 8000c38:	e7f5      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000c3a:	fab3 f183 	clz	r1, r3
 8000c3e:	2900      	cmp	r1, #0
 8000c40:	d146      	bne.n	8000cd0 <__udivmoddi4+0x150>
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0xcc>
 8000c46:	4290      	cmp	r0, r2
 8000c48:	f0c0 80f0 	bcc.w	8000e2c <__udivmoddi4+0x2ac>
 8000c4c:	1a86      	subs	r6, r0, r2
 8000c4e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	2d00      	cmp	r5, #0
 8000c56:	d0e6      	beq.n	8000c26 <__udivmoddi4+0xa6>
 8000c58:	e9c5 6300 	strd	r6, r3, [r5]
 8000c5c:	e7e3      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	f040 8090 	bne.w	8000d84 <__udivmoddi4+0x204>
 8000c64:	eba1 040c 	sub.w	r4, r1, ip
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	fa1f f78c 	uxth.w	r7, ip
 8000c70:	2101      	movs	r1, #1
 8000c72:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c82:	fb07 f006 	mul.w	r0, r7, r6
 8000c86:	4298      	cmp	r0, r3
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x11c>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x11a>
 8000c94:	4298      	cmp	r0, r3
 8000c96:	f200 80cd 	bhi.w	8000e34 <__udivmoddi4+0x2b4>
 8000c9a:	4626      	mov	r6, r4
 8000c9c:	1a1c      	subs	r4, r3, r0
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ca6:	fb08 4410 	mls	r4, r8, r0, r4
 8000caa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cae:	fb00 f707 	mul.w	r7, r0, r7
 8000cb2:	429f      	cmp	r7, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x148>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x146>
 8000cc0:	429f      	cmp	r7, r3
 8000cc2:	f200 80b0 	bhi.w	8000e26 <__udivmoddi4+0x2a6>
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	1bdb      	subs	r3, r3, r7
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	e7a5      	b.n	8000c1c <__udivmoddi4+0x9c>
 8000cd0:	f1c1 0620 	rsb	r6, r1, #32
 8000cd4:	408b      	lsls	r3, r1
 8000cd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cda:	431f      	orrs	r7, r3
 8000cdc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce0:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce4:	ea43 030c 	orr.w	r3, r3, ip
 8000ce8:	40f4      	lsrs	r4, r6
 8000cea:	fa00 f801 	lsl.w	r8, r0, r1
 8000cee:	0c38      	lsrs	r0, r7, #16
 8000cf0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf4:	fbb4 fef0 	udiv	lr, r4, r0
 8000cf8:	fa1f fc87 	uxth.w	ip, r7
 8000cfc:	fb00 441e 	mls	r4, r0, lr, r4
 8000d00:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d04:	fb0e f90c 	mul.w	r9, lr, ip
 8000d08:	45a1      	cmp	r9, r4
 8000d0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0e:	d90a      	bls.n	8000d26 <__udivmoddi4+0x1a6>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d16:	f080 8084 	bcs.w	8000e22 <__udivmoddi4+0x2a2>
 8000d1a:	45a1      	cmp	r9, r4
 8000d1c:	f240 8081 	bls.w	8000e22 <__udivmoddi4+0x2a2>
 8000d20:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d24:	443c      	add	r4, r7
 8000d26:	eba4 0409 	sub.w	r4, r4, r9
 8000d2a:	fa1f f983 	uxth.w	r9, r3
 8000d2e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d32:	fb00 4413 	mls	r4, r0, r3, r4
 8000d36:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d3e:	45a4      	cmp	ip, r4
 8000d40:	d907      	bls.n	8000d52 <__udivmoddi4+0x1d2>
 8000d42:	193c      	adds	r4, r7, r4
 8000d44:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d48:	d267      	bcs.n	8000e1a <__udivmoddi4+0x29a>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	d965      	bls.n	8000e1a <__udivmoddi4+0x29a>
 8000d4e:	3b02      	subs	r3, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d56:	fba0 9302 	umull	r9, r3, r0, r2
 8000d5a:	eba4 040c 	sub.w	r4, r4, ip
 8000d5e:	429c      	cmp	r4, r3
 8000d60:	46ce      	mov	lr, r9
 8000d62:	469c      	mov	ip, r3
 8000d64:	d351      	bcc.n	8000e0a <__udivmoddi4+0x28a>
 8000d66:	d04e      	beq.n	8000e06 <__udivmoddi4+0x286>
 8000d68:	b155      	cbz	r5, 8000d80 <__udivmoddi4+0x200>
 8000d6a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d6e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d72:	fa04 f606 	lsl.w	r6, r4, r6
 8000d76:	40cb      	lsrs	r3, r1
 8000d78:	431e      	orrs	r6, r3
 8000d7a:	40cc      	lsrs	r4, r1
 8000d7c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d80:	2100      	movs	r1, #0
 8000d82:	e750      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000d84:	f1c2 0320 	rsb	r3, r2, #32
 8000d88:	fa20 f103 	lsr.w	r1, r0, r3
 8000d8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d90:	fa24 f303 	lsr.w	r3, r4, r3
 8000d94:	4094      	lsls	r4, r2
 8000d96:	430c      	orrs	r4, r1
 8000d98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d9c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da0:	fa1f f78c 	uxth.w	r7, ip
 8000da4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dac:	0c23      	lsrs	r3, r4, #16
 8000dae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db2:	fb00 f107 	mul.w	r1, r0, r7
 8000db6:	4299      	cmp	r1, r3
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x24c>
 8000dba:	eb1c 0303 	adds.w	r3, ip, r3
 8000dbe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dc2:	d22c      	bcs.n	8000e1e <__udivmoddi4+0x29e>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	d92a      	bls.n	8000e1e <__udivmoddi4+0x29e>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4463      	add	r3, ip
 8000dcc:	1a5b      	subs	r3, r3, r1
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd4:	fb08 3311 	mls	r3, r8, r1, r3
 8000dd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ddc:	fb01 f307 	mul.w	r3, r1, r7
 8000de0:	42a3      	cmp	r3, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x276>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dec:	d213      	bcs.n	8000e16 <__udivmoddi4+0x296>
 8000dee:	42a3      	cmp	r3, r4
 8000df0:	d911      	bls.n	8000e16 <__udivmoddi4+0x296>
 8000df2:	3902      	subs	r1, #2
 8000df4:	4464      	add	r4, ip
 8000df6:	1ae4      	subs	r4, r4, r3
 8000df8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dfc:	e739      	b.n	8000c72 <__udivmoddi4+0xf2>
 8000dfe:	4604      	mov	r4, r0
 8000e00:	e6f0      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e02:	4608      	mov	r0, r1
 8000e04:	e706      	b.n	8000c14 <__udivmoddi4+0x94>
 8000e06:	45c8      	cmp	r8, r9
 8000e08:	d2ae      	bcs.n	8000d68 <__udivmoddi4+0x1e8>
 8000e0a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e0e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e12:	3801      	subs	r0, #1
 8000e14:	e7a8      	b.n	8000d68 <__udivmoddi4+0x1e8>
 8000e16:	4631      	mov	r1, r6
 8000e18:	e7ed      	b.n	8000df6 <__udivmoddi4+0x276>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	e799      	b.n	8000d52 <__udivmoddi4+0x1d2>
 8000e1e:	4630      	mov	r0, r6
 8000e20:	e7d4      	b.n	8000dcc <__udivmoddi4+0x24c>
 8000e22:	46d6      	mov	lr, sl
 8000e24:	e77f      	b.n	8000d26 <__udivmoddi4+0x1a6>
 8000e26:	4463      	add	r3, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e74d      	b.n	8000cc8 <__udivmoddi4+0x148>
 8000e2c:	4606      	mov	r6, r0
 8000e2e:	4623      	mov	r3, r4
 8000e30:	4608      	mov	r0, r1
 8000e32:	e70f      	b.n	8000c54 <__udivmoddi4+0xd4>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	e730      	b.n	8000c9c <__udivmoddi4+0x11c>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <ADC_READ>:
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM3_Init(void);

void ADC_READ(ADC_HandleTypeDef *hadc, short int *value_read) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start(hadc);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f001 f9e0 	bl	8002210 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(hadc, 1) == HAL_OK) {
 8000e50:	2101      	movs	r1, #1
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f001 fac3 	bl	80023de <HAL_ADC_PollForConversion>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10a      	bne.n	8000e74 <ADC_READ+0x34>
		*value_read = (HAL_ADC_GetValue(hadc) - BIAS_THRESHOLD);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f001 fb48 	bl	80024f4 <HAL_ADC_GetValue>
 8000e64:	4603      	mov	r3, r0
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	f6a3 236e 	subw	r3, r3, #2670	@ 0xa6e
 8000e6c:	b29b      	uxth	r3, r3
 8000e6e:	b21a      	sxth	r2, r3
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	801a      	strh	r2, [r3, #0]
	}
	HAL_ADC_Stop(hadc);
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f001 fa7f 	bl	8002378 <HAL_ADC_Stop>
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	0000      	movs	r0, r0
 8000e84:	0000      	movs	r0, r0
	...

08000e88 <dtw>:

float dtw(int32_t ref[NUM_FEATURES][NUM_FRAMES],
		int32_t test[NUM_FEATURES][NUM_FRAMES]) {
 8000e88:	b5b0      	push	{r4, r5, r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
	float total_distance = 0.0;
 8000e92:	f04f 0300 	mov.w	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
	float distance;

	for (uint8_t i = 0; i < NUM_FRAMES; i++) {
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]
 8000e9c:	e05d      	b.n	8000f5a <dtw+0xd2>
		distance = 0.0;
 8000e9e:	f04f 0300 	mov.w	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]

		for (uint8_t j = 0; j < NUM_FEATURES; j++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73bb      	strb	r3, [r7, #14]
 8000ea8:	e035      	b.n	8000f16 <dtw+0x8e>
			distance += pow(ref[j][i] - test[j][i], 2);
 8000eaa:	7bbb      	ldrb	r3, [r7, #14]
 8000eac:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000eb0:	fb02 f303 	mul.w	r3, r2, r3
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	7bfa      	ldrb	r2, [r7, #15]
 8000eba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000ebe:	7bbb      	ldrb	r3, [r7, #14]
 8000ec0:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8000ec4:	fb01 f303 	mul.w	r3, r1, r3
 8000ec8:	6839      	ldr	r1, [r7, #0]
 8000eca:	440b      	add	r3, r1
 8000ecc:	7bf9      	ldrb	r1, [r7, #15]
 8000ece:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fad1 	bl	800047c <__aeabi_i2d>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	ed9f 1b24 	vldr	d1, [pc, #144]	@ 8000f70 <dtw+0xe8>
 8000ee2:	ec43 2b10 	vmov	d0, r2, r3
 8000ee6:	f003 fdc1 	bl	8004a6c <pow>
 8000eea:	ec55 4b10 	vmov	r4, r5, d0
 8000eee:	6938      	ldr	r0, [r7, #16]
 8000ef0:	f7ff fad6 	bl	80004a0 <__aeabi_f2d>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4620      	mov	r0, r4
 8000efa:	4629      	mov	r1, r5
 8000efc:	f7ff f972 	bl	80001e4 <__adddf3>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4610      	mov	r0, r2
 8000f06:	4619      	mov	r1, r3
 8000f08:	f7ff fdd2 	bl	8000ab0 <__aeabi_d2f>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	613b      	str	r3, [r7, #16]
		for (uint8_t j = 0; j < NUM_FEATURES; j++)
 8000f10:	7bbb      	ldrb	r3, [r7, #14]
 8000f12:	3301      	adds	r3, #1
 8000f14:	73bb      	strb	r3, [r7, #14]
 8000f16:	7bbb      	ldrb	r3, [r7, #14]
 8000f18:	2b09      	cmp	r3, #9
 8000f1a:	d9c6      	bls.n	8000eaa <dtw+0x22>

		total_distance += sqrt(distance);
 8000f1c:	6938      	ldr	r0, [r7, #16]
 8000f1e:	f7ff fabf 	bl	80004a0 <__aeabi_f2d>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	ec43 2b10 	vmov	d0, r2, r3
 8000f2a:	f003 fe0f 	bl	8004b4c <sqrt>
 8000f2e:	ec55 4b10 	vmov	r4, r5, d0
 8000f32:	6978      	ldr	r0, [r7, #20]
 8000f34:	f7ff fab4 	bl	80004a0 <__aeabi_f2d>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	4629      	mov	r1, r5
 8000f40:	f7ff f950 	bl	80001e4 <__adddf3>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f7ff fdb0 	bl	8000ab0 <__aeabi_d2f>
 8000f50:	4603      	mov	r3, r0
 8000f52:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < NUM_FRAMES; i++) {
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	3301      	adds	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	2b63      	cmp	r3, #99	@ 0x63
 8000f5e:	d99e      	bls.n	8000e9e <dtw+0x16>
	}

	return total_distance;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	ee07 3a90 	vmov	s15, r3
}
 8000f66:	eeb0 0a67 	vmov.f32	s0, s15
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f70:	00000000 	.word	0x00000000
 8000f74:	40000000 	.word	0x40000000

08000f78 <Flash_Write>:

HAL_StatusTypeDef Flash_Write(uint32_t start_address, int32_t *data,
		uint32_t size) {
 8000f78:	b5b0      	push	{r4, r5, r7, lr}
 8000f7a:	b08e      	sub	sp, #56	@ 0x38
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status;
	uint32_t Address = start_address;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	637b      	str	r3, [r7, #52]	@ 0x34

	// Unlock the Flash
	HAL_FLASH_Unlock();
 8000f88:	f001 fe56 	bl	8002c38 <HAL_FLASH_Unlock>

	// Erase the Flash memory sector(s) if necessary
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SectorError = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

	// Determine the sector to start erasing
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000f94:	2302      	movs	r3, #2
 8000f96:	62bb      	str	r3, [r7, #40]	@ 0x28
	EraseInitStruct.Sector = FLASH_SECTOR_6; // Adjust this according to the address
 8000f98:	2306      	movs	r3, #6
 8000f9a:	623b      	str	r3, [r7, #32]
	EraseInitStruct.NbSectors = 1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24

	status = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000fa0:	f107 0214 	add.w	r2, r7, #20
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 ffb6 	bl	8002f1c <HAL_FLASHEx_Erase>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (status != HAL_OK) {
 8000fb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d004      	beq.n	8000fc8 <Flash_Write+0x50>
		HAL_FLASH_Lock();
 8000fbe:	f001 fe5d 	bl	8002c7c <HAL_FLASH_Lock>
		return status;
 8000fc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fc6:	e029      	b.n	800101c <Flash_Write+0xa4>
	}

	// Write data to Flash memory
	for (uint32_t i = 0; i < size; i++) {
 8000fc8:	2300      	movs	r3, #0
 8000fca:	633b      	str	r3, [r7, #48]	@ 0x30
 8000fcc:	e01f      	b.n	800100e <Flash_Write+0x96>
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, data[i]);
 8000fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	17da      	asrs	r2, r3, #31
 8000fda:	461c      	mov	r4, r3
 8000fdc:	4615      	mov	r5, r2
 8000fde:	4622      	mov	r2, r4
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f001 fdd3 	bl	8002b90 <HAL_FLASH_Program>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (status != HAL_OK) {
 8000ff0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <Flash_Write+0x8a>
			HAL_FLASH_Lock();
 8000ff8:	f001 fe40 	bl	8002c7c <HAL_FLASH_Lock>
			return status;
 8000ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001000:	e00c      	b.n	800101c <Flash_Write+0xa4>
		}
		Address += 4; // Increment address by word size (4 bytes)
 8001002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001004:	3304      	adds	r3, #4
 8001006:	637b      	str	r3, [r7, #52]	@ 0x34
	for (uint32_t i = 0; i < size; i++) {
 8001008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800100a:	3301      	adds	r3, #1
 800100c:	633b      	str	r3, [r7, #48]	@ 0x30
 800100e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	429a      	cmp	r2, r3
 8001014:	d3db      	bcc.n	8000fce <Flash_Write+0x56>
	}

	// Lock the Flash
	HAL_FLASH_Lock();
 8001016:	f001 fe31 	bl	8002c7c <HAL_FLASH_Lock>

	return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3738      	adds	r7, #56	@ 0x38
 8001020:	46bd      	mov	sp, r7
 8001022:	bdb0      	pop	{r4, r5, r7, pc}

08001024 <Flash_Read>:

void Flash_Read(uint32_t start_address, int32_t *data, uint32_t size) {
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
	uint32_t Address = start_address;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	617b      	str	r3, [r7, #20]

	// Read data from Flash memory
	for (uint32_t i = 0; i < size; i++) {
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	e00c      	b.n	8001054 <Flash_Read+0x30>
		data[i] = *(__IO int32_t*) Address;
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	440b      	add	r3, r1
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	601a      	str	r2, [r3, #0]
		Address += 4; // Increment address by word size (4 bytes)
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	3304      	adds	r3, #4
 800104c:	617b      	str	r3, [r7, #20]
	for (uint32_t i = 0; i < size; i++) {
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	3301      	adds	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	429a      	cmp	r2, r3
 800105a:	d3ee      	bcc.n	800103a <Flash_Read+0x16>
	}
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	371c      	adds	r7, #28
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <flatten_array>:

void flatten_array(int32_t source[NUM_REFERENCES + 1][NUM_FEATURES][NUM_FRAMES],
		int32_t *flattened) {
 800106a:	b480      	push	{r7}
 800106c:	b087      	sub	sp, #28
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
	for (int i = 0, index = 0; i < NUM_REFERENCES; i++) {
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	e02a      	b.n	80010d4 <flatten_array+0x6a>
		for (int j = 0; j < NUM_FEATURES; j++) {
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	e021      	b.n	80010c8 <flatten_array+0x5e>
			for (int k = 0; k < NUM_FRAMES; k++) {
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	e018      	b.n	80010bc <flatten_array+0x52>
				flattened[index++] = source[i][j][k];
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001090:	fb02 f303 	mul.w	r3, r2, r3
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	441a      	add	r2, r3
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1c59      	adds	r1, r3, #1
 800109c:	6139      	str	r1, [r7, #16]
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	6839      	ldr	r1, [r7, #0]
 80010a2:	440b      	add	r3, r1
 80010a4:	68f9      	ldr	r1, [r7, #12]
 80010a6:	2064      	movs	r0, #100	@ 0x64
 80010a8:	fb01 f000 	mul.w	r0, r1, r0
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	4401      	add	r1, r0
 80010b0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80010b4:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < NUM_FRAMES; k++) {
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	3301      	adds	r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	2b63      	cmp	r3, #99	@ 0x63
 80010c0:	dde3      	ble.n	800108a <flatten_array+0x20>
		for (int j = 0; j < NUM_FEATURES; j++) {
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3301      	adds	r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2b09      	cmp	r3, #9
 80010cc:	ddda      	ble.n	8001084 <flatten_array+0x1a>
	for (int i = 0, index = 0; i < NUM_REFERENCES; i++) {
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	3301      	adds	r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	2b09      	cmp	r3, #9
 80010d8:	ddd1      	ble.n	800107e <flatten_array+0x14>
			}
		}
	}
}
 80010da:	bf00      	nop
 80010dc:	bf00      	nop
 80010de:	371c      	adds	r7, #28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <unflatten_array>:

void unflatten_array(int32_t *flattened,
		int32_t destination[NUM_REFERENCES + 1][NUM_FEATURES][NUM_FRAMES]) {
 80010e8:	b480      	push	{r7}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	for (int i = 0, index = 0; i < NUM_REFERENCES; i++) {
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	e02a      	b.n	8001152 <unflatten_array+0x6a>
		for (int j = 0; j < NUM_FEATURES; j++) {
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	e021      	b.n	8001146 <unflatten_array+0x5e>
			for (int k = 0; k < NUM_FRAMES; k++) {
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	e018      	b.n	800113a <unflatten_array+0x52>
				destination[i][j][k] = flattened[index++];
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	613a      	str	r2, [r7, #16]
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	441a      	add	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 800111a:	fb01 f303 	mul.w	r3, r1, r3
 800111e:	6839      	ldr	r1, [r7, #0]
 8001120:	440b      	add	r3, r1
 8001122:	6811      	ldr	r1, [r2, #0]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	2064      	movs	r0, #100	@ 0x64
 8001128:	fb02 f000 	mul.w	r0, r2, r0
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	4402      	add	r2, r0
 8001130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int k = 0; k < NUM_FRAMES; k++) {
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	3301      	adds	r3, #1
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	2b63      	cmp	r3, #99	@ 0x63
 800113e:	dde3      	ble.n	8001108 <unflatten_array+0x20>
		for (int j = 0; j < NUM_FEATURES; j++) {
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3301      	adds	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b09      	cmp	r3, #9
 800114a:	ddda      	ble.n	8001102 <unflatten_array+0x1a>
	for (int i = 0, index = 0; i < NUM_REFERENCES; i++) {
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	3301      	adds	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b09      	cmp	r3, #9
 8001156:	ddd1      	ble.n	80010fc <unflatten_array+0x14>
			}
		}
	}
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	371c      	adds	r7, #28
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <main>:
uint16_t l_motor = 0;

float min_distance, dist = 0.0;
uint8_t decision_index = 0;

int main(void) {
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
	HAL_Init();
 800116e:	f000 ff75 	bl	800205c <HAL_Init>
	SystemClock_Config();
 8001172:	f000 fb99 	bl	80018a8 <SystemClock_Config>

	MX_GPIO_Init();
 8001176:	f000 fd67 	bl	8001c48 <MX_GPIO_Init>
	MX_ADC1_Init();
 800117a:	f000 fbfd 	bl	8001978 <MX_ADC1_Init>
	MX_TIM1_Init();
 800117e:	f000 fc4d 	bl	8001a1c <MX_TIM1_Init>
	MX_TIM3_Init();
 8001182:	f000 fceb 	bl	8001b5c <MX_TIM3_Init>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001186:	2108      	movs	r1, #8
 8001188:	489a      	ldr	r0, [pc, #616]	@ (80013f4 <main+0x28c>)
 800118a:	f002 fe6b 	bl	8003e64 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800118e:	2104      	movs	r1, #4
 8001190:	4899      	ldr	r0, [pc, #612]	@ (80013f8 <main+0x290>)
 8001192:	f002 fe67 	bl	8003e64 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	2110      	movs	r1, #16
 800119a:	4898      	ldr	r0, [pc, #608]	@ (80013fc <main+0x294>)
 800119c:	f002 f964 	bl	8003468 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2120      	movs	r1, #32
 80011a4:	4895      	ldr	r0, [pc, #596]	@ (80013fc <main+0x294>)
 80011a6:	f002 f95f 	bl	8003468 <HAL_GPIO_WritePin>

	for (uint8_t i = 0; i < 10; i++) {
 80011aa:	2300      	movs	r3, #0
 80011ac:	75fb      	strb	r3, [r7, #23]
 80011ae:	e014      	b.n	80011da <main+0x72>
		HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b6:	4892      	ldr	r0, [pc, #584]	@ (8001400 <main+0x298>)
 80011b8:	f002 f956 	bl	8003468 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80011bc:	2064      	movs	r0, #100	@ 0x64
 80011be:	f000 ffbf 	bl	8002140 <HAL_Delay>
		HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011c8:	488d      	ldr	r0, [pc, #564]	@ (8001400 <main+0x298>)
 80011ca:	f002 f94d 	bl	8003468 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80011ce:	2064      	movs	r0, #100	@ 0x64
 80011d0:	f000 ffb6 	bl	8002140 <HAL_Delay>
	for (uint8_t i = 0; i < 10; i++) {
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	3301      	adds	r3, #1
 80011d8:	75fb      	strb	r3, [r7, #23]
 80011da:	7dfb      	ldrb	r3, [r7, #23]
 80011dc:	2b09      	cmp	r3, #9
 80011de:	d9e7      	bls.n	80011b0 <main+0x48>
	}

	// Flash checking, loading features
	Flash_Read(FLASH_USER_START_ADDR, &isFlashed, 1);
 80011e0:	2201      	movs	r2, #1
 80011e2:	4988      	ldr	r1, [pc, #544]	@ (8001404 <main+0x29c>)
 80011e4:	4888      	ldr	r0, [pc, #544]	@ (8001408 <main+0x2a0>)
 80011e6:	f7ff ff1d 	bl	8001024 <Flash_Read>
	if (isFlashed) {
 80011ea:	4b86      	ldr	r3, [pc, #536]	@ (8001404 <main+0x29c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00c      	beq.n	800120c <main+0xa4>
		voice = NUM_REFERENCES;
 80011f2:	4b86      	ldr	r3, [pc, #536]	@ (800140c <main+0x2a4>)
 80011f4:	220a      	movs	r2, #10
 80011f6:	701a      	strb	r2, [r3, #0]
		Flash_Read(FLASH_USER_START_ADDR + 4, flattened_features,
 80011f8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80011fc:	4984      	ldr	r1, [pc, #528]	@ (8001410 <main+0x2a8>)
 80011fe:	4885      	ldr	r0, [pc, #532]	@ (8001414 <main+0x2ac>)
 8001200:	f7ff ff10 	bl	8001024 <Flash_Read>
		NUM_REFERENCES * NUM_FRAMES * NUM_FEATURES);
		unflatten_array(flattened_features, features);
 8001204:	4984      	ldr	r1, [pc, #528]	@ (8001418 <main+0x2b0>)
 8001206:	4882      	ldr	r0, [pc, #520]	@ (8001410 <main+0x2a8>)
 8001208:	f7ff ff6e 	bl	80010e8 <unflatten_array>
	}

	while (1) {
		ADC_READ(&hadc1, &sample);
 800120c:	4983      	ldr	r1, [pc, #524]	@ (800141c <main+0x2b4>)
 800120e:	4884      	ldr	r0, [pc, #528]	@ (8001420 <main+0x2b8>)
 8001210:	f7ff fe16 	bl	8000e40 <ADC_READ>
		min_distance = 1000000000000000.0;
 8001214:	4b83      	ldr	r3, [pc, #524]	@ (8001424 <main+0x2bc>)
 8001216:	4a84      	ldr	r2, [pc, #528]	@ (8001428 <main+0x2c0>)
 8001218:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001220:	4877      	ldr	r0, [pc, #476]	@ (8001400 <main+0x298>)
 8001222:	f002 f921 	bl	8003468 <HAL_GPIO_WritePin>
		if (sample > 0) {
 8001226:	4b7d      	ldr	r3, [pc, #500]	@ (800141c <main+0x2b4>)
 8001228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800122c:	2b00      	cmp	r3, #0
 800122e:	dded      	ble.n	800120c <main+0xa4>
			HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);
 8001230:	2201      	movs	r2, #1
 8001232:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001236:	4872      	ldr	r0, [pc, #456]	@ (8001400 <main+0x298>)
 8001238:	f002 f916 	bl	8003468 <HAL_GPIO_WritePin>
			for (uint8_t i = 0; i < NUM_FRAMES; i++) {
 800123c:	2300      	movs	r3, #0
 800123e:	75bb      	strb	r3, [r7, #22]
 8001240:	e132      	b.n	80014a8 <main+0x340>
				// reset all features
				energy = 0;
 8001242:	4b7a      	ldr	r3, [pc, #488]	@ (800142c <main+0x2c4>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
				zero_crossed_flag = 0;
 8001248:	4b79      	ldr	r3, [pc, #484]	@ (8001430 <main+0x2c8>)
 800124a:	2200      	movs	r2, #0
 800124c:	701a      	strb	r2, [r3, #0]
				zero_crossing_count = 0;
 800124e:	4b79      	ldr	r3, [pc, #484]	@ (8001434 <main+0x2cc>)
 8001250:	2200      	movs	r2, #0
 8001252:	801a      	strh	r2, [r3, #0]
				buffer_index = 0;
 8001254:	4b78      	ldr	r3, [pc, #480]	@ (8001438 <main+0x2d0>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
				for (uint8_t b = 0; b < BUFFER_SIZE; b++) {
 800125a:	2300      	movs	r3, #0
 800125c:	757b      	strb	r3, [r7, #21]
 800125e:	e007      	b.n	8001270 <main+0x108>
					buffer[b] = 0;
 8001260:	7d7b      	ldrb	r3, [r7, #21]
 8001262:	4a76      	ldr	r2, [pc, #472]	@ (800143c <main+0x2d4>)
 8001264:	2100      	movs	r1, #0
 8001266:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (uint8_t b = 0; b < BUFFER_SIZE; b++) {
 800126a:	7d7b      	ldrb	r3, [r7, #21]
 800126c:	3301      	adds	r3, #1
 800126e:	757b      	strb	r3, [r7, #21]
 8001270:	7d7b      	ldrb	r3, [r7, #21]
 8001272:	2b08      	cmp	r3, #8
 8001274:	d9f4      	bls.n	8001260 <main+0xf8>
				}
				for (uint16_t j = 0; j < (uint16_t) (NUM_SAMPLES / NUM_FRAMES);
 8001276:	2300      	movs	r3, #0
 8001278:	827b      	strh	r3, [r7, #18]
 800127a:	e090      	b.n	800139e <main+0x236>
						j++) {

					// sample reading
					ADC_READ(&hadc1, &sample);
 800127c:	4967      	ldr	r1, [pc, #412]	@ (800141c <main+0x2b4>)
 800127e:	4868      	ldr	r0, [pc, #416]	@ (8001420 <main+0x2b8>)
 8001280:	f7ff fdde 	bl	8000e40 <ADC_READ>

					// energy calculation
					energy += abs(sample);
 8001284:	4b65      	ldr	r3, [pc, #404]	@ (800141c <main+0x2b4>)
 8001286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800128a:	2b00      	cmp	r3, #0
 800128c:	bfb8      	it	lt
 800128e:	425b      	neglt	r3, r3
 8001290:	b29b      	uxth	r3, r3
 8001292:	461a      	mov	r2, r3
 8001294:	4b65      	ldr	r3, [pc, #404]	@ (800142c <main+0x2c4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4413      	add	r3, r2
 800129a:	4a64      	ldr	r2, [pc, #400]	@ (800142c <main+0x2c4>)
 800129c:	6013      	str	r3, [r2, #0]
					// zero crossing detection
					x = (uint8_t) (sample > ZERO_CROSSING_THRESHOLD);
 800129e:	4b5f      	ldr	r3, [pc, #380]	@ (800141c <main+0x2b4>)
 80012a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a4:	4a66      	ldr	r2, [pc, #408]	@ (8001440 <main+0x2d8>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	bfac      	ite	ge
 80012aa:	2301      	movge	r3, #1
 80012ac:	2300      	movlt	r3, #0
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b64      	ldr	r3, [pc, #400]	@ (8001444 <main+0x2dc>)
 80012b4:	701a      	strb	r2, [r3, #0]
					if (x != zero_crossed_flag) {
 80012b6:	4b63      	ldr	r3, [pc, #396]	@ (8001444 <main+0x2dc>)
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001430 <main+0x2c8>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d009      	beq.n	80012d6 <main+0x16e>
						zero_crossed_flag = x;
 80012c2:	4b60      	ldr	r3, [pc, #384]	@ (8001444 <main+0x2dc>)
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001430 <main+0x2c8>)
 80012c8:	701a      	strb	r2, [r3, #0]
						zero_crossing_count++;
 80012ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001434 <main+0x2cc>)
 80012cc:	881b      	ldrh	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	4b58      	ldr	r3, [pc, #352]	@ (8001434 <main+0x2cc>)
 80012d4:	801a      	strh	r2, [r3, #0]
					}

					// auto-correlation calculations
					buffer[buffer_index] = sample;
 80012d6:	4b58      	ldr	r3, [pc, #352]	@ (8001438 <main+0x2d0>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	4b4f      	ldr	r3, [pc, #316]	@ (800141c <main+0x2b4>)
 80012de:	f9b3 1000 	ldrsh.w	r1, [r3]
 80012e2:	4b56      	ldr	r3, [pc, #344]	@ (800143c <main+0x2d4>)
 80012e4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

					for (uint8_t n = 1; n <= NUM_FEATURES - 2; n++) {
 80012e8:	2301      	movs	r3, #1
 80012ea:	747b      	strb	r3, [r7, #17]
 80012ec:	e041      	b.n	8001372 <main+0x20a>
						if (n <= buffer_index)
 80012ee:	4b52      	ldr	r3, [pc, #328]	@ (8001438 <main+0x2d0>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	7c7a      	ldrb	r2, [r7, #17]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d81c      	bhi.n	8001332 <main+0x1ca>
							autocorrelation[n - 1] += buffer[buffer_index]
 80012f8:	7c7b      	ldrb	r3, [r7, #17]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	4a52      	ldr	r2, [pc, #328]	@ (8001448 <main+0x2e0>)
 80012fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001302:	4b4d      	ldr	r3, [pc, #308]	@ (8001438 <main+0x2d0>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	4b4c      	ldr	r3, [pc, #304]	@ (800143c <main+0x2d4>)
 800130a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800130e:	4618      	mov	r0, r3
									* buffer[(buffer_index - n)];
 8001310:	4b49      	ldr	r3, [pc, #292]	@ (8001438 <main+0x2d0>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	7c7b      	ldrb	r3, [r7, #17]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	4a48      	ldr	r2, [pc, #288]	@ (800143c <main+0x2d4>)
 800131c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001320:	fb03 f200 	mul.w	r2, r3, r0
							autocorrelation[n - 1] += buffer[buffer_index]
 8001324:	7c7b      	ldrb	r3, [r7, #17]
 8001326:	3b01      	subs	r3, #1
 8001328:	440a      	add	r2, r1
 800132a:	4947      	ldr	r1, [pc, #284]	@ (8001448 <main+0x2e0>)
 800132c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001330:	e01c      	b.n	800136c <main+0x204>
						else
							autocorrelation[n - 1] += buffer[buffer_index]
 8001332:	7c7b      	ldrb	r3, [r7, #17]
 8001334:	3b01      	subs	r3, #1
 8001336:	4a44      	ldr	r2, [pc, #272]	@ (8001448 <main+0x2e0>)
 8001338:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800133c:	4b3e      	ldr	r3, [pc, #248]	@ (8001438 <main+0x2d0>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	4b3e      	ldr	r3, [pc, #248]	@ (800143c <main+0x2d4>)
 8001344:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001348:	4618      	mov	r0, r3
									* buffer[(buffer_index - n) + BUFFER_SIZE];
 800134a:	4b3b      	ldr	r3, [pc, #236]	@ (8001438 <main+0x2d0>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	7c7b      	ldrb	r3, [r7, #17]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	3309      	adds	r3, #9
 8001356:	4a39      	ldr	r2, [pc, #228]	@ (800143c <main+0x2d4>)
 8001358:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800135c:	fb03 f200 	mul.w	r2, r3, r0
							autocorrelation[n - 1] += buffer[buffer_index]
 8001360:	7c7b      	ldrb	r3, [r7, #17]
 8001362:	3b01      	subs	r3, #1
 8001364:	440a      	add	r2, r1
 8001366:	4938      	ldr	r1, [pc, #224]	@ (8001448 <main+0x2e0>)
 8001368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					for (uint8_t n = 1; n <= NUM_FEATURES - 2; n++) {
 800136c:	7c7b      	ldrb	r3, [r7, #17]
 800136e:	3301      	adds	r3, #1
 8001370:	747b      	strb	r3, [r7, #17]
 8001372:	7c7b      	ldrb	r3, [r7, #17]
 8001374:	2b08      	cmp	r3, #8
 8001376:	d9ba      	bls.n	80012ee <main+0x186>
					}

					// Update the buffer index
					buffer_index = (buffer_index + 1) % BUFFER_SIZE;
 8001378:	4b2f      	ldr	r3, [pc, #188]	@ (8001438 <main+0x2d0>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	4b33      	ldr	r3, [pc, #204]	@ (800144c <main+0x2e4>)
 8001380:	fb83 1302 	smull	r1, r3, r3, r2
 8001384:	1059      	asrs	r1, r3, #1
 8001386:	17d3      	asrs	r3, r2, #31
 8001388:	1ac9      	subs	r1, r1, r3
 800138a:	460b      	mov	r3, r1
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	440b      	add	r3, r1
 8001390:	1ad1      	subs	r1, r2, r3
 8001392:	b2ca      	uxtb	r2, r1
 8001394:	4b28      	ldr	r3, [pc, #160]	@ (8001438 <main+0x2d0>)
 8001396:	701a      	strb	r2, [r3, #0]
						j++) {
 8001398:	8a7b      	ldrh	r3, [r7, #18]
 800139a:	3301      	adds	r3, #1
 800139c:	827b      	strh	r3, [r7, #18]
				for (uint16_t j = 0; j < (uint16_t) (NUM_SAMPLES / NUM_FRAMES);
 800139e:	8a7b      	ldrh	r3, [r7, #18]
 80013a0:	2b9f      	cmp	r3, #159	@ 0x9f
 80013a2:	f67f af6b 	bls.w	800127c <main+0x114>
				}
				features[voice][0][i] = (int32_t) (energy
						/ (NUM_SAMPLES / NUM_FRAMES));
 80013a6:	4b21      	ldr	r3, [pc, #132]	@ (800142c <main+0x2c4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a29      	ldr	r2, [pc, #164]	@ (8001450 <main+0x2e8>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	09da      	lsrs	r2, r3, #7
				features[voice][0][i] = (int32_t) (energy
 80013b2:	4b16      	ldr	r3, [pc, #88]	@ (800140c <main+0x2a4>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461c      	mov	r4, r3
 80013b8:	7dbb      	ldrb	r3, [r7, #22]
 80013ba:	4610      	mov	r0, r2
 80013bc:	4916      	ldr	r1, [pc, #88]	@ (8001418 <main+0x2b0>)
 80013be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013c2:	fb04 f202 	mul.w	r2, r4, r2
 80013c6:	4413      	add	r3, r2
 80013c8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
				features[voice][1][i] = zero_crossing_count;
 80013cc:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <main+0x2cc>)
 80013ce:	881a      	ldrh	r2, [r3, #0]
 80013d0:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <main+0x2a4>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461c      	mov	r4, r3
 80013d6:	7dbb      	ldrb	r3, [r7, #22]
 80013d8:	4610      	mov	r0, r2
 80013da:	490f      	ldr	r1, [pc, #60]	@ (8001418 <main+0x2b0>)
 80013dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013e0:	fb04 f202 	mul.w	r2, r4, r2
 80013e4:	4413      	add	r3, r2
 80013e6:	3364      	adds	r3, #100	@ 0x64
 80013e8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]

				for (uint8_t autocorr = 0; autocorr < BUFFER_SIZE - 1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	743b      	strb	r3, [r7, #16]
 80013f0:	e054      	b.n	800149c <main+0x334>
 80013f2:	bf00      	nop
 80013f4:	200000d4 	.word	0x200000d4
 80013f8:	2000011c 	.word	0x2000011c
 80013fc:	40020000 	.word	0x40020000
 8001400:	40020800 	.word	0x40020800
 8001404:	2001499c 	.word	0x2001499c
 8001408:	08040000 	.word	0x08040000
 800140c:	20014998 	.word	0x20014998
 8001410:	2000ad58 	.word	0x2000ad58
 8001414:	08040004 	.word	0x08040004
 8001418:	20000178 	.word	0x20000178
 800141c:	200149a0 	.word	0x200149a0
 8001420:	2000008c 	.word	0x2000008c
 8001424:	200149d0 	.word	0x200149d0
 8001428:	58635fa9 	.word	0x58635fa9
 800142c:	200149a4 	.word	0x200149a4
 8001430:	200149a8 	.word	0x200149a8
 8001434:	200149aa 	.word	0x200149aa
 8001438:	20000176 	.word	0x20000176
 800143c:	20000164 	.word	0x20000164
 8001440:	fffffdf9 	.word	0xfffffdf9
 8001444:	20014999 	.word	0x20014999
 8001448:	200149ac 	.word	0x200149ac
 800144c:	38e38e39 	.word	0x38e38e39
 8001450:	cccccccd 	.word	0xcccccccd
						autocorr++) {
					features[voice][autocorr + 2][i] =
							(int32_t) (autocorrelation[autocorr]
 8001454:	7c3b      	ldrb	r3, [r7, #16]
 8001456:	4aa9      	ldr	r2, [pc, #676]	@ (80016fc <main+0x594>)
 8001458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
					features[voice][autocorr + 2][i] =
 800145c:	4aa8      	ldr	r2, [pc, #672]	@ (8001700 <main+0x598>)
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	4615      	mov	r5, r2
 8001462:	7c3a      	ldrb	r2, [r7, #16]
 8001464:	1c90      	adds	r0, r2, #2
 8001466:	7db9      	ldrb	r1, [r7, #22]
							(int32_t) (autocorrelation[autocorr]
 8001468:	4aa6      	ldr	r2, [pc, #664]	@ (8001704 <main+0x59c>)
 800146a:	fb82 4203 	smull	r4, r2, r2, r3
 800146e:	1192      	asrs	r2, r2, #6
 8001470:	17db      	asrs	r3, r3, #31
 8001472:	1ad2      	subs	r2, r2, r3
					features[voice][autocorr + 2][i] =
 8001474:	4ca4      	ldr	r4, [pc, #656]	@ (8001708 <main+0x5a0>)
 8001476:	2364      	movs	r3, #100	@ 0x64
 8001478:	fb03 f000 	mul.w	r0, r3, r0
 800147c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001480:	fb05 f303 	mul.w	r3, r5, r3
 8001484:	4403      	add	r3, r0
 8001486:	440b      	add	r3, r1
 8001488:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
									/ (NUM_SAMPLES / NUM_FRAMES));
					autocorrelation[autocorr] = 0;
 800148c:	7c3b      	ldrb	r3, [r7, #16]
 800148e:	4a9b      	ldr	r2, [pc, #620]	@ (80016fc <main+0x594>)
 8001490:	2100      	movs	r1, #0
 8001492:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						autocorr++) {
 8001496:	7c3b      	ldrb	r3, [r7, #16]
 8001498:	3301      	adds	r3, #1
 800149a:	743b      	strb	r3, [r7, #16]
				for (uint8_t autocorr = 0; autocorr < BUFFER_SIZE - 1;
 800149c:	7c3b      	ldrb	r3, [r7, #16]
 800149e:	2b07      	cmp	r3, #7
 80014a0:	d9d8      	bls.n	8001454 <main+0x2ec>
			for (uint8_t i = 0; i < NUM_FRAMES; i++) {
 80014a2:	7dbb      	ldrb	r3, [r7, #22]
 80014a4:	3301      	adds	r3, #1
 80014a6:	75bb      	strb	r3, [r7, #22]
 80014a8:	7dbb      	ldrb	r3, [r7, #22]
 80014aa:	2b63      	cmp	r3, #99	@ 0x63
 80014ac:	f67f aec9 	bls.w	8001242 <main+0xda>
				}
			}
			if (voice < NUM_REFERENCES) {
 80014b0:	4b93      	ldr	r3, [pc, #588]	@ (8001700 <main+0x598>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b09      	cmp	r3, #9
 80014b6:	d81d      	bhi.n	80014f4 <main+0x38c>
				voice++;
 80014b8:	4b91      	ldr	r3, [pc, #580]	@ (8001700 <main+0x598>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	4b8f      	ldr	r3, [pc, #572]	@ (8001700 <main+0x598>)
 80014c2:	701a      	strb	r2, [r3, #0]
				if (voice == NUM_REFERENCES) {
 80014c4:	4b8e      	ldr	r3, [pc, #568]	@ (8001700 <main+0x598>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b0a      	cmp	r3, #10
 80014ca:	f040 81bd 	bne.w	8001848 <main+0x6e0>
					isFlashed = 1;
 80014ce:	4b8f      	ldr	r3, [pc, #572]	@ (800170c <main+0x5a4>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	601a      	str	r2, [r3, #0]
					Flash_Write(FLASH_USER_START_ADDR, &isFlashed, 1);
 80014d4:	2201      	movs	r2, #1
 80014d6:	498d      	ldr	r1, [pc, #564]	@ (800170c <main+0x5a4>)
 80014d8:	488d      	ldr	r0, [pc, #564]	@ (8001710 <main+0x5a8>)
 80014da:	f7ff fd4d 	bl	8000f78 <Flash_Write>

					// save features on the flash
					flatten_array(features, flattened_features);
 80014de:	498d      	ldr	r1, [pc, #564]	@ (8001714 <main+0x5ac>)
 80014e0:	4889      	ldr	r0, [pc, #548]	@ (8001708 <main+0x5a0>)
 80014e2:	f7ff fdc2 	bl	800106a <flatten_array>
					Flash_Write(FLASH_USER_START_ADDR + 4, flattened_features,
 80014e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80014ea:	498a      	ldr	r1, [pc, #552]	@ (8001714 <main+0x5ac>)
 80014ec:	488a      	ldr	r0, [pc, #552]	@ (8001718 <main+0x5b0>)
 80014ee:	f7ff fd43 	bl	8000f78 <Flash_Write>
 80014f2:	e1a9      	b.n	8001848 <main+0x6e0>
					NUM_REFERENCES * NUM_FRAMES * NUM_FEATURES);
				}
			} else {
				// decision making
				for (uint8_t ref = 0; ref < NUM_REFERENCES; ref++) {
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e024      	b.n	8001544 <main+0x3dc>
					dist = dtw(features[ref], features[NUM_REFERENCES]);
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001500:	fb02 f303 	mul.w	r3, r2, r3
 8001504:	4a80      	ldr	r2, [pc, #512]	@ (8001708 <main+0x5a0>)
 8001506:	4413      	add	r3, r2
 8001508:	4984      	ldr	r1, [pc, #528]	@ (800171c <main+0x5b4>)
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fcbc 	bl	8000e88 <dtw>
 8001510:	eef0 7a40 	vmov.f32	s15, s0
 8001514:	4b82      	ldr	r3, [pc, #520]	@ (8001720 <main+0x5b8>)
 8001516:	edc3 7a00 	vstr	s15, [r3]
					if (dist < min_distance) {
 800151a:	4b81      	ldr	r3, [pc, #516]	@ (8001720 <main+0x5b8>)
 800151c:	ed93 7a00 	vldr	s14, [r3]
 8001520:	4b80      	ldr	r3, [pc, #512]	@ (8001724 <main+0x5bc>)
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152e:	d506      	bpl.n	800153e <main+0x3d6>
						min_distance = dist;
 8001530:	4b7b      	ldr	r3, [pc, #492]	@ (8001720 <main+0x5b8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a7b      	ldr	r2, [pc, #492]	@ (8001724 <main+0x5bc>)
 8001536:	6013      	str	r3, [r2, #0]
						decision_index = ref;
 8001538:	4a7b      	ldr	r2, [pc, #492]	@ (8001728 <main+0x5c0>)
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	7013      	strb	r3, [r2, #0]
				for (uint8_t ref = 0; ref < NUM_REFERENCES; ref++) {
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	3301      	adds	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	2b09      	cmp	r3, #9
 8001548:	d9d7      	bls.n	80014fa <main+0x392>
					}
				}
				if (decision_index < 2) {
 800154a:	4b77      	ldr	r3, [pc, #476]	@ (8001728 <main+0x5c0>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d850      	bhi.n	80015f4 <main+0x48c>
					// Forward
					HAL_GPIO_WritePin(Forward_R_GPIO_Port, Forward_R_Pin,
 8001552:	2201      	movs	r2, #1
 8001554:	2101      	movs	r1, #1
 8001556:	4875      	ldr	r0, [pc, #468]	@ (800172c <main+0x5c4>)
 8001558:	f001 ff86 	bl	8003468 <HAL_GPIO_WritePin>
							GPIO_PIN_SET);
					HAL_GPIO_WritePin(Forward_R_GPIO_Port, Forward_L_Pin,
 800155c:	2200      	movs	r2, #0
 800155e:	2102      	movs	r1, #2
 8001560:	4872      	ldr	r0, [pc, #456]	@ (800172c <main+0x5c4>)
 8001562:	f001 ff81 	bl	8003468 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);
					HAL_GPIO_WritePin(GPIOA, Backward_R_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2104      	movs	r1, #4
 800156a:	4870      	ldr	r0, [pc, #448]	@ (800172c <main+0x5c4>)
 800156c:	f001 ff7c 	bl	8003468 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, Backward_L_Pin, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	2108      	movs	r1, #8
 8001574:	486d      	ldr	r0, [pc, #436]	@ (800172c <main+0x5c4>)
 8001576:	f001 ff77 	bl	8003468 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800157a:	2201      	movs	r2, #1
 800157c:	2110      	movs	r1, #16
 800157e:	486b      	ldr	r0, [pc, #428]	@ (800172c <main+0x5c4>)
 8001580:	f001 ff72 	bl	8003468 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001584:	2201      	movs	r2, #1
 8001586:	2120      	movs	r1, #32
 8001588:	4868      	ldr	r0, [pc, #416]	@ (800172c <main+0x5c4>)
 800158a:	f001 ff6d 	bl	8003468 <HAL_GPIO_WritePin>

					r_motor = 40000;
 800158e:	4b68      	ldr	r3, [pc, #416]	@ (8001730 <main+0x5c8>)
 8001590:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8001594:	801a      	strh	r2, [r3, #0]
					l_motor = 40000;
 8001596:	4b67      	ldr	r3, [pc, #412]	@ (8001734 <main+0x5cc>)
 8001598:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800159c:	801a      	strh	r2, [r3, #0]

					for (int z = 0; z < 2000; z++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	e022      	b.n	80015ea <main+0x482>
						if (TIM1->CCR3 == r_motor && TIM3->CCR2 == l_motor) break;
 80015a4:	4b64      	ldr	r3, [pc, #400]	@ (8001738 <main+0x5d0>)
 80015a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015a8:	4a61      	ldr	r2, [pc, #388]	@ (8001730 <main+0x5c8>)
 80015aa:	8812      	ldrh	r2, [r2, #0]
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d106      	bne.n	80015be <main+0x456>
 80015b0:	4b62      	ldr	r3, [pc, #392]	@ (800173c <main+0x5d4>)
 80015b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b4:	4a5f      	ldr	r2, [pc, #380]	@ (8001734 <main+0x5cc>)
 80015b6:	8812      	ldrh	r2, [r2, #0]
 80015b8:	4293      	cmp	r3, r2
 80015ba:	f000 8140 	beq.w	800183e <main+0x6d6>
						TIM1->CCR3 = 20 * z;
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001738 <main+0x5d0>)
 80015cc:	63da      	str	r2, [r3, #60]	@ 0x3c
						TIM3->CCR2 = 20 * z;
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	461a      	mov	r2, r3
 80015da:	4b58      	ldr	r3, [pc, #352]	@ (800173c <main+0x5d4>)
 80015dc:	639a      	str	r2, [r3, #56]	@ 0x38
						HAL_Delay(1);
 80015de:	2001      	movs	r0, #1
 80015e0:	f000 fdae 	bl	8002140 <HAL_Delay>
					for (int z = 0; z < 2000; z++) {
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	3301      	adds	r3, #1
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80015f0:	dbd8      	blt.n	80015a4 <main+0x43c>
 80015f2:	e129      	b.n	8001848 <main+0x6e0>
					}

				} else if (decision_index < 4) {
 80015f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001728 <main+0x5c0>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d82a      	bhi.n	8001652 <main+0x4ea>
					// Backward
					HAL_GPIO_WritePin(Forward_R_GPIO_Port, Forward_R_Pin,
 80015fc:	2200      	movs	r2, #0
 80015fe:	2101      	movs	r1, #1
 8001600:	484a      	ldr	r0, [pc, #296]	@ (800172c <main+0x5c4>)
 8001602:	f001 ff31 	bl	8003468 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);
					HAL_GPIO_WritePin(Forward_R_GPIO_Port, Forward_L_Pin,
 8001606:	2201      	movs	r2, #1
 8001608:	2102      	movs	r1, #2
 800160a:	4848      	ldr	r0, [pc, #288]	@ (800172c <main+0x5c4>)
 800160c:	f001 ff2c 	bl	8003468 <HAL_GPIO_WritePin>
							GPIO_PIN_SET);
					HAL_GPIO_WritePin(GPIOA, Backward_R_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	2104      	movs	r1, #4
 8001614:	4845      	ldr	r0, [pc, #276]	@ (800172c <main+0x5c4>)
 8001616:	f001 ff27 	bl	8003468 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, Backward_L_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	2108      	movs	r1, #8
 800161e:	4843      	ldr	r0, [pc, #268]	@ (800172c <main+0x5c4>)
 8001620:	f001 ff22 	bl	8003468 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	2110      	movs	r1, #16
 8001628:	4840      	ldr	r0, [pc, #256]	@ (800172c <main+0x5c4>)
 800162a:	f001 ff1d 	bl	8003468 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800162e:	2201      	movs	r2, #1
 8001630:	2120      	movs	r1, #32
 8001632:	483e      	ldr	r0, [pc, #248]	@ (800172c <main+0x5c4>)
 8001634:	f001 ff18 	bl	8003468 <HAL_GPIO_WritePin>

					TIM1->CCR3 = 0;
 8001638:	4b3f      	ldr	r3, [pc, #252]	@ (8001738 <main+0x5d0>)
 800163a:	2200      	movs	r2, #0
 800163c:	63da      	str	r2, [r3, #60]	@ 0x3c
					TIM3->CCR2 = 0;
 800163e:	4b3f      	ldr	r3, [pc, #252]	@ (800173c <main+0x5d4>)
 8001640:	2200      	movs	r2, #0
 8001642:	639a      	str	r2, [r3, #56]	@ 0x38

					r_motor = 0;
 8001644:	4b3a      	ldr	r3, [pc, #232]	@ (8001730 <main+0x5c8>)
 8001646:	2200      	movs	r2, #0
 8001648:	801a      	strh	r2, [r3, #0]
					l_motor = 0;
 800164a:	4b3a      	ldr	r3, [pc, #232]	@ (8001734 <main+0x5cc>)
 800164c:	2200      	movs	r2, #0
 800164e:	801a      	strh	r2, [r3, #0]
 8001650:	e0fa      	b.n	8001848 <main+0x6e0>

				} else if (decision_index < 6) {
 8001652:	4b35      	ldr	r3, [pc, #212]	@ (8001728 <main+0x5c0>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b05      	cmp	r3, #5
 8001658:	d872      	bhi.n	8001740 <main+0x5d8>
					// Right
					HAL_GPIO_WritePin(Forward_R_GPIO_Port, Forward_R_Pin,
 800165a:	2200      	movs	r2, #0
 800165c:	2101      	movs	r1, #1
 800165e:	4833      	ldr	r0, [pc, #204]	@ (800172c <main+0x5c4>)
 8001660:	f001 ff02 	bl	8003468 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);
					HAL_GPIO_WritePin(Forward_R_GPIO_Port, Forward_L_Pin,
 8001664:	2200      	movs	r2, #0
 8001666:	2102      	movs	r1, #2
 8001668:	4830      	ldr	r0, [pc, #192]	@ (800172c <main+0x5c4>)
 800166a:	f001 fefd 	bl	8003468 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);
					HAL_GPIO_WritePin(GPIOA, Backward_R_Pin, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2104      	movs	r1, #4
 8001672:	482e      	ldr	r0, [pc, #184]	@ (800172c <main+0x5c4>)
 8001674:	f001 fef8 	bl	8003468 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, Backward_L_Pin, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	2108      	movs	r1, #8
 800167c:	482b      	ldr	r0, [pc, #172]	@ (800172c <main+0x5c4>)
 800167e:	f001 fef3 	bl	8003468 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001682:	2201      	movs	r2, #1
 8001684:	2110      	movs	r1, #16
 8001686:	4829      	ldr	r0, [pc, #164]	@ (800172c <main+0x5c4>)
 8001688:	f001 feee 	bl	8003468 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	2120      	movs	r1, #32
 8001690:	4826      	ldr	r0, [pc, #152]	@ (800172c <main+0x5c4>)
 8001692:	f001 fee9 	bl	8003468 <HAL_GPIO_WritePin>

					r_motor = 20000;
 8001696:	4b26      	ldr	r3, [pc, #152]	@ (8001730 <main+0x5c8>)
 8001698:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800169c:	801a      	strh	r2, [r3, #0]
					l_motor = 40000;
 800169e:	4b25      	ldr	r3, [pc, #148]	@ (8001734 <main+0x5cc>)
 80016a0:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80016a4:	801a      	strh	r2, [r3, #0]

					for (int z = 0; z < 2000; z++) {
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	e022      	b.n	80016f2 <main+0x58a>
						if (TIM1->CCR3 == r_motor && TIM3->CCR2 == l_motor) break;
 80016ac:	4b22      	ldr	r3, [pc, #136]	@ (8001738 <main+0x5d0>)
 80016ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001730 <main+0x5c8>)
 80016b2:	8812      	ldrh	r2, [r2, #0]
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d106      	bne.n	80016c6 <main+0x55e>
 80016b8:	4b20      	ldr	r3, [pc, #128]	@ (800173c <main+0x5d4>)
 80016ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001734 <main+0x5cc>)
 80016be:	8812      	ldrh	r2, [r2, #0]
 80016c0:	4293      	cmp	r3, r2
 80016c2:	f000 80be 	beq.w	8001842 <main+0x6da>
						TIM1->CCR3 = 10 * z;
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <main+0x5d0>)
 80016d4:	63da      	str	r2, [r3, #60]	@ 0x3c
						TIM3->CCR2 = 20 * z;
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b16      	ldr	r3, [pc, #88]	@ (800173c <main+0x5d4>)
 80016e4:	639a      	str	r2, [r3, #56]	@ 0x38
						HAL_Delay(1);
 80016e6:	2001      	movs	r0, #1
 80016e8:	f000 fd2a 	bl	8002140 <HAL_Delay>
					for (int z = 0; z < 2000; z++) {
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3301      	adds	r3, #1
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80016f8:	dbd8      	blt.n	80016ac <main+0x544>
 80016fa:	e0a5      	b.n	8001848 <main+0x6e0>
 80016fc:	200149ac 	.word	0x200149ac
 8001700:	20014998 	.word	0x20014998
 8001704:	66666667 	.word	0x66666667
 8001708:	20000178 	.word	0x20000178
 800170c:	2001499c 	.word	0x2001499c
 8001710:	08040000 	.word	0x08040000
 8001714:	2000ad58 	.word	0x2000ad58
 8001718:	08040004 	.word	0x08040004
 800171c:	20009db8 	.word	0x20009db8
 8001720:	200149d4 	.word	0x200149d4
 8001724:	200149d0 	.word	0x200149d0
 8001728:	200149d8 	.word	0x200149d8
 800172c:	40020000 	.word	0x40020000
 8001730:	200149cc 	.word	0x200149cc
 8001734:	200149ce 	.word	0x200149ce
 8001738:	40010000 	.word	0x40010000
 800173c:	40000400 	.word	0x40000400
					}


				} else if (decision_index < 8) {
 8001740:	4b44      	ldr	r3, [pc, #272]	@ (8001854 <main+0x6ec>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b07      	cmp	r3, #7
 8001746:	d84f      	bhi.n	80017e8 <main+0x680>
					// Left
					HAL_GPIO_WritePin(Forward_R_GPIO_Port, Forward_R_Pin,
 8001748:	2200      	movs	r2, #0
 800174a:	2101      	movs	r1, #1
 800174c:	4842      	ldr	r0, [pc, #264]	@ (8001858 <main+0x6f0>)
 800174e:	f001 fe8b 	bl	8003468 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);
					HAL_GPIO_WritePin(Forward_R_GPIO_Port, Forward_L_Pin,
 8001752:	2200      	movs	r2, #0
 8001754:	2102      	movs	r1, #2
 8001756:	4840      	ldr	r0, [pc, #256]	@ (8001858 <main+0x6f0>)
 8001758:	f001 fe86 	bl	8003468 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);
					HAL_GPIO_WritePin(GPIOA, Backward_R_Pin, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	2104      	movs	r1, #4
 8001760:	483d      	ldr	r0, [pc, #244]	@ (8001858 <main+0x6f0>)
 8001762:	f001 fe81 	bl	8003468 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, Backward_L_Pin, GPIO_PIN_SET);
 8001766:	2201      	movs	r2, #1
 8001768:	2108      	movs	r1, #8
 800176a:	483b      	ldr	r0, [pc, #236]	@ (8001858 <main+0x6f0>)
 800176c:	f001 fe7c 	bl	8003468 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001770:	2201      	movs	r2, #1
 8001772:	2110      	movs	r1, #16
 8001774:	4838      	ldr	r0, [pc, #224]	@ (8001858 <main+0x6f0>)
 8001776:	f001 fe77 	bl	8003468 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800177a:	2201      	movs	r2, #1
 800177c:	2120      	movs	r1, #32
 800177e:	4836      	ldr	r0, [pc, #216]	@ (8001858 <main+0x6f0>)
 8001780:	f001 fe72 	bl	8003468 <HAL_GPIO_WritePin>

					r_motor = 40000;
 8001784:	4b35      	ldr	r3, [pc, #212]	@ (800185c <main+0x6f4>)
 8001786:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800178a:	801a      	strh	r2, [r3, #0]
					l_motor = 20000;
 800178c:	4b34      	ldr	r3, [pc, #208]	@ (8001860 <main+0x6f8>)
 800178e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001792:	801a      	strh	r2, [r3, #0]

					for (int z = 0; z < 2000; z++) {
 8001794:	2300      	movs	r3, #0
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	e021      	b.n	80017de <main+0x676>
						if (TIM1->CCR3 == r_motor && TIM3->CCR2 == l_motor) break;
 800179a:	4b32      	ldr	r3, [pc, #200]	@ (8001864 <main+0x6fc>)
 800179c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800179e:	4a2f      	ldr	r2, [pc, #188]	@ (800185c <main+0x6f4>)
 80017a0:	8812      	ldrh	r2, [r2, #0]
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d105      	bne.n	80017b2 <main+0x64a>
 80017a6:	4b30      	ldr	r3, [pc, #192]	@ (8001868 <main+0x700>)
 80017a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017aa:	4a2d      	ldr	r2, [pc, #180]	@ (8001860 <main+0x6f8>)
 80017ac:	8812      	ldrh	r2, [r2, #0]
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d049      	beq.n	8001846 <main+0x6de>
						TIM3->CCR2 = 10 * z;
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	4613      	mov	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	4413      	add	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	461a      	mov	r2, r3
 80017be:	4b2a      	ldr	r3, [pc, #168]	@ (8001868 <main+0x700>)
 80017c0:	639a      	str	r2, [r3, #56]	@ 0x38
						TIM1->CCR3 = 20 * z;
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b25      	ldr	r3, [pc, #148]	@ (8001864 <main+0x6fc>)
 80017d0:	63da      	str	r2, [r3, #60]	@ 0x3c
						HAL_Delay(1);
 80017d2:	2001      	movs	r0, #1
 80017d4:	f000 fcb4 	bl	8002140 <HAL_Delay>
					for (int z = 0; z < 2000; z++) {
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	3301      	adds	r3, #1
 80017dc:	603b      	str	r3, [r7, #0]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80017e4:	dbd9      	blt.n	800179a <main+0x632>
 80017e6:	e02f      	b.n	8001848 <main+0x6e0>
					}
				} else {
					// Stop
					HAL_GPIO_WritePin(Forward_R_GPIO_Port, Forward_R_Pin,
 80017e8:	2200      	movs	r2, #0
 80017ea:	2101      	movs	r1, #1
 80017ec:	481a      	ldr	r0, [pc, #104]	@ (8001858 <main+0x6f0>)
 80017ee:	f001 fe3b 	bl	8003468 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);
					HAL_GPIO_WritePin(Forward_R_GPIO_Port, Forward_L_Pin,
 80017f2:	2200      	movs	r2, #0
 80017f4:	2102      	movs	r1, #2
 80017f6:	4818      	ldr	r0, [pc, #96]	@ (8001858 <main+0x6f0>)
 80017f8:	f001 fe36 	bl	8003468 <HAL_GPIO_WritePin>
							GPIO_PIN_RESET);
					HAL_GPIO_WritePin(GPIOA, Backward_R_Pin, GPIO_PIN_RESET);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2104      	movs	r1, #4
 8001800:	4815      	ldr	r0, [pc, #84]	@ (8001858 <main+0x6f0>)
 8001802:	f001 fe31 	bl	8003468 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, Backward_L_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	2108      	movs	r1, #8
 800180a:	4813      	ldr	r0, [pc, #76]	@ (8001858 <main+0x6f0>)
 800180c:	f001 fe2c 	bl	8003468 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001810:	2201      	movs	r2, #1
 8001812:	2110      	movs	r1, #16
 8001814:	4810      	ldr	r0, [pc, #64]	@ (8001858 <main+0x6f0>)
 8001816:	f001 fe27 	bl	8003468 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800181a:	2201      	movs	r2, #1
 800181c:	2120      	movs	r1, #32
 800181e:	480e      	ldr	r0, [pc, #56]	@ (8001858 <main+0x6f0>)
 8001820:	f001 fe22 	bl	8003468 <HAL_GPIO_WritePin>

					TIM1->CCR3 = 0;
 8001824:	4b0f      	ldr	r3, [pc, #60]	@ (8001864 <main+0x6fc>)
 8001826:	2200      	movs	r2, #0
 8001828:	63da      	str	r2, [r3, #60]	@ 0x3c
					TIM3->CCR2 = 0;
 800182a:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <main+0x700>)
 800182c:	2200      	movs	r2, #0
 800182e:	639a      	str	r2, [r3, #56]	@ 0x38

					r_motor = 0;
 8001830:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <main+0x6f4>)
 8001832:	2200      	movs	r2, #0
 8001834:	801a      	strh	r2, [r3, #0]
					l_motor = 0;
 8001836:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <main+0x6f8>)
 8001838:	2200      	movs	r2, #0
 800183a:	801a      	strh	r2, [r3, #0]
 800183c:	e004      	b.n	8001848 <main+0x6e0>
						if (TIM1->CCR3 == r_motor && TIM3->CCR2 == l_motor) break;
 800183e:	bf00      	nop
 8001840:	e002      	b.n	8001848 <main+0x6e0>
						if (TIM1->CCR3 == r_motor && TIM3->CCR2 == l_motor) break;
 8001842:	bf00      	nop
 8001844:	e000      	b.n	8001848 <main+0x6e0>
						if (TIM1->CCR3 == r_motor && TIM3->CCR2 == l_motor) break;
 8001846:	bf00      	nop
				}
			}
			HAL_Delay(500);
 8001848:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800184c:	f000 fc78 	bl	8002140 <HAL_Delay>
		ADC_READ(&hadc1, &sample);
 8001850:	e4dc      	b.n	800120c <main+0xa4>
 8001852:	bf00      	nop
 8001854:	200149d8 	.word	0x200149d8
 8001858:	40020000 	.word	0x40020000
 800185c:	200149cc 	.word	0x200149cc
 8001860:	200149ce 	.word	0x200149ce
 8001864:	40010000 	.word	0x40010000
 8001868:	40000400 	.word	0x40000400

0800186c <HAL_GPIO_EXTI_Callback>:
		}
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == Button_Pin) {
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800187c:	d10a      	bne.n	8001894 <HAL_GPIO_EXTI_Callback+0x28>
		voice = 0;
 800187e:	4b07      	ldr	r3, [pc, #28]	@ (800189c <HAL_GPIO_EXTI_Callback+0x30>)
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
		isFlashed = 0;
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <HAL_GPIO_EXTI_Callback+0x34>)
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
		Flash_Write(FLASH_USER_START_ADDR, &isFlashed, 1);
 800188a:	2201      	movs	r2, #1
 800188c:	4904      	ldr	r1, [pc, #16]	@ (80018a0 <HAL_GPIO_EXTI_Callback+0x34>)
 800188e:	4805      	ldr	r0, [pc, #20]	@ (80018a4 <HAL_GPIO_EXTI_Callback+0x38>)
 8001890:	f7ff fb72 	bl	8000f78 <Flash_Write>
	}
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20014998 	.word	0x20014998
 80018a0:	2001499c 	.word	0x2001499c
 80018a4:	08040000 	.word	0x08040000

080018a8 <SystemClock_Config>:

void SystemClock_Config(void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b094      	sub	sp, #80	@ 0x50
 80018ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80018ae:	f107 0320 	add.w	r3, r7, #32
 80018b2:	2230      	movs	r2, #48	@ 0x30
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 f8a6 	bl	8004a08 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80018bc:	f107 030c 	add.w	r3, r7, #12
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]

	__HAL_RCC_PWR_CLK_ENABLE();
 80018cc:	2300      	movs	r3, #0
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	4b27      	ldr	r3, [pc, #156]	@ (8001970 <SystemClock_Config+0xc8>)
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	4a26      	ldr	r2, [pc, #152]	@ (8001970 <SystemClock_Config+0xc8>)
 80018d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018da:	6413      	str	r3, [r2, #64]	@ 0x40
 80018dc:	4b24      	ldr	r3, [pc, #144]	@ (8001970 <SystemClock_Config+0xc8>)
 80018de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e8:	2300      	movs	r3, #0
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	4b21      	ldr	r3, [pc, #132]	@ (8001974 <SystemClock_Config+0xcc>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a20      	ldr	r2, [pc, #128]	@ (8001974 <SystemClock_Config+0xcc>)
 80018f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001974 <SystemClock_Config+0xcc>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	687b      	ldr	r3, [r7, #4]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001904:	2301      	movs	r3, #1
 8001906:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001908:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800190e:	2302      	movs	r3, #2
 8001910:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001912:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001916:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 12;
 8001918:	230c      	movs	r3, #12
 800191a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 96;
 800191c:	2360      	movs	r3, #96	@ 0x60
 800191e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001920:	2302      	movs	r3, #2
 8001922:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001924:	2304      	movs	r3, #4
 8001926:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001928:	f107 0320 	add.w	r3, r7, #32
 800192c:	4618      	mov	r0, r3
 800192e:	f001 fdcd 	bl	80034cc <HAL_RCC_OscConfig>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <SystemClock_Config+0x94>
		Error_Handler();
 8001938:	f000 fa12 	bl	8001d60 <Error_Handler>
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800193c:	230f      	movs	r3, #15
 800193e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001940:	2302      	movs	r3, #2
 8001942:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001948:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800194c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	2103      	movs	r1, #3
 8001958:	4618      	mov	r0, r3
 800195a:	f002 f82f 	bl	80039bc <HAL_RCC_ClockConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <SystemClock_Config+0xc0>
		Error_Handler();
 8001964:	f000 f9fc 	bl	8001d60 <Error_Handler>
	}
}
 8001968:	bf00      	nop
 800196a:	3750      	adds	r7, #80	@ 0x50
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800
 8001974:	40007000 	.word	0x40007000

08001978 <MX_ADC1_Init>:

static void MX_ADC1_Init(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800197e:	463b      	mov	r3, r7
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]

	hadc1.Instance = ADC1;
 800198a:	4b21      	ldr	r3, [pc, #132]	@ (8001a10 <MX_ADC1_Init+0x98>)
 800198c:	4a21      	ldr	r2, [pc, #132]	@ (8001a14 <MX_ADC1_Init+0x9c>)
 800198e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001990:	4b1f      	ldr	r3, [pc, #124]	@ (8001a10 <MX_ADC1_Init+0x98>)
 8001992:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001996:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001998:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <MX_ADC1_Init+0x98>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800199e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a10 <MX_ADC1_Init+0x98>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80019a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <MX_ADC1_Init+0x98>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019aa:	4b19      	ldr	r3, [pc, #100]	@ (8001a10 <MX_ADC1_Init+0x98>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019b2:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <MX_ADC1_Init+0x98>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019b8:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <MX_ADC1_Init+0x98>)
 80019ba:	4a17      	ldr	r2, [pc, #92]	@ (8001a18 <MX_ADC1_Init+0xa0>)
 80019bc:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019be:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <MX_ADC1_Init+0x98>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80019c4:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <MX_ADC1_Init+0x98>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80019ca:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <MX_ADC1_Init+0x98>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <MX_ADC1_Init+0x98>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80019d8:	480d      	ldr	r0, [pc, #52]	@ (8001a10 <MX_ADC1_Init+0x98>)
 80019da:	f000 fbd5 	bl	8002188 <HAL_ADC_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_ADC1_Init+0x70>
		Error_Handler();
 80019e4:	f000 f9bc 	bl	8001d60 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_9;
 80019e8:	2309      	movs	r3, #9
 80019ea:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80019f4:	463b      	mov	r3, r7
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	@ (8001a10 <MX_ADC1_Init+0x98>)
 80019fa:	f000 fd89 	bl	8002510 <HAL_ADC_ConfigChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001a04:	f000 f9ac 	bl	8001d60 <Error_Handler>
	}
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	2000008c 	.word	0x2000008c
 8001a14:	40012000 	.word	0x40012000
 8001a18:	0f000001 	.word	0x0f000001

08001a1c <MX_TIM1_Init>:

static void MX_TIM1_Init(void) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b096      	sub	sp, #88	@ 0x58
 8001a20:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a22:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a30:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]
 8001a4a:	615a      	str	r2, [r3, #20]
 8001a4c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	2220      	movs	r2, #32
 8001a52:	2100      	movs	r1, #0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f002 ffd7 	bl	8004a08 <memset>

	htim1.Instance = TIM1;
 8001a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b54 <MX_TIM1_Init+0x138>)
 8001a5c:	4a3e      	ldr	r2, [pc, #248]	@ (8001b58 <MX_TIM1_Init+0x13c>)
 8001a5e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001a60:	4b3c      	ldr	r3, [pc, #240]	@ (8001b54 <MX_TIM1_Init+0x138>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a66:	4b3b      	ldr	r3, [pc, #236]	@ (8001b54 <MX_TIM1_Init+0x138>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001a6c:	4b39      	ldr	r3, [pc, #228]	@ (8001b54 <MX_TIM1_Init+0x138>)
 8001a6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a72:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a74:	4b37      	ldr	r3, [pc, #220]	@ (8001b54 <MX_TIM1_Init+0x138>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001a7a:	4b36      	ldr	r3, [pc, #216]	@ (8001b54 <MX_TIM1_Init+0x138>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a80:	4b34      	ldr	r3, [pc, #208]	@ (8001b54 <MX_TIM1_Init+0x138>)
 8001a82:	2280      	movs	r2, #128	@ 0x80
 8001a84:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001a86:	4833      	ldr	r0, [pc, #204]	@ (8001b54 <MX_TIM1_Init+0x138>)
 8001a88:	f002 f944 	bl	8003d14 <HAL_TIM_Base_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM1_Init+0x7a>
		Error_Handler();
 8001a92:	f000 f965 	bl	8001d60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001a9c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	482c      	ldr	r0, [pc, #176]	@ (8001b54 <MX_TIM1_Init+0x138>)
 8001aa4:	f002 fb50 	bl	8004148 <HAL_TIM_ConfigClockSource>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM1_Init+0x96>
		Error_Handler();
 8001aae:	f000 f957 	bl	8001d60 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001ab2:	4828      	ldr	r0, [pc, #160]	@ (8001b54 <MX_TIM1_Init+0x138>)
 8001ab4:	f002 f97d 	bl	8003db2 <HAL_TIM_PWM_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM1_Init+0xa6>
		Error_Handler();
 8001abe:	f000 f94f 	bl	8001d60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001aca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4820      	ldr	r0, [pc, #128]	@ (8001b54 <MX_TIM1_Init+0x138>)
 8001ad2:	f002 fed9 	bl	8004888 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 8001adc:	f000 f940 	bl	8001d60 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ae0:	2360      	movs	r3, #96	@ 0x60
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aec:	2300      	movs	r3, #0
 8001aee:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8001afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b00:	2208      	movs	r2, #8
 8001b02:	4619      	mov	r1, r3
 8001b04:	4813      	ldr	r0, [pc, #76]	@ (8001b54 <MX_TIM1_Init+0x138>)
 8001b06:	f002 fa5d 	bl	8003fc4 <HAL_TIM_PWM_ConfigChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8001b10:	f000 f926 	bl	8001d60 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b2c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	4619      	mov	r1, r3
 8001b36:	4807      	ldr	r0, [pc, #28]	@ (8001b54 <MX_TIM1_Init+0x138>)
 8001b38:	f002 ff14 	bl	8004964 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 8001b42:	f000 f90d 	bl	8001d60 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim1);
 8001b46:	4803      	ldr	r0, [pc, #12]	@ (8001b54 <MX_TIM1_Init+0x138>)
 8001b48:	f000 f9b4 	bl	8001eb4 <HAL_TIM_MspPostInit>
}
 8001b4c:	bf00      	nop
 8001b4e:	3758      	adds	r7, #88	@ 0x58
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200000d4 	.word	0x200000d4
 8001b58:	40010000 	.word	0x40010000

08001b5c <MX_TIM3_Init>:

static void MX_TIM3_Init(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08e      	sub	sp, #56	@ 0x38
 8001b60:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b70:	f107 0320 	add.w	r3, r7, #32
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
 8001b88:	615a      	str	r2, [r3, #20]
 8001b8a:	619a      	str	r2, [r3, #24]

	htim3.Instance = TIM3;
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c40 <MX_TIM3_Init+0xe4>)
 8001b8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c44 <MX_TIM3_Init+0xe8>)
 8001b90:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001b92:	4b2b      	ldr	r3, [pc, #172]	@ (8001c40 <MX_TIM3_Init+0xe4>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b98:	4b29      	ldr	r3, [pc, #164]	@ (8001c40 <MX_TIM3_Init+0xe4>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001b9e:	4b28      	ldr	r3, [pc, #160]	@ (8001c40 <MX_TIM3_Init+0xe4>)
 8001ba0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ba4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba6:	4b26      	ldr	r3, [pc, #152]	@ (8001c40 <MX_TIM3_Init+0xe4>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bac:	4b24      	ldr	r3, [pc, #144]	@ (8001c40 <MX_TIM3_Init+0xe4>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001bb2:	4823      	ldr	r0, [pc, #140]	@ (8001c40 <MX_TIM3_Init+0xe4>)
 8001bb4:	f002 f8ae 	bl	8003d14 <HAL_TIM_Base_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM3_Init+0x66>
		Error_Handler();
 8001bbe:	f000 f8cf 	bl	8001d60 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001bc8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bcc:	4619      	mov	r1, r3
 8001bce:	481c      	ldr	r0, [pc, #112]	@ (8001c40 <MX_TIM3_Init+0xe4>)
 8001bd0:	f002 faba 	bl	8004148 <HAL_TIM_ConfigClockSource>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM3_Init+0x82>
		Error_Handler();
 8001bda:	f000 f8c1 	bl	8001d60 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001bde:	4818      	ldr	r0, [pc, #96]	@ (8001c40 <MX_TIM3_Init+0xe4>)
 8001be0:	f002 f8e7 	bl	8003db2 <HAL_TIM_PWM_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM3_Init+0x92>
		Error_Handler();
 8001bea:	f000 f8b9 	bl	8001d60 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001bf6:	f107 0320 	add.w	r3, r7, #32
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4810      	ldr	r0, [pc, #64]	@ (8001c40 <MX_TIM3_Init+0xe4>)
 8001bfe:	f002 fe43 	bl	8004888 <HAL_TIMEx_MasterConfigSynchronization>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8001c08:	f000 f8aa 	bl	8001d60 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c0c:	2360      	movs	r3, #96	@ 0x60
 8001c0e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	2204      	movs	r2, #4
 8001c20:	4619      	mov	r1, r3
 8001c22:	4807      	ldr	r0, [pc, #28]	@ (8001c40 <MX_TIM3_Init+0xe4>)
 8001c24:	f002 f9ce 	bl	8003fc4 <HAL_TIM_PWM_ConfigChannel>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM3_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 8001c2e:	f000 f897 	bl	8001d60 <Error_Handler>
	}

	HAL_TIM_MspPostInit(&htim3);
 8001c32:	4803      	ldr	r0, [pc, #12]	@ (8001c40 <MX_TIM3_Init+0xe4>)
 8001c34:	f000 f93e 	bl	8001eb4 <HAL_TIM_MspPostInit>
}
 8001c38:	bf00      	nop
 8001c3a:	3738      	adds	r7, #56	@ 0x38
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	2000011c 	.word	0x2000011c
 8001c44:	40000400 	.word	0x40000400

08001c48 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	@ 0x28
 8001c4c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b3c      	ldr	r3, [pc, #240]	@ (8001d54 <MX_GPIO_Init+0x10c>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	4a3b      	ldr	r2, [pc, #236]	@ (8001d54 <MX_GPIO_Init+0x10c>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6e:	4b39      	ldr	r3, [pc, #228]	@ (8001d54 <MX_GPIO_Init+0x10c>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b35      	ldr	r3, [pc, #212]	@ (8001d54 <MX_GPIO_Init+0x10c>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	4a34      	ldr	r2, [pc, #208]	@ (8001d54 <MX_GPIO_Init+0x10c>)
 8001c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8a:	4b32      	ldr	r3, [pc, #200]	@ (8001d54 <MX_GPIO_Init+0x10c>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001d54 <MX_GPIO_Init+0x10c>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d54 <MX_GPIO_Init+0x10c>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	4b2b      	ldr	r3, [pc, #172]	@ (8001d54 <MX_GPIO_Init+0x10c>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	4b27      	ldr	r3, [pc, #156]	@ (8001d54 <MX_GPIO_Init+0x10c>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	4a26      	ldr	r2, [pc, #152]	@ (8001d54 <MX_GPIO_Init+0x10c>)
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc2:	4b24      	ldr	r3, [pc, #144]	@ (8001d54 <MX_GPIO_Init+0x10c>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001cd4:	4820      	ldr	r0, [pc, #128]	@ (8001d58 <MX_GPIO_Init+0x110>)
 8001cd6:	f001 fbc7 	bl	8003468 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001cda:	2200      	movs	r2, #0
 8001cdc:	213f      	movs	r1, #63	@ 0x3f
 8001cde:	481f      	ldr	r0, [pc, #124]	@ (8001d5c <MX_GPIO_Init+0x114>)
 8001ce0:	f001 fbc2 	bl	8003468 <HAL_GPIO_WritePin>
			Forward_R_Pin | Forward_L_Pin | Backward_R_Pin | Backward_L_Pin
					| GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);

	/*Configure GPIO pin : led_Pin */
	GPIO_InitStruct.Pin = led_Pin;
 8001ce4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ce8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 0314 	add.w	r3, r7, #20
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4816      	ldr	r0, [pc, #88]	@ (8001d58 <MX_GPIO_Init+0x110>)
 8001cfe:	f001 fa2f 	bl	8003160 <HAL_GPIO_Init>

	/*Configure GPIO pins : Forward_R_Pin Forward_L_Pin Backward_R_Pin Backward_L_Pin
	 PA4 PA5 */
	GPIO_InitStruct.Pin = Forward_R_Pin | Forward_L_Pin | Backward_R_Pin
 8001d02:	233f      	movs	r3, #63	@ 0x3f
 8001d04:	617b      	str	r3, [r7, #20]
			| Backward_L_Pin | GPIO_PIN_4 | GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d06:	2301      	movs	r3, #1
 8001d08:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	4619      	mov	r1, r3
 8001d18:	4810      	ldr	r0, [pc, #64]	@ (8001d5c <MX_GPIO_Init+0x114>)
 8001d1a:	f001 fa21 	bl	8003160 <HAL_GPIO_Init>

	/*Configure GPIO pin : Button_Pin */
	GPIO_InitStruct.Pin = Button_Pin;
 8001d1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d24:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d28:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	4809      	ldr	r0, [pc, #36]	@ (8001d5c <MX_GPIO_Init+0x114>)
 8001d36:	f001 fa13 	bl	8003160 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2028      	movs	r0, #40	@ 0x28
 8001d40:	f000 feef 	bl	8002b22 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d44:	2028      	movs	r0, #40	@ 0x28
 8001d46:	f000 ff08 	bl	8002b5a <HAL_NVIC_EnableIRQ>
}
 8001d4a:	bf00      	nop
 8001d4c:	3728      	adds	r7, #40	@ 0x28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020000 	.word	0x40020000

08001d60 <Error_Handler>:

void Error_Handler(void) {
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d64:	b672      	cpsid	i
}
 8001d66:	bf00      	nop
	__disable_irq();
	while (1) {
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <Error_Handler+0x8>

08001d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	4b10      	ldr	r3, [pc, #64]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d82:	4b0d      	ldr	r3, [pc, #52]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	4a08      	ldr	r2, [pc, #32]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	@ 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a17      	ldr	r2, [pc, #92]	@ (8001e38 <HAL_ADC_MspInit+0x7c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d127      	bne.n	8001e2e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b16      	ldr	r3, [pc, #88]	@ (8001e3c <HAL_ADC_MspInit+0x80>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	4a15      	ldr	r2, [pc, #84]	@ (8001e3c <HAL_ADC_MspInit+0x80>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dee:	4b13      	ldr	r3, [pc, #76]	@ (8001e3c <HAL_ADC_MspInit+0x80>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <HAL_ADC_MspInit+0x80>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	4a0e      	ldr	r2, [pc, #56]	@ (8001e3c <HAL_ADC_MspInit+0x80>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <HAL_ADC_MspInit+0x80>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = mic_Pin;
 8001e16:	2302      	movs	r3, #2
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(mic_GPIO_Port, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	4805      	ldr	r0, [pc, #20]	@ (8001e40 <HAL_ADC_MspInit+0x84>)
 8001e2a:	f001 f999 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e2e:	bf00      	nop
 8001e30:	3728      	adds	r7, #40	@ 0x28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40012000 	.word	0x40012000
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020400 	.word	0x40020400

08001e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a15      	ldr	r2, [pc, #84]	@ (8001ea8 <HAL_TIM_Base_MspInit+0x64>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d10e      	bne.n	8001e74 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b14      	ldr	r3, [pc, #80]	@ (8001eac <HAL_TIM_Base_MspInit+0x68>)
 8001e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5e:	4a13      	ldr	r2, [pc, #76]	@ (8001eac <HAL_TIM_Base_MspInit+0x68>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e66:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <HAL_TIM_Base_MspInit+0x68>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e72:	e012      	b.n	8001e9a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb0 <HAL_TIM_Base_MspInit+0x6c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d10d      	bne.n	8001e9a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <HAL_TIM_Base_MspInit+0x68>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	4a09      	ldr	r2, [pc, #36]	@ (8001eac <HAL_TIM_Base_MspInit+0x68>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8e:	4b07      	ldr	r3, [pc, #28]	@ (8001eac <HAL_TIM_Base_MspInit+0x68>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	68bb      	ldr	r3, [r7, #8]
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40010000 	.word	0x40010000
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40000400 	.word	0x40000400

08001eb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	@ 0x28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a24      	ldr	r2, [pc, #144]	@ (8001f64 <HAL_TIM_MspPostInit+0xb0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d11f      	bne.n	8001f16 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	4b23      	ldr	r3, [pc, #140]	@ (8001f68 <HAL_TIM_MspPostInit+0xb4>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	4a22      	ldr	r2, [pc, #136]	@ (8001f68 <HAL_TIM_MspPostInit+0xb4>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee6:	4b20      	ldr	r3, [pc, #128]	@ (8001f68 <HAL_TIM_MspPostInit+0xb4>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = Motor_R_Pin;
 8001ef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f04:	2301      	movs	r3, #1
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Motor_R_GPIO_Port, &GPIO_InitStruct);
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4817      	ldr	r0, [pc, #92]	@ (8001f6c <HAL_TIM_MspPostInit+0xb8>)
 8001f10:	f001 f926 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f14:	e022      	b.n	8001f5c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a15      	ldr	r2, [pc, #84]	@ (8001f70 <HAL_TIM_MspPostInit+0xbc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d11d      	bne.n	8001f5c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	4b10      	ldr	r3, [pc, #64]	@ (8001f68 <HAL_TIM_MspPostInit+0xb4>)
 8001f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f28:	4a0f      	ldr	r2, [pc, #60]	@ (8001f68 <HAL_TIM_MspPostInit+0xb4>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f30:	4b0d      	ldr	r3, [pc, #52]	@ (8001f68 <HAL_TIM_MspPostInit+0xb4>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Motor_L_Pin;
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Motor_L_GPIO_Port, &GPIO_InitStruct);
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4619      	mov	r1, r3
 8001f56:	4805      	ldr	r0, [pc, #20]	@ (8001f6c <HAL_TIM_MspPostInit+0xb8>)
 8001f58:	f001 f902 	bl	8003160 <HAL_GPIO_Init>
}
 8001f5c:	bf00      	nop
 8001f5e:	3728      	adds	r7, #40	@ 0x28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40010000 	.word	0x40010000
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020000 	.word	0x40020000
 8001f70:	40000400 	.word	0x40000400

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <NMI_Handler+0x4>

08001f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <HardFault_Handler+0x4>

08001f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <MemManage_Handler+0x4>

08001f8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <BusFault_Handler+0x4>

08001f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <UsageFault_Handler+0x4>

08001f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fca:	f000 f899 	bl	8002100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8001fd6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001fda:	f001 fa5f 	bl	800349c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fe8:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <SystemInit+0x20>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fee:	4a05      	ldr	r2, [pc, #20]	@ (8002004 <SystemInit+0x20>)
 8001ff0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ff4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002008:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002040 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800200c:	f7ff ffea 	bl	8001fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002010:	480c      	ldr	r0, [pc, #48]	@ (8002044 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002012:	490d      	ldr	r1, [pc, #52]	@ (8002048 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002014:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002018:	e002      	b.n	8002020 <LoopCopyDataInit>

0800201a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800201c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201e:	3304      	adds	r3, #4

08002020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002024:	d3f9      	bcc.n	800201a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002026:	4a0a      	ldr	r2, [pc, #40]	@ (8002050 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002028:	4c0a      	ldr	r4, [pc, #40]	@ (8002054 <LoopFillZerobss+0x22>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800202c:	e001      	b.n	8002032 <LoopFillZerobss>

0800202e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002030:	3204      	adds	r2, #4

08002032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002034:	d3fb      	bcc.n	800202e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002036:	f002 fcf5 	bl	8004a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800203a:	f7ff f895 	bl	8001168 <main>
  bx  lr    
 800203e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002048:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800204c:	080059e8 	.word	0x080059e8
  ldr r2, =_sbss
 8002050:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002054:	20014b38 	.word	0x20014b38

08002058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002058:	e7fe      	b.n	8002058 <ADC_IRQHandler>
	...

0800205c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002060:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <HAL_Init+0x40>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0d      	ldr	r2, [pc, #52]	@ (800209c <HAL_Init+0x40>)
 8002066:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800206a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800206c:	4b0b      	ldr	r3, [pc, #44]	@ (800209c <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0a      	ldr	r2, [pc, #40]	@ (800209c <HAL_Init+0x40>)
 8002072:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002076:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002078:	4b08      	ldr	r3, [pc, #32]	@ (800209c <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a07      	ldr	r2, [pc, #28]	@ (800209c <HAL_Init+0x40>)
 800207e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002082:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002084:	2003      	movs	r0, #3
 8002086:	f000 fd41 	bl	8002b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800208a:	200f      	movs	r0, #15
 800208c:	f000 f808 	bl	80020a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002090:	f7ff fe6c 	bl	8001d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023c00 	.word	0x40023c00

080020a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020a8:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <HAL_InitTick+0x54>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b12      	ldr	r3, [pc, #72]	@ (80020f8 <HAL_InitTick+0x58>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fd59 	bl	8002b76 <HAL_SYSTICK_Config>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00e      	b.n	80020ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b0f      	cmp	r3, #15
 80020d2:	d80a      	bhi.n	80020ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d4:	2200      	movs	r2, #0
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	f000 fd21 	bl	8002b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020e0:	4a06      	ldr	r2, [pc, #24]	@ (80020fc <HAL_InitTick+0x5c>)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e000      	b.n	80020ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000000 	.word	0x20000000
 80020f8:	20000008 	.word	0x20000008
 80020fc:	20000004 	.word	0x20000004

08002100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002104:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_IncTick+0x20>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <HAL_IncTick+0x24>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4413      	add	r3, r2
 8002110:	4a04      	ldr	r2, [pc, #16]	@ (8002124 <HAL_IncTick+0x24>)
 8002112:	6013      	str	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000008 	.word	0x20000008
 8002124:	200149dc 	.word	0x200149dc

08002128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return uwTick;
 800212c:	4b03      	ldr	r3, [pc, #12]	@ (800213c <HAL_GetTick+0x14>)
 800212e:	681b      	ldr	r3, [r3, #0]
}
 8002130:	4618      	mov	r0, r3
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	200149dc 	.word	0x200149dc

08002140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002148:	f7ff ffee 	bl	8002128 <HAL_GetTick>
 800214c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d005      	beq.n	8002166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800215a:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <HAL_Delay+0x44>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4413      	add	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002166:	bf00      	nop
 8002168:	f7ff ffde 	bl	8002128 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	429a      	cmp	r2, r3
 8002176:	d8f7      	bhi.n	8002168 <HAL_Delay+0x28>
  {
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000008 	.word	0x20000008

08002188 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e033      	b.n	8002206 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d109      	bne.n	80021ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fe08 	bl	8001dbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d118      	bne.n	80021f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021ce:	f023 0302 	bic.w	r3, r3, #2
 80021d2:	f043 0202 	orr.w	r2, r3, #2
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 faca 	bl	8002774 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	f023 0303 	bic.w	r3, r3, #3
 80021ee:	f043 0201 	orr.w	r2, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80021f6:	e001      	b.n	80021fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002204:	7bfb      	ldrb	r3, [r7, #15]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_ADC_Start+0x1a>
 8002226:	2302      	movs	r3, #2
 8002228:	e097      	b.n	800235a <HAL_ADC_Start+0x14a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b01      	cmp	r3, #1
 800223e:	d018      	beq.n	8002272 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002250:	4b45      	ldr	r3, [pc, #276]	@ (8002368 <HAL_ADC_Start+0x158>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a45      	ldr	r2, [pc, #276]	@ (800236c <HAL_ADC_Start+0x15c>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0c9a      	lsrs	r2, r3, #18
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002264:	e002      	b.n	800226c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	3b01      	subs	r3, #1
 800226a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f9      	bne.n	8002266 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	d15f      	bne.n	8002340 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002284:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022be:	d106      	bne.n	80022ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c4:	f023 0206 	bic.w	r2, r3, #6
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	645a      	str	r2, [r3, #68]	@ 0x44
 80022cc:	e002      	b.n	80022d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022dc:	4b24      	ldr	r3, [pc, #144]	@ (8002370 <HAL_ADC_Start+0x160>)
 80022de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80022e8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10f      	bne.n	8002316 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d129      	bne.n	8002358 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	e020      	b.n	8002358 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a16      	ldr	r2, [pc, #88]	@ (8002374 <HAL_ADC_Start+0x164>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d11b      	bne.n	8002358 <HAL_ADC_Start+0x148>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d114      	bne.n	8002358 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800233c:	609a      	str	r2, [r3, #8]
 800233e:	e00b      	b.n	8002358 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	f043 0210 	orr.w	r2, r3, #16
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3714      	adds	r7, #20
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000000 	.word	0x20000000
 800236c:	431bde83 	.word	0x431bde83
 8002370:	40012300 	.word	0x40012300
 8002374:	40012000 	.word	0x40012000

08002378 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_ADC_Stop+0x16>
 800238a:	2302      	movs	r3, #2
 800238c:	e021      	b.n	80023d2 <HAL_ADC_Stop+0x5a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0201 	bic.w	r2, r2, #1
 80023a4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d109      	bne.n	80023c8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023fa:	d113      	bne.n	8002424 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800240a:	d10b      	bne.n	8002424 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002410:	f043 0220 	orr.w	r2, r3, #32
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e063      	b.n	80024ec <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002424:	f7ff fe80 	bl	8002128 <HAL_GetTick>
 8002428:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800242a:	e021      	b.n	8002470 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002432:	d01d      	beq.n	8002470 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d007      	beq.n	800244a <HAL_ADC_PollForConversion+0x6c>
 800243a:	f7ff fe75 	bl	8002128 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d212      	bcs.n	8002470 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b02      	cmp	r3, #2
 8002456:	d00b      	beq.n	8002470 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245c:	f043 0204 	orr.w	r2, r3, #4
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e03d      	b.n	80024ec <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b02      	cmp	r3, #2
 800247c:	d1d6      	bne.n	800242c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f06f 0212 	mvn.w	r2, #18
 8002486:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d123      	bne.n	80024ea <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d11f      	bne.n	80024ea <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d006      	beq.n	80024c6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d111      	bne.n	80024ea <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d105      	bne.n	80024ea <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	f043 0201 	orr.w	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_ADC_ConfigChannel+0x1c>
 8002528:	2302      	movs	r3, #2
 800252a:	e113      	b.n	8002754 <HAL_ADC_ConfigChannel+0x244>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b09      	cmp	r3, #9
 800253a:	d925      	bls.n	8002588 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68d9      	ldr	r1, [r3, #12]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	b29b      	uxth	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	4613      	mov	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4413      	add	r3, r2
 8002550:	3b1e      	subs	r3, #30
 8002552:	2207      	movs	r2, #7
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43da      	mvns	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	400a      	ands	r2, r1
 8002560:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68d9      	ldr	r1, [r3, #12]
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	b29b      	uxth	r3, r3
 8002572:	4618      	mov	r0, r3
 8002574:	4603      	mov	r3, r0
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4403      	add	r3, r0
 800257a:	3b1e      	subs	r3, #30
 800257c:	409a      	lsls	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	e022      	b.n	80025ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6919      	ldr	r1, [r3, #16]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	4613      	mov	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	2207      	movs	r2, #7
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43da      	mvns	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	400a      	ands	r2, r1
 80025aa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6919      	ldr	r1, [r3, #16]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4618      	mov	r0, r3
 80025be:	4603      	mov	r3, r0
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4403      	add	r3, r0
 80025c4:	409a      	lsls	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b06      	cmp	r3, #6
 80025d4:	d824      	bhi.n	8002620 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	3b05      	subs	r3, #5
 80025e8:	221f      	movs	r2, #31
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43da      	mvns	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	400a      	ands	r2, r1
 80025f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	4618      	mov	r0, r3
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	3b05      	subs	r3, #5
 8002612:	fa00 f203 	lsl.w	r2, r0, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	635a      	str	r2, [r3, #52]	@ 0x34
 800261e:	e04c      	b.n	80026ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b0c      	cmp	r3, #12
 8002626:	d824      	bhi.n	8002672 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	3b23      	subs	r3, #35	@ 0x23
 800263a:	221f      	movs	r2, #31
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43da      	mvns	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	400a      	ands	r2, r1
 8002648:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	4618      	mov	r0, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	3b23      	subs	r3, #35	@ 0x23
 8002664:	fa00 f203 	lsl.w	r2, r0, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002670:	e023      	b.n	80026ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	3b41      	subs	r3, #65	@ 0x41
 8002684:	221f      	movs	r2, #31
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43da      	mvns	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	400a      	ands	r2, r1
 8002692:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	b29b      	uxth	r3, r3
 80026a0:	4618      	mov	r0, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	3b41      	subs	r3, #65	@ 0x41
 80026ae:	fa00 f203 	lsl.w	r2, r0, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ba:	4b29      	ldr	r3, [pc, #164]	@ (8002760 <HAL_ADC_ConfigChannel+0x250>)
 80026bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a28      	ldr	r2, [pc, #160]	@ (8002764 <HAL_ADC_ConfigChannel+0x254>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d10f      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x1d8>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b12      	cmp	r3, #18
 80026ce:	d10b      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002764 <HAL_ADC_ConfigChannel+0x254>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d12b      	bne.n	800274a <HAL_ADC_ConfigChannel+0x23a>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002768 <HAL_ADC_ConfigChannel+0x258>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d003      	beq.n	8002704 <HAL_ADC_ConfigChannel+0x1f4>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b11      	cmp	r3, #17
 8002702:	d122      	bne.n	800274a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a11      	ldr	r2, [pc, #68]	@ (8002768 <HAL_ADC_ConfigChannel+0x258>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d111      	bne.n	800274a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002726:	4b11      	ldr	r3, [pc, #68]	@ (800276c <HAL_ADC_ConfigChannel+0x25c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a11      	ldr	r2, [pc, #68]	@ (8002770 <HAL_ADC_ConfigChannel+0x260>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	0c9a      	lsrs	r2, r3, #18
 8002732:	4613      	mov	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4413      	add	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800273c:	e002      	b.n	8002744 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	3b01      	subs	r3, #1
 8002742:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f9      	bne.n	800273e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	40012300 	.word	0x40012300
 8002764:	40012000 	.word	0x40012000
 8002768:	10000012 	.word	0x10000012
 800276c:	20000000 	.word	0x20000000
 8002770:	431bde83 	.word	0x431bde83

08002774 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800277c:	4b79      	ldr	r3, [pc, #484]	@ (8002964 <ADC_Init+0x1f0>)
 800277e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	431a      	orrs	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	021a      	lsls	r2, r3, #8
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80027cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6859      	ldr	r1, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6899      	ldr	r1, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002806:	4a58      	ldr	r2, [pc, #352]	@ (8002968 <ADC_Init+0x1f4>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d022      	beq.n	8002852 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800281a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6899      	ldr	r1, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800283c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6899      	ldr	r1, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	e00f      	b.n	8002872 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002860:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002870:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0202 	bic.w	r2, r2, #2
 8002880:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6899      	ldr	r1, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	7e1b      	ldrb	r3, [r3, #24]
 800288c:	005a      	lsls	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3020 	ldrb.w	r3, [r3, #32]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01b      	beq.n	80028d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028ae:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80028be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6859      	ldr	r1, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	3b01      	subs	r3, #1
 80028cc:	035a      	lsls	r2, r3, #13
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	e007      	b.n	80028e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028e6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80028f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	3b01      	subs	r3, #1
 8002904:	051a      	lsls	r2, r3, #20
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800291c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6899      	ldr	r1, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800292a:	025a      	lsls	r2, r3, #9
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002942:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6899      	ldr	r1, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	029a      	lsls	r2, r3, #10
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	609a      	str	r2, [r3, #8]
}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	40012300 	.word	0x40012300
 8002968:	0f000001 	.word	0x0f000001

0800296c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800297c:	4b0c      	ldr	r3, [pc, #48]	@ (80029b0 <__NVIC_SetPriorityGrouping+0x44>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002988:	4013      	ands	r3, r2
 800298a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002994:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800299c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800299e:	4a04      	ldr	r2, [pc, #16]	@ (80029b0 <__NVIC_SetPriorityGrouping+0x44>)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	60d3      	str	r3, [r2, #12]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b8:	4b04      	ldr	r3, [pc, #16]	@ (80029cc <__NVIC_GetPriorityGrouping+0x18>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	f003 0307 	and.w	r3, r3, #7
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	db0b      	blt.n	80029fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	f003 021f 	and.w	r2, r3, #31
 80029e8:	4907      	ldr	r1, [pc, #28]	@ (8002a08 <__NVIC_EnableIRQ+0x38>)
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	2001      	movs	r0, #1
 80029f2:	fa00 f202 	lsl.w	r2, r0, r2
 80029f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000e100 	.word	0xe000e100

08002a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	6039      	str	r1, [r7, #0]
 8002a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	db0a      	blt.n	8002a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	490c      	ldr	r1, [pc, #48]	@ (8002a58 <__NVIC_SetPriority+0x4c>)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	0112      	lsls	r2, r2, #4
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	440b      	add	r3, r1
 8002a30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a34:	e00a      	b.n	8002a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	4908      	ldr	r1, [pc, #32]	@ (8002a5c <__NVIC_SetPriority+0x50>)
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	3b04      	subs	r3, #4
 8002a44:	0112      	lsls	r2, r2, #4
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	440b      	add	r3, r1
 8002a4a:	761a      	strb	r2, [r3, #24]
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000e100 	.word	0xe000e100
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	@ 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f1c3 0307 	rsb	r3, r3, #7
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	bf28      	it	cs
 8002a7e:	2304      	movcs	r3, #4
 8002a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3304      	adds	r3, #4
 8002a86:	2b06      	cmp	r3, #6
 8002a88:	d902      	bls.n	8002a90 <NVIC_EncodePriority+0x30>
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3b03      	subs	r3, #3
 8002a8e:	e000      	b.n	8002a92 <NVIC_EncodePriority+0x32>
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	f04f 32ff 	mov.w	r2, #4294967295
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab2:	43d9      	mvns	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab8:	4313      	orrs	r3, r2
         );
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3724      	adds	r7, #36	@ 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ad8:	d301      	bcc.n	8002ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ada:	2301      	movs	r3, #1
 8002adc:	e00f      	b.n	8002afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ade:	4a0a      	ldr	r2, [pc, #40]	@ (8002b08 <SysTick_Config+0x40>)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ae6:	210f      	movs	r1, #15
 8002ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aec:	f7ff ff8e 	bl	8002a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002af0:	4b05      	ldr	r3, [pc, #20]	@ (8002b08 <SysTick_Config+0x40>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002af6:	4b04      	ldr	r3, [pc, #16]	@ (8002b08 <SysTick_Config+0x40>)
 8002af8:	2207      	movs	r2, #7
 8002afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	e000e010 	.word	0xe000e010

08002b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff ff29 	bl	800296c <__NVIC_SetPriorityGrouping>
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b086      	sub	sp, #24
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	4603      	mov	r3, r0
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b34:	f7ff ff3e 	bl	80029b4 <__NVIC_GetPriorityGrouping>
 8002b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	6978      	ldr	r0, [r7, #20]
 8002b40:	f7ff ff8e 	bl	8002a60 <NVIC_EncodePriority>
 8002b44:	4602      	mov	r2, r0
 8002b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff5d 	bl	8002a0c <__NVIC_SetPriority>
}
 8002b52:	bf00      	nop
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	4603      	mov	r3, r0
 8002b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff31 	bl	80029d0 <__NVIC_EnableIRQ>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff ffa2 	bl	8002ac8 <SysTick_Config>
 8002b84:	4603      	mov	r3, r0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002ba2:	4b23      	ldr	r3, [pc, #140]	@ (8002c30 <HAL_FLASH_Program+0xa0>)
 8002ba4:	7e1b      	ldrb	r3, [r3, #24]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_FLASH_Program+0x1e>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e03b      	b.n	8002c26 <HAL_FLASH_Program+0x96>
 8002bae:	4b20      	ldr	r3, [pc, #128]	@ (8002c30 <HAL_FLASH_Program+0xa0>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002bb4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002bb8:	f000 f870 	bl	8002c9c <FLASH_WaitForLastOperation>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d12b      	bne.n	8002c1e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d105      	bne.n	8002bd8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002bcc:	783b      	ldrb	r3, [r7, #0]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	68b8      	ldr	r0, [r7, #8]
 8002bd2:	f000 f91b 	bl	8002e0c <FLASH_Program_Byte>
 8002bd6:	e016      	b.n	8002c06 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d105      	bne.n	8002bea <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002bde:	883b      	ldrh	r3, [r7, #0]
 8002be0:	4619      	mov	r1, r3
 8002be2:	68b8      	ldr	r0, [r7, #8]
 8002be4:	f000 f8ee 	bl	8002dc4 <FLASH_Program_HalfWord>
 8002be8:	e00d      	b.n	8002c06 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d105      	bne.n	8002bfc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	68b8      	ldr	r0, [r7, #8]
 8002bf6:	f000 f8c3 	bl	8002d80 <FLASH_Program_Word>
 8002bfa:	e004      	b.n	8002c06 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c00:	68b8      	ldr	r0, [r7, #8]
 8002c02:	f000 f88b 	bl	8002d1c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c06:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002c0a:	f000 f847 	bl	8002c9c <FLASH_WaitForLastOperation>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002c12:	4b08      	ldr	r3, [pc, #32]	@ (8002c34 <HAL_FLASH_Program+0xa4>)
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	4a07      	ldr	r2, [pc, #28]	@ (8002c34 <HAL_FLASH_Program+0xa4>)
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002c1e:	4b04      	ldr	r3, [pc, #16]	@ (8002c30 <HAL_FLASH_Program+0xa0>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	200149e0 	.word	0x200149e0
 8002c34:	40023c00 	.word	0x40023c00

08002c38 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c42:	4b0b      	ldr	r3, [pc, #44]	@ (8002c70 <HAL_FLASH_Unlock+0x38>)
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	da0b      	bge.n	8002c62 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002c4a:	4b09      	ldr	r3, [pc, #36]	@ (8002c70 <HAL_FLASH_Unlock+0x38>)
 8002c4c:	4a09      	ldr	r2, [pc, #36]	@ (8002c74 <HAL_FLASH_Unlock+0x3c>)
 8002c4e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002c50:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <HAL_FLASH_Unlock+0x38>)
 8002c52:	4a09      	ldr	r2, [pc, #36]	@ (8002c78 <HAL_FLASH_Unlock+0x40>)
 8002c54:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c56:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <HAL_FLASH_Unlock+0x38>)
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	da01      	bge.n	8002c62 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002c62:	79fb      	ldrb	r3, [r7, #7]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	40023c00 	.word	0x40023c00
 8002c74:	45670123 	.word	0x45670123
 8002c78:	cdef89ab 	.word	0xcdef89ab

08002c7c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002c80:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <HAL_FLASH_Lock+0x1c>)
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	4a04      	ldr	r2, [pc, #16]	@ (8002c98 <HAL_FLASH_Lock+0x1c>)
 8002c86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c8a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	40023c00 	.word	0x40023c00

08002c9c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d14 <FLASH_WaitForLastOperation+0x78>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002cae:	f7ff fa3b 	bl	8002128 <HAL_GetTick>
 8002cb2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002cb4:	e010      	b.n	8002cd8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d00c      	beq.n	8002cd8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d007      	beq.n	8002cd4 <FLASH_WaitForLastOperation+0x38>
 8002cc4:	f7ff fa30 	bl	8002128 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d201      	bcs.n	8002cd8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e019      	b.n	8002d0c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d18 <FLASH_WaitForLastOperation+0x7c>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e8      	bne.n	8002cb6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d18 <FLASH_WaitForLastOperation+0x7c>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002cf0:	4b09      	ldr	r3, [pc, #36]	@ (8002d18 <FLASH_WaitForLastOperation+0x7c>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002cf6:	4b08      	ldr	r3, [pc, #32]	@ (8002d18 <FLASH_WaitForLastOperation+0x7c>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002d02:	f000 f8a5 	bl	8002e50 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
  
}  
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	200149e0 	.word	0x200149e0
 8002d18:	40023c00 	.word	0x40023c00

08002d1c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002d28:	4b14      	ldr	r3, [pc, #80]	@ (8002d7c <FLASH_Program_DoubleWord+0x60>)
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	4a13      	ldr	r2, [pc, #76]	@ (8002d7c <FLASH_Program_DoubleWord+0x60>)
 8002d2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002d34:	4b11      	ldr	r3, [pc, #68]	@ (8002d7c <FLASH_Program_DoubleWord+0x60>)
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	4a10      	ldr	r2, [pc, #64]	@ (8002d7c <FLASH_Program_DoubleWord+0x60>)
 8002d3a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002d3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002d40:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <FLASH_Program_DoubleWord+0x60>)
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	4a0d      	ldr	r2, [pc, #52]	@ (8002d7c <FLASH_Program_DoubleWord+0x60>)
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002d52:	f3bf 8f6f 	isb	sy
}
 8002d56:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002d58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	000a      	movs	r2, r1
 8002d66:	2300      	movs	r3, #0
 8002d68:	68f9      	ldr	r1, [r7, #12]
 8002d6a:	3104      	adds	r1, #4
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	600b      	str	r3, [r1, #0]
}
 8002d70:	bf00      	nop
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	40023c00 	.word	0x40023c00

08002d80 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc0 <FLASH_Program_Word+0x40>)
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc0 <FLASH_Program_Word+0x40>)
 8002d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d94:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002d96:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc0 <FLASH_Program_Word+0x40>)
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	4a09      	ldr	r2, [pc, #36]	@ (8002dc0 <FLASH_Program_Word+0x40>)
 8002d9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002da0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002da2:	4b07      	ldr	r3, [pc, #28]	@ (8002dc0 <FLASH_Program_Word+0x40>)
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	4a06      	ldr	r2, [pc, #24]	@ (8002dc0 <FLASH_Program_Word+0x40>)
 8002da8:	f043 0301 	orr.w	r3, r3, #1
 8002dac:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	601a      	str	r2, [r3, #0]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	40023c00 	.word	0x40023c00

08002dc4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002e08 <FLASH_Program_HalfWord+0x44>)
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8002e08 <FLASH_Program_HalfWord+0x44>)
 8002dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8002e08 <FLASH_Program_HalfWord+0x44>)
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	4a09      	ldr	r2, [pc, #36]	@ (8002e08 <FLASH_Program_HalfWord+0x44>)
 8002de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002de8:	4b07      	ldr	r3, [pc, #28]	@ (8002e08 <FLASH_Program_HalfWord+0x44>)
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	4a06      	ldr	r2, [pc, #24]	@ (8002e08 <FLASH_Program_HalfWord+0x44>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	887a      	ldrh	r2, [r7, #2]
 8002df8:	801a      	strh	r2, [r3, #0]
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40023c00 	.word	0x40023c00

08002e0c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002e18:	4b0c      	ldr	r3, [pc, #48]	@ (8002e4c <FLASH_Program_Byte+0x40>)
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8002e4c <FLASH_Program_Byte+0x40>)
 8002e1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002e24:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <FLASH_Program_Byte+0x40>)
 8002e26:	4a09      	ldr	r2, [pc, #36]	@ (8002e4c <FLASH_Program_Byte+0x40>)
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002e2c:	4b07      	ldr	r3, [pc, #28]	@ (8002e4c <FLASH_Program_Byte+0x40>)
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	4a06      	ldr	r2, [pc, #24]	@ (8002e4c <FLASH_Program_Byte+0x40>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	701a      	strb	r2, [r3, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40023c00 	.word	0x40023c00

08002e50 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002e54:	4b2f      	ldr	r3, [pc, #188]	@ (8002f14 <FLASH_SetErrorCode+0xc4>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002e60:	4b2d      	ldr	r3, [pc, #180]	@ (8002f18 <FLASH_SetErrorCode+0xc8>)
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f043 0310 	orr.w	r3, r3, #16
 8002e68:	4a2b      	ldr	r2, [pc, #172]	@ (8002f18 <FLASH_SetErrorCode+0xc8>)
 8002e6a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002e6c:	4b29      	ldr	r3, [pc, #164]	@ (8002f14 <FLASH_SetErrorCode+0xc4>)
 8002e6e:	2210      	movs	r2, #16
 8002e70:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002e72:	4b28      	ldr	r3, [pc, #160]	@ (8002f14 <FLASH_SetErrorCode+0xc4>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d008      	beq.n	8002e90 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002e7e:	4b26      	ldr	r3, [pc, #152]	@ (8002f18 <FLASH_SetErrorCode+0xc8>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f043 0308 	orr.w	r3, r3, #8
 8002e86:	4a24      	ldr	r2, [pc, #144]	@ (8002f18 <FLASH_SetErrorCode+0xc8>)
 8002e88:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002e8a:	4b22      	ldr	r3, [pc, #136]	@ (8002f14 <FLASH_SetErrorCode+0xc4>)
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002e90:	4b20      	ldr	r3, [pc, #128]	@ (8002f14 <FLASH_SetErrorCode+0xc4>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002f18 <FLASH_SetErrorCode+0xc8>)
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f043 0304 	orr.w	r3, r3, #4
 8002ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8002f18 <FLASH_SetErrorCode+0xc8>)
 8002ea6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f14 <FLASH_SetErrorCode+0xc4>)
 8002eaa:	2240      	movs	r2, #64	@ 0x40
 8002eac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002eae:	4b19      	ldr	r3, [pc, #100]	@ (8002f14 <FLASH_SetErrorCode+0xc4>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002eba:	4b17      	ldr	r3, [pc, #92]	@ (8002f18 <FLASH_SetErrorCode+0xc8>)
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	f043 0302 	orr.w	r3, r3, #2
 8002ec2:	4a15      	ldr	r2, [pc, #84]	@ (8002f18 <FLASH_SetErrorCode+0xc8>)
 8002ec4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002ec6:	4b13      	ldr	r3, [pc, #76]	@ (8002f14 <FLASH_SetErrorCode+0xc4>)
 8002ec8:	2280      	movs	r2, #128	@ 0x80
 8002eca:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002ecc:	4b11      	ldr	r3, [pc, #68]	@ (8002f14 <FLASH_SetErrorCode+0xc4>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d009      	beq.n	8002eec <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f18 <FLASH_SetErrorCode+0xc8>)
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8002f18 <FLASH_SetErrorCode+0xc8>)
 8002ee2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <FLASH_SetErrorCode+0xc4>)
 8002ee6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002eea:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002eec:	4b09      	ldr	r3, [pc, #36]	@ (8002f14 <FLASH_SetErrorCode+0xc4>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002ef8:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <FLASH_SetErrorCode+0xc8>)
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	f043 0320 	orr.w	r3, r3, #32
 8002f00:	4a05      	ldr	r2, [pc, #20]	@ (8002f18 <FLASH_SetErrorCode+0xc8>)
 8002f02:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002f04:	4b03      	ldr	r3, [pc, #12]	@ (8002f14 <FLASH_SetErrorCode+0xc4>)
 8002f06:	2202      	movs	r2, #2
 8002f08:	60da      	str	r2, [r3, #12]
  }
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	40023c00 	.word	0x40023c00
 8002f18:	200149e0 	.word	0x200149e0

08002f1c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002f2e:	4b31      	ldr	r3, [pc, #196]	@ (8002ff4 <HAL_FLASHEx_Erase+0xd8>)
 8002f30:	7e1b      	ldrb	r3, [r3, #24]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <HAL_FLASHEx_Erase+0x1e>
 8002f36:	2302      	movs	r3, #2
 8002f38:	e058      	b.n	8002fec <HAL_FLASHEx_Erase+0xd0>
 8002f3a:	4b2e      	ldr	r3, [pc, #184]	@ (8002ff4 <HAL_FLASHEx_Erase+0xd8>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f40:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002f44:	f7ff feaa 	bl	8002c9c <FLASH_WaitForLastOperation>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d148      	bne.n	8002fe4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f04f 32ff 	mov.w	r2, #4294967295
 8002f58:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d115      	bne.n	8002f8e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f000 f844 	bl	8002ffc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002f74:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002f78:	f7ff fe90 	bl	8002c9c <FLASH_WaitForLastOperation>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002f80:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff8 <HAL_FLASHEx_Erase+0xdc>)
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff8 <HAL_FLASHEx_Erase+0xdc>)
 8002f86:	f023 0304 	bic.w	r3, r3, #4
 8002f8a:	6113      	str	r3, [r2, #16]
 8002f8c:	e028      	b.n	8002fe0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	e01c      	b.n	8002fd0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	68b8      	ldr	r0, [r7, #8]
 8002fa0:	f000 f850 	bl	8003044 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002fa4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002fa8:	f7ff fe78 	bl	8002c9c <FLASH_WaitForLastOperation>
 8002fac:	4603      	mov	r3, r0
 8002fae:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002fb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ff8 <HAL_FLASHEx_Erase+0xdc>)
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	4a10      	ldr	r2, [pc, #64]	@ (8002ff8 <HAL_FLASHEx_Erase+0xdc>)
 8002fb6:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002fba:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	601a      	str	r2, [r3, #0]
          break;
 8002fc8:	e00a      	b.n	8002fe0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68da      	ldr	r2, [r3, #12]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4413      	add	r3, r2
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d3da      	bcc.n	8002f96 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002fe0:	f000 f878 	bl	80030d4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002fe4:	4b03      	ldr	r3, [pc, #12]	@ (8002ff4 <HAL_FLASHEx_Erase+0xd8>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	761a      	strb	r2, [r3, #24]

  return status;
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	200149e0 	.word	0x200149e0
 8002ff8:	40023c00 	.word	0x40023c00

08002ffc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	6039      	str	r1, [r7, #0]
 8003006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003008:	4b0d      	ldr	r3, [pc, #52]	@ (8003040 <FLASH_MassErase+0x44>)
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	4a0c      	ldr	r2, [pc, #48]	@ (8003040 <FLASH_MassErase+0x44>)
 800300e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003012:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8003014:	4b0a      	ldr	r3, [pc, #40]	@ (8003040 <FLASH_MassErase+0x44>)
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	4a09      	ldr	r2, [pc, #36]	@ (8003040 <FLASH_MassErase+0x44>)
 800301a:	f043 0304 	orr.w	r3, r3, #4
 800301e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003020:	4b07      	ldr	r3, [pc, #28]	@ (8003040 <FLASH_MassErase+0x44>)
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	4313      	orrs	r3, r2
 800302a:	4a05      	ldr	r2, [pc, #20]	@ (8003040 <FLASH_MassErase+0x44>)
 800302c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003030:	6113      	str	r3, [r2, #16]
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40023c00 	.word	0x40023c00

08003044 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d102      	bne.n	8003060 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	e010      	b.n	8003082 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d103      	bne.n	800306e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003066:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e009      	b.n	8003082 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d103      	bne.n	800307c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003074:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	e002      	b.n	8003082 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800307c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003080:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003082:	4b13      	ldr	r3, [pc, #76]	@ (80030d0 <FLASH_Erase_Sector+0x8c>)
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	4a12      	ldr	r2, [pc, #72]	@ (80030d0 <FLASH_Erase_Sector+0x8c>)
 8003088:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800308c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800308e:	4b10      	ldr	r3, [pc, #64]	@ (80030d0 <FLASH_Erase_Sector+0x8c>)
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	490f      	ldr	r1, [pc, #60]	@ (80030d0 <FLASH_Erase_Sector+0x8c>)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800309a:	4b0d      	ldr	r3, [pc, #52]	@ (80030d0 <FLASH_Erase_Sector+0x8c>)
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	4a0c      	ldr	r2, [pc, #48]	@ (80030d0 <FLASH_Erase_Sector+0x8c>)
 80030a0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80030a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80030a6:	4b0a      	ldr	r3, [pc, #40]	@ (80030d0 <FLASH_Erase_Sector+0x8c>)
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4313      	orrs	r3, r2
 80030b0:	4a07      	ldr	r2, [pc, #28]	@ (80030d0 <FLASH_Erase_Sector+0x8c>)
 80030b2:	f043 0302 	orr.w	r3, r3, #2
 80030b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80030b8:	4b05      	ldr	r3, [pc, #20]	@ (80030d0 <FLASH_Erase_Sector+0x8c>)
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	4a04      	ldr	r2, [pc, #16]	@ (80030d0 <FLASH_Erase_Sector+0x8c>)
 80030be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030c2:	6113      	str	r3, [r2, #16]
}
 80030c4:	bf00      	nop
 80030c6:	3714      	adds	r7, #20
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	40023c00 	.word	0x40023c00

080030d4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80030d8:	4b20      	ldr	r3, [pc, #128]	@ (800315c <FLASH_FlushCaches+0x88>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d017      	beq.n	8003114 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80030e4:	4b1d      	ldr	r3, [pc, #116]	@ (800315c <FLASH_FlushCaches+0x88>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1c      	ldr	r2, [pc, #112]	@ (800315c <FLASH_FlushCaches+0x88>)
 80030ea:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030ee:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80030f0:	4b1a      	ldr	r3, [pc, #104]	@ (800315c <FLASH_FlushCaches+0x88>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a19      	ldr	r2, [pc, #100]	@ (800315c <FLASH_FlushCaches+0x88>)
 80030f6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b17      	ldr	r3, [pc, #92]	@ (800315c <FLASH_FlushCaches+0x88>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a16      	ldr	r2, [pc, #88]	@ (800315c <FLASH_FlushCaches+0x88>)
 8003102:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003106:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003108:	4b14      	ldr	r3, [pc, #80]	@ (800315c <FLASH_FlushCaches+0x88>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a13      	ldr	r2, [pc, #76]	@ (800315c <FLASH_FlushCaches+0x88>)
 800310e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003112:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003114:	4b11      	ldr	r3, [pc, #68]	@ (800315c <FLASH_FlushCaches+0x88>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d017      	beq.n	8003150 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003120:	4b0e      	ldr	r3, [pc, #56]	@ (800315c <FLASH_FlushCaches+0x88>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0d      	ldr	r2, [pc, #52]	@ (800315c <FLASH_FlushCaches+0x88>)
 8003126:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800312a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800312c:	4b0b      	ldr	r3, [pc, #44]	@ (800315c <FLASH_FlushCaches+0x88>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0a      	ldr	r2, [pc, #40]	@ (800315c <FLASH_FlushCaches+0x88>)
 8003132:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	4b08      	ldr	r3, [pc, #32]	@ (800315c <FLASH_FlushCaches+0x88>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a07      	ldr	r2, [pc, #28]	@ (800315c <FLASH_FlushCaches+0x88>)
 800313e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003142:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003144:	4b05      	ldr	r3, [pc, #20]	@ (800315c <FLASH_FlushCaches+0x88>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a04      	ldr	r2, [pc, #16]	@ (800315c <FLASH_FlushCaches+0x88>)
 800314a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800314e:	6013      	str	r3, [r2, #0]
  }
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40023c00 	.word	0x40023c00

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	@ 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	e159      	b.n	8003430 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800317c:	2201      	movs	r2, #1
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4013      	ands	r3, r2
 800318e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	429a      	cmp	r2, r3
 8003196:	f040 8148 	bne.w	800342a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d005      	beq.n	80031b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d130      	bne.n	8003214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	2203      	movs	r2, #3
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4013      	ands	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e8:	2201      	movs	r2, #1
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	4013      	ands	r3, r2
 80031f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 0201 	and.w	r2, r3, #1
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	2b03      	cmp	r3, #3
 800321e:	d017      	beq.n	8003250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	2203      	movs	r2, #3
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d123      	bne.n	80032a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	08da      	lsrs	r2, r3, #3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3208      	adds	r2, #8
 8003264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	220f      	movs	r2, #15
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	08da      	lsrs	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3208      	adds	r2, #8
 800329e:	69b9      	ldr	r1, [r7, #24]
 80032a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	2203      	movs	r2, #3
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f003 0203 	and.w	r2, r3, #3
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 80a2 	beq.w	800342a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	4b57      	ldr	r3, [pc, #348]	@ (8003448 <HAL_GPIO_Init+0x2e8>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	4a56      	ldr	r2, [pc, #344]	@ (8003448 <HAL_GPIO_Init+0x2e8>)
 80032f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80032f6:	4b54      	ldr	r3, [pc, #336]	@ (8003448 <HAL_GPIO_Init+0x2e8>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003302:	4a52      	ldr	r2, [pc, #328]	@ (800344c <HAL_GPIO_Init+0x2ec>)
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	3302      	adds	r3, #2
 800330a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	220f      	movs	r2, #15
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a49      	ldr	r2, [pc, #292]	@ (8003450 <HAL_GPIO_Init+0x2f0>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d019      	beq.n	8003362 <HAL_GPIO_Init+0x202>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a48      	ldr	r2, [pc, #288]	@ (8003454 <HAL_GPIO_Init+0x2f4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <HAL_GPIO_Init+0x1fe>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a47      	ldr	r2, [pc, #284]	@ (8003458 <HAL_GPIO_Init+0x2f8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00d      	beq.n	800335a <HAL_GPIO_Init+0x1fa>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a46      	ldr	r2, [pc, #280]	@ (800345c <HAL_GPIO_Init+0x2fc>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d007      	beq.n	8003356 <HAL_GPIO_Init+0x1f6>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a45      	ldr	r2, [pc, #276]	@ (8003460 <HAL_GPIO_Init+0x300>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d101      	bne.n	8003352 <HAL_GPIO_Init+0x1f2>
 800334e:	2304      	movs	r3, #4
 8003350:	e008      	b.n	8003364 <HAL_GPIO_Init+0x204>
 8003352:	2307      	movs	r3, #7
 8003354:	e006      	b.n	8003364 <HAL_GPIO_Init+0x204>
 8003356:	2303      	movs	r3, #3
 8003358:	e004      	b.n	8003364 <HAL_GPIO_Init+0x204>
 800335a:	2302      	movs	r3, #2
 800335c:	e002      	b.n	8003364 <HAL_GPIO_Init+0x204>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_GPIO_Init+0x204>
 8003362:	2300      	movs	r3, #0
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	f002 0203 	and.w	r2, r2, #3
 800336a:	0092      	lsls	r2, r2, #2
 800336c:	4093      	lsls	r3, r2
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003374:	4935      	ldr	r1, [pc, #212]	@ (800344c <HAL_GPIO_Init+0x2ec>)
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	089b      	lsrs	r3, r3, #2
 800337a:	3302      	adds	r3, #2
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003382:	4b38      	ldr	r3, [pc, #224]	@ (8003464 <HAL_GPIO_Init+0x304>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003464 <HAL_GPIO_Init+0x304>)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003464 <HAL_GPIO_Init+0x304>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033d0:	4a24      	ldr	r2, [pc, #144]	@ (8003464 <HAL_GPIO_Init+0x304>)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033d6:	4b23      	ldr	r3, [pc, #140]	@ (8003464 <HAL_GPIO_Init+0x304>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003464 <HAL_GPIO_Init+0x304>)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003400:	4b18      	ldr	r3, [pc, #96]	@ (8003464 <HAL_GPIO_Init+0x304>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003424:	4a0f      	ldr	r2, [pc, #60]	@ (8003464 <HAL_GPIO_Init+0x304>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3301      	adds	r3, #1
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	2b0f      	cmp	r3, #15
 8003434:	f67f aea2 	bls.w	800317c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3724      	adds	r7, #36	@ 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40023800 	.word	0x40023800
 800344c:	40013800 	.word	0x40013800
 8003450:	40020000 	.word	0x40020000
 8003454:	40020400 	.word	0x40020400
 8003458:	40020800 	.word	0x40020800
 800345c:	40020c00 	.word	0x40020c00
 8003460:	40021000 	.word	0x40021000
 8003464:	40013c00 	.word	0x40013c00

08003468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	807b      	strh	r3, [r7, #2]
 8003474:	4613      	mov	r3, r2
 8003476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003478:	787b      	ldrb	r3, [r7, #1]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800347e:	887a      	ldrh	r2, [r7, #2]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003484:	e003      	b.n	800348e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003486:	887b      	ldrh	r3, [r7, #2]
 8003488:	041a      	lsls	r2, r3, #16
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	619a      	str	r2, [r3, #24]
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034a6:	4b08      	ldr	r3, [pc, #32]	@ (80034c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d006      	beq.n	80034c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034b2:	4a05      	ldr	r2, [pc, #20]	@ (80034c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe f9d6 	bl	800186c <HAL_GPIO_EXTI_Callback>
  }
}
 80034c0:	bf00      	nop
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40013c00 	.word	0x40013c00

080034cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e267      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d075      	beq.n	80035d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034ea:	4b88      	ldr	r3, [pc, #544]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d00c      	beq.n	8003510 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f6:	4b85      	ldr	r3, [pc, #532]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d112      	bne.n	8003528 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003502:	4b82      	ldr	r3, [pc, #520]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800350a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800350e:	d10b      	bne.n	8003528 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003510:	4b7e      	ldr	r3, [pc, #504]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d05b      	beq.n	80035d4 <HAL_RCC_OscConfig+0x108>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d157      	bne.n	80035d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e242      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003530:	d106      	bne.n	8003540 <HAL_RCC_OscConfig+0x74>
 8003532:	4b76      	ldr	r3, [pc, #472]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a75      	ldr	r2, [pc, #468]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	e01d      	b.n	800357c <HAL_RCC_OscConfig+0xb0>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0x98>
 800354a:	4b70      	ldr	r3, [pc, #448]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a6f      	ldr	r2, [pc, #444]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	4b6d      	ldr	r3, [pc, #436]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a6c      	ldr	r2, [pc, #432]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e00b      	b.n	800357c <HAL_RCC_OscConfig+0xb0>
 8003564:	4b69      	ldr	r3, [pc, #420]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a68      	ldr	r2, [pc, #416]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 800356a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	4b66      	ldr	r3, [pc, #408]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a65      	ldr	r2, [pc, #404]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003576:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800357a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d013      	beq.n	80035ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fe fdd0 	bl	8002128 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800358c:	f7fe fdcc 	bl	8002128 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b64      	cmp	r3, #100	@ 0x64
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e207      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359e:	4b5b      	ldr	r3, [pc, #364]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0xc0>
 80035aa:	e014      	b.n	80035d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7fe fdbc 	bl	8002128 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b4:	f7fe fdb8 	bl	8002128 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	@ 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e1f3      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c6:	4b51      	ldr	r3, [pc, #324]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0xe8>
 80035d2:	e000      	b.n	80035d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d063      	beq.n	80036aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035e2:	4b4a      	ldr	r3, [pc, #296]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00b      	beq.n	8003606 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ee:	4b47      	ldr	r3, [pc, #284]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d11c      	bne.n	8003634 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035fa:	4b44      	ldr	r3, [pc, #272]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d116      	bne.n	8003634 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003606:	4b41      	ldr	r3, [pc, #260]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <HAL_RCC_OscConfig+0x152>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d001      	beq.n	800361e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e1c7      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361e:	4b3b      	ldr	r3, [pc, #236]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4937      	ldr	r1, [pc, #220]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003632:	e03a      	b.n	80036aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d020      	beq.n	800367e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800363c:	4b34      	ldr	r3, [pc, #208]	@ (8003710 <HAL_RCC_OscConfig+0x244>)
 800363e:	2201      	movs	r2, #1
 8003640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003642:	f7fe fd71 	bl	8002128 <HAL_GetTick>
 8003646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800364a:	f7fe fd6d 	bl	8002128 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e1a8      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365c:	4b2b      	ldr	r3, [pc, #172]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	2b00      	cmp	r3, #0
 8003666:	d0f0      	beq.n	800364a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003668:	4b28      	ldr	r3, [pc, #160]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	4925      	ldr	r1, [pc, #148]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 8003678:	4313      	orrs	r3, r2
 800367a:	600b      	str	r3, [r1, #0]
 800367c:	e015      	b.n	80036aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800367e:	4b24      	ldr	r3, [pc, #144]	@ (8003710 <HAL_RCC_OscConfig+0x244>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fe fd50 	bl	8002128 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800368c:	f7fe fd4c 	bl	8002128 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e187      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369e:	4b1b      	ldr	r3, [pc, #108]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0308 	and.w	r3, r3, #8
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d036      	beq.n	8003724 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d016      	beq.n	80036ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036be:	4b15      	ldr	r3, [pc, #84]	@ (8003714 <HAL_RCC_OscConfig+0x248>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c4:	f7fe fd30 	bl	8002128 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036cc:	f7fe fd2c 	bl	8002128 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e167      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036de:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <HAL_RCC_OscConfig+0x240>)
 80036e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0f0      	beq.n	80036cc <HAL_RCC_OscConfig+0x200>
 80036ea:	e01b      	b.n	8003724 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ec:	4b09      	ldr	r3, [pc, #36]	@ (8003714 <HAL_RCC_OscConfig+0x248>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f2:	f7fe fd19 	bl	8002128 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f8:	e00e      	b.n	8003718 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036fa:	f7fe fd15 	bl	8002128 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d907      	bls.n	8003718 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e150      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
 800370c:	40023800 	.word	0x40023800
 8003710:	42470000 	.word	0x42470000
 8003714:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003718:	4b88      	ldr	r3, [pc, #544]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 800371a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1ea      	bne.n	80036fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8097 	beq.w	8003860 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003732:	2300      	movs	r3, #0
 8003734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003736:	4b81      	ldr	r3, [pc, #516]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10f      	bne.n	8003762 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	60bb      	str	r3, [r7, #8]
 8003746:	4b7d      	ldr	r3, [pc, #500]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	4a7c      	ldr	r2, [pc, #496]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 800374c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003750:	6413      	str	r3, [r2, #64]	@ 0x40
 8003752:	4b7a      	ldr	r3, [pc, #488]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375e:	2301      	movs	r3, #1
 8003760:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003762:	4b77      	ldr	r3, [pc, #476]	@ (8003940 <HAL_RCC_OscConfig+0x474>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376a:	2b00      	cmp	r3, #0
 800376c:	d118      	bne.n	80037a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800376e:	4b74      	ldr	r3, [pc, #464]	@ (8003940 <HAL_RCC_OscConfig+0x474>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a73      	ldr	r2, [pc, #460]	@ (8003940 <HAL_RCC_OscConfig+0x474>)
 8003774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377a:	f7fe fcd5 	bl	8002128 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003782:	f7fe fcd1 	bl	8002128 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e10c      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003794:	4b6a      	ldr	r3, [pc, #424]	@ (8003940 <HAL_RCC_OscConfig+0x474>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d106      	bne.n	80037b6 <HAL_RCC_OscConfig+0x2ea>
 80037a8:	4b64      	ldr	r3, [pc, #400]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ac:	4a63      	ldr	r2, [pc, #396]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b4:	e01c      	b.n	80037f0 <HAL_RCC_OscConfig+0x324>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	2b05      	cmp	r3, #5
 80037bc:	d10c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x30c>
 80037be:	4b5f      	ldr	r3, [pc, #380]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c2:	4a5e      	ldr	r2, [pc, #376]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037c4:	f043 0304 	orr.w	r3, r3, #4
 80037c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ca:	4b5c      	ldr	r3, [pc, #368]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ce:	4a5b      	ldr	r2, [pc, #364]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d6:	e00b      	b.n	80037f0 <HAL_RCC_OscConfig+0x324>
 80037d8:	4b58      	ldr	r3, [pc, #352]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037dc:	4a57      	ldr	r2, [pc, #348]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e4:	4b55      	ldr	r3, [pc, #340]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e8:	4a54      	ldr	r2, [pc, #336]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80037ea:	f023 0304 	bic.w	r3, r3, #4
 80037ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d015      	beq.n	8003824 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f8:	f7fe fc96 	bl	8002128 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fe:	e00a      	b.n	8003816 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003800:	f7fe fc92 	bl	8002128 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e0cb      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003816:	4b49      	ldr	r3, [pc, #292]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0ee      	beq.n	8003800 <HAL_RCC_OscConfig+0x334>
 8003822:	e014      	b.n	800384e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003824:	f7fe fc80 	bl	8002128 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382a:	e00a      	b.n	8003842 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800382c:	f7fe fc7c 	bl	8002128 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e0b5      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003842:	4b3e      	ldr	r3, [pc, #248]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1ee      	bne.n	800382c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800384e:	7dfb      	ldrb	r3, [r7, #23]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d105      	bne.n	8003860 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003854:	4b39      	ldr	r3, [pc, #228]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	4a38      	ldr	r2, [pc, #224]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 800385a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800385e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80a1 	beq.w	80039ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800386a:	4b34      	ldr	r3, [pc, #208]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	2b08      	cmp	r3, #8
 8003874:	d05c      	beq.n	8003930 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d141      	bne.n	8003902 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387e:	4b31      	ldr	r3, [pc, #196]	@ (8003944 <HAL_RCC_OscConfig+0x478>)
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003884:	f7fe fc50 	bl	8002128 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800388c:	f7fe fc4c 	bl	8002128 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e087      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800389e:	4b27      	ldr	r3, [pc, #156]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69da      	ldr	r2, [r3, #28]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b8:	019b      	lsls	r3, r3, #6
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c0:	085b      	lsrs	r3, r3, #1
 80038c2:	3b01      	subs	r3, #1
 80038c4:	041b      	lsls	r3, r3, #16
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038cc:	061b      	lsls	r3, r3, #24
 80038ce:	491b      	ldr	r1, [pc, #108]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003944 <HAL_RCC_OscConfig+0x478>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038da:	f7fe fc25 	bl	8002128 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e2:	f7fe fc21 	bl	8002128 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e05c      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f4:	4b11      	ldr	r3, [pc, #68]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x416>
 8003900:	e054      	b.n	80039ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003902:	4b10      	ldr	r3, [pc, #64]	@ (8003944 <HAL_RCC_OscConfig+0x478>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003908:	f7fe fc0e 	bl	8002128 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003910:	f7fe fc0a 	bl	8002128 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e045      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <HAL_RCC_OscConfig+0x470>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0x444>
 800392e:	e03d      	b.n	80039ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d107      	bne.n	8003948 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e038      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
 800393c:	40023800 	.word	0x40023800
 8003940:	40007000 	.word	0x40007000
 8003944:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003948:	4b1b      	ldr	r3, [pc, #108]	@ (80039b8 <HAL_RCC_OscConfig+0x4ec>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d028      	beq.n	80039a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003960:	429a      	cmp	r2, r3
 8003962:	d121      	bne.n	80039a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d11a      	bne.n	80039a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003978:	4013      	ands	r3, r2
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800397e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003980:	4293      	cmp	r3, r2
 8003982:	d111      	bne.n	80039a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398e:	085b      	lsrs	r3, r3, #1
 8003990:	3b01      	subs	r3, #1
 8003992:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003994:	429a      	cmp	r2, r3
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40023800 	.word	0x40023800

080039bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0cc      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039d0:	4b68      	ldr	r3, [pc, #416]	@ (8003b74 <HAL_RCC_ClockConfig+0x1b8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d90c      	bls.n	80039f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039de:	4b65      	ldr	r3, [pc, #404]	@ (8003b74 <HAL_RCC_ClockConfig+0x1b8>)
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b63      	ldr	r3, [pc, #396]	@ (8003b74 <HAL_RCC_ClockConfig+0x1b8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0b8      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d020      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a10:	4b59      	ldr	r3, [pc, #356]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	4a58      	ldr	r2, [pc, #352]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a28:	4b53      	ldr	r3, [pc, #332]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a52      	ldr	r2, [pc, #328]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a34:	4b50      	ldr	r3, [pc, #320]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	494d      	ldr	r1, [pc, #308]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d044      	beq.n	8003adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d107      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	4b47      	ldr	r3, [pc, #284]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d119      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e07f      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d003      	beq.n	8003a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d107      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e06f      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e067      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a9a:	4b37      	ldr	r3, [pc, #220]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f023 0203 	bic.w	r2, r3, #3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4934      	ldr	r1, [pc, #208]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aac:	f7fe fb3c 	bl	8002128 <HAL_GetTick>
 8003ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab2:	e00a      	b.n	8003aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab4:	f7fe fb38 	bl	8002128 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e04f      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	4b2b      	ldr	r3, [pc, #172]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 020c 	and.w	r2, r3, #12
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d1eb      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003adc:	4b25      	ldr	r3, [pc, #148]	@ (8003b74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d20c      	bcs.n	8003b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aea:	4b22      	ldr	r3, [pc, #136]	@ (8003b74 <HAL_RCC_ClockConfig+0x1b8>)
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b20      	ldr	r3, [pc, #128]	@ (8003b74 <HAL_RCC_ClockConfig+0x1b8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e032      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b10:	4b19      	ldr	r3, [pc, #100]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4916      	ldr	r1, [pc, #88]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b2e:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	490e      	ldr	r1, [pc, #56]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b42:	f000 f821 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8003b46:	4602      	mov	r2, r0
 8003b48:	4b0b      	ldr	r3, [pc, #44]	@ (8003b78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	490a      	ldr	r1, [pc, #40]	@ (8003b7c <HAL_RCC_ClockConfig+0x1c0>)
 8003b54:	5ccb      	ldrb	r3, [r1, r3]
 8003b56:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5a:	4a09      	ldr	r2, [pc, #36]	@ (8003b80 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b5e:	4b09      	ldr	r3, [pc, #36]	@ (8003b84 <HAL_RCC_ClockConfig+0x1c8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fa9c 	bl	80020a0 <HAL_InitTick>

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40023c00 	.word	0x40023c00
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	08005998 	.word	0x08005998
 8003b80:	20000000 	.word	0x20000000
 8003b84:	20000004 	.word	0x20000004

08003b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b8c:	b090      	sub	sp, #64	@ 0x40
 8003b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b94:	2300      	movs	r3, #0
 8003b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b98:	2300      	movs	r3, #0
 8003b9a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ba0:	4b59      	ldr	r3, [pc, #356]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d00d      	beq.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	f200 80a1 	bhi.w	8003cf4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x34>
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d003      	beq.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bba:	e09b      	b.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bbc:	4b53      	ldr	r3, [pc, #332]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0x184>)
 8003bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003bc0:	e09b      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bc2:	4b53      	ldr	r3, [pc, #332]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bc6:	e098      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bc8:	4b4f      	ldr	r3, [pc, #316]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bd0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bd2:	4b4d      	ldr	r3, [pc, #308]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d028      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bde:	4b4a      	ldr	r3, [pc, #296]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	099b      	lsrs	r3, r3, #6
 8003be4:	2200      	movs	r2, #0
 8003be6:	623b      	str	r3, [r7, #32]
 8003be8:	627a      	str	r2, [r7, #36]	@ 0x24
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	4b47      	ldr	r3, [pc, #284]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bf4:	fb03 f201 	mul.w	r2, r3, r1
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	fb00 f303 	mul.w	r3, r0, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	4a43      	ldr	r2, [pc, #268]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c02:	fba0 1202 	umull	r1, r2, r0, r2
 8003c06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c08:	460a      	mov	r2, r1
 8003c0a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003c0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c0e:	4413      	add	r3, r2
 8003c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c14:	2200      	movs	r2, #0
 8003c16:	61bb      	str	r3, [r7, #24]
 8003c18:	61fa      	str	r2, [r7, #28]
 8003c1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c22:	f7fc ff95 	bl	8000b50 <__aeabi_uldivmod>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c2e:	e053      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c30:	4b35      	ldr	r3, [pc, #212]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	099b      	lsrs	r3, r3, #6
 8003c36:	2200      	movs	r2, #0
 8003c38:	613b      	str	r3, [r7, #16]
 8003c3a:	617a      	str	r2, [r7, #20]
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c42:	f04f 0b00 	mov.w	fp, #0
 8003c46:	4652      	mov	r2, sl
 8003c48:	465b      	mov	r3, fp
 8003c4a:	f04f 0000 	mov.w	r0, #0
 8003c4e:	f04f 0100 	mov.w	r1, #0
 8003c52:	0159      	lsls	r1, r3, #5
 8003c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c58:	0150      	lsls	r0, r2, #5
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	ebb2 080a 	subs.w	r8, r2, sl
 8003c62:	eb63 090b 	sbc.w	r9, r3, fp
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c7a:	ebb2 0408 	subs.w	r4, r2, r8
 8003c7e:	eb63 0509 	sbc.w	r5, r3, r9
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	00eb      	lsls	r3, r5, #3
 8003c8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c90:	00e2      	lsls	r2, r4, #3
 8003c92:	4614      	mov	r4, r2
 8003c94:	461d      	mov	r5, r3
 8003c96:	eb14 030a 	adds.w	r3, r4, sl
 8003c9a:	603b      	str	r3, [r7, #0]
 8003c9c:	eb45 030b 	adc.w	r3, r5, fp
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cae:	4629      	mov	r1, r5
 8003cb0:	028b      	lsls	r3, r1, #10
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cb8:	4621      	mov	r1, r4
 8003cba:	028a      	lsls	r2, r1, #10
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	60fa      	str	r2, [r7, #12]
 8003cc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ccc:	f7fc ff40 	bl	8000b50 <__aeabi_uldivmod>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	0c1b      	lsrs	r3, r3, #16
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003ce8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cf2:	e002      	b.n	8003cfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cf4:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0x184>)
 8003cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3740      	adds	r7, #64	@ 0x40
 8003d00:	46bd      	mov	sp, r7
 8003d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d06:	bf00      	nop
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	00f42400 	.word	0x00f42400
 8003d10:	017d7840 	.word	0x017d7840

08003d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e041      	b.n	8003daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fe f882 	bl	8001e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	4619      	mov	r1, r3
 8003d52:	4610      	mov	r0, r2
 8003d54:	f000 fac0 	bl	80042d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b082      	sub	sp, #8
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e041      	b.n	8003e48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d106      	bne.n	8003dde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f839 	bl	8003e50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2202      	movs	r2, #2
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3304      	adds	r3, #4
 8003dee:	4619      	mov	r1, r3
 8003df0:	4610      	mov	r0, r2
 8003df2:	f000 fa71 	bl	80042d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d109      	bne.n	8003e88 <HAL_TIM_PWM_Start+0x24>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e022      	b.n	8003ece <HAL_TIM_PWM_Start+0x6a>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d109      	bne.n	8003ea2 <HAL_TIM_PWM_Start+0x3e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	bf14      	ite	ne
 8003e9a:	2301      	movne	r3, #1
 8003e9c:	2300      	moveq	r3, #0
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	e015      	b.n	8003ece <HAL_TIM_PWM_Start+0x6a>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d109      	bne.n	8003ebc <HAL_TIM_PWM_Start+0x58>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	bf14      	ite	ne
 8003eb4:	2301      	movne	r3, #1
 8003eb6:	2300      	moveq	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	e008      	b.n	8003ece <HAL_TIM_PWM_Start+0x6a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	bf14      	ite	ne
 8003ec8:	2301      	movne	r3, #1
 8003eca:	2300      	moveq	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e068      	b.n	8003fa8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d104      	bne.n	8003ee6 <HAL_TIM_PWM_Start+0x82>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ee4:	e013      	b.n	8003f0e <HAL_TIM_PWM_Start+0xaa>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d104      	bne.n	8003ef6 <HAL_TIM_PWM_Start+0x92>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ef4:	e00b      	b.n	8003f0e <HAL_TIM_PWM_Start+0xaa>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d104      	bne.n	8003f06 <HAL_TIM_PWM_Start+0xa2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f04:	e003      	b.n	8003f0e <HAL_TIM_PWM_Start+0xaa>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2201      	movs	r2, #1
 8003f14:	6839      	ldr	r1, [r7, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 fc90 	bl	800483c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a23      	ldr	r2, [pc, #140]	@ (8003fb0 <HAL_TIM_PWM_Start+0x14c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d107      	bne.n	8003f36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8003fb0 <HAL_TIM_PWM_Start+0x14c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d018      	beq.n	8003f72 <HAL_TIM_PWM_Start+0x10e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f48:	d013      	beq.n	8003f72 <HAL_TIM_PWM_Start+0x10e>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a19      	ldr	r2, [pc, #100]	@ (8003fb4 <HAL_TIM_PWM_Start+0x150>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d00e      	beq.n	8003f72 <HAL_TIM_PWM_Start+0x10e>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a17      	ldr	r2, [pc, #92]	@ (8003fb8 <HAL_TIM_PWM_Start+0x154>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d009      	beq.n	8003f72 <HAL_TIM_PWM_Start+0x10e>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a16      	ldr	r2, [pc, #88]	@ (8003fbc <HAL_TIM_PWM_Start+0x158>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d004      	beq.n	8003f72 <HAL_TIM_PWM_Start+0x10e>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a14      	ldr	r2, [pc, #80]	@ (8003fc0 <HAL_TIM_PWM_Start+0x15c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d111      	bne.n	8003f96 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b06      	cmp	r3, #6
 8003f82:	d010      	beq.n	8003fa6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f94:	e007      	b.n	8003fa6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f042 0201 	orr.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40014000 	.word	0x40014000

08003fc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e0ae      	b.n	8004140 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b0c      	cmp	r3, #12
 8003fee:	f200 809f 	bhi.w	8004130 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff8:	0800402d 	.word	0x0800402d
 8003ffc:	08004131 	.word	0x08004131
 8004000:	08004131 	.word	0x08004131
 8004004:	08004131 	.word	0x08004131
 8004008:	0800406d 	.word	0x0800406d
 800400c:	08004131 	.word	0x08004131
 8004010:	08004131 	.word	0x08004131
 8004014:	08004131 	.word	0x08004131
 8004018:	080040af 	.word	0x080040af
 800401c:	08004131 	.word	0x08004131
 8004020:	08004131 	.word	0x08004131
 8004024:	08004131 	.word	0x08004131
 8004028:	080040ef 	.word	0x080040ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68b9      	ldr	r1, [r7, #8]
 8004032:	4618      	mov	r0, r3
 8004034:	f000 f9dc 	bl	80043f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699a      	ldr	r2, [r3, #24]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0208 	orr.w	r2, r2, #8
 8004046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 0204 	bic.w	r2, r2, #4
 8004056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6999      	ldr	r1, [r3, #24]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	619a      	str	r2, [r3, #24]
      break;
 800406a:	e064      	b.n	8004136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fa22 	bl	80044bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699a      	ldr	r2, [r3, #24]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6999      	ldr	r1, [r3, #24]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	021a      	lsls	r2, r3, #8
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	430a      	orrs	r2, r1
 80040aa:	619a      	str	r2, [r3, #24]
      break;
 80040ac:	e043      	b.n	8004136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fa6d 	bl	8004594 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69da      	ldr	r2, [r3, #28]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0208 	orr.w	r2, r2, #8
 80040c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69da      	ldr	r2, [r3, #28]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0204 	bic.w	r2, r2, #4
 80040d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69d9      	ldr	r1, [r3, #28]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	691a      	ldr	r2, [r3, #16]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	61da      	str	r2, [r3, #28]
      break;
 80040ec:	e023      	b.n	8004136 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fab7 	bl	8004668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69da      	ldr	r2, [r3, #28]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69da      	ldr	r2, [r3, #28]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69d9      	ldr	r1, [r3, #28]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	021a      	lsls	r2, r3, #8
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	61da      	str	r2, [r3, #28]
      break;
 800412e:	e002      	b.n	8004136 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	75fb      	strb	r3, [r7, #23]
      break;
 8004134:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800413e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_TIM_ConfigClockSource+0x1c>
 8004160:	2302      	movs	r3, #2
 8004162:	e0b4      	b.n	80042ce <HAL_TIM_ConfigClockSource+0x186>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004182:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800418a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800419c:	d03e      	beq.n	800421c <HAL_TIM_ConfigClockSource+0xd4>
 800419e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041a2:	f200 8087 	bhi.w	80042b4 <HAL_TIM_ConfigClockSource+0x16c>
 80041a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041aa:	f000 8086 	beq.w	80042ba <HAL_TIM_ConfigClockSource+0x172>
 80041ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041b2:	d87f      	bhi.n	80042b4 <HAL_TIM_ConfigClockSource+0x16c>
 80041b4:	2b70      	cmp	r3, #112	@ 0x70
 80041b6:	d01a      	beq.n	80041ee <HAL_TIM_ConfigClockSource+0xa6>
 80041b8:	2b70      	cmp	r3, #112	@ 0x70
 80041ba:	d87b      	bhi.n	80042b4 <HAL_TIM_ConfigClockSource+0x16c>
 80041bc:	2b60      	cmp	r3, #96	@ 0x60
 80041be:	d050      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0x11a>
 80041c0:	2b60      	cmp	r3, #96	@ 0x60
 80041c2:	d877      	bhi.n	80042b4 <HAL_TIM_ConfigClockSource+0x16c>
 80041c4:	2b50      	cmp	r3, #80	@ 0x50
 80041c6:	d03c      	beq.n	8004242 <HAL_TIM_ConfigClockSource+0xfa>
 80041c8:	2b50      	cmp	r3, #80	@ 0x50
 80041ca:	d873      	bhi.n	80042b4 <HAL_TIM_ConfigClockSource+0x16c>
 80041cc:	2b40      	cmp	r3, #64	@ 0x40
 80041ce:	d058      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0x13a>
 80041d0:	2b40      	cmp	r3, #64	@ 0x40
 80041d2:	d86f      	bhi.n	80042b4 <HAL_TIM_ConfigClockSource+0x16c>
 80041d4:	2b30      	cmp	r3, #48	@ 0x30
 80041d6:	d064      	beq.n	80042a2 <HAL_TIM_ConfigClockSource+0x15a>
 80041d8:	2b30      	cmp	r3, #48	@ 0x30
 80041da:	d86b      	bhi.n	80042b4 <HAL_TIM_ConfigClockSource+0x16c>
 80041dc:	2b20      	cmp	r3, #32
 80041de:	d060      	beq.n	80042a2 <HAL_TIM_ConfigClockSource+0x15a>
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d867      	bhi.n	80042b4 <HAL_TIM_ConfigClockSource+0x16c>
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d05c      	beq.n	80042a2 <HAL_TIM_ConfigClockSource+0x15a>
 80041e8:	2b10      	cmp	r3, #16
 80041ea:	d05a      	beq.n	80042a2 <HAL_TIM_ConfigClockSource+0x15a>
 80041ec:	e062      	b.n	80042b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041fe:	f000 fafd 	bl	80047fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004210:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	609a      	str	r2, [r3, #8]
      break;
 800421a:	e04f      	b.n	80042bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800422c:	f000 fae6 	bl	80047fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800423e:	609a      	str	r2, [r3, #8]
      break;
 8004240:	e03c      	b.n	80042bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800424e:	461a      	mov	r2, r3
 8004250:	f000 fa5a 	bl	8004708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2150      	movs	r1, #80	@ 0x50
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fab3 	bl	80047c6 <TIM_ITRx_SetConfig>
      break;
 8004260:	e02c      	b.n	80042bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800426e:	461a      	mov	r2, r3
 8004270:	f000 fa79 	bl	8004766 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2160      	movs	r1, #96	@ 0x60
 800427a:	4618      	mov	r0, r3
 800427c:	f000 faa3 	bl	80047c6 <TIM_ITRx_SetConfig>
      break;
 8004280:	e01c      	b.n	80042bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800428e:	461a      	mov	r2, r3
 8004290:	f000 fa3a 	bl	8004708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2140      	movs	r1, #64	@ 0x40
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fa93 	bl	80047c6 <TIM_ITRx_SetConfig>
      break;
 80042a0:	e00c      	b.n	80042bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4619      	mov	r1, r3
 80042ac:	4610      	mov	r0, r2
 80042ae:	f000 fa8a 	bl	80047c6 <TIM_ITRx_SetConfig>
      break;
 80042b2:	e003      	b.n	80042bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
      break;
 80042b8:	e000      	b.n	80042bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a3a      	ldr	r2, [pc, #232]	@ (80043d4 <TIM_Base_SetConfig+0xfc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00f      	beq.n	8004310 <TIM_Base_SetConfig+0x38>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f6:	d00b      	beq.n	8004310 <TIM_Base_SetConfig+0x38>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a37      	ldr	r2, [pc, #220]	@ (80043d8 <TIM_Base_SetConfig+0x100>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d007      	beq.n	8004310 <TIM_Base_SetConfig+0x38>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a36      	ldr	r2, [pc, #216]	@ (80043dc <TIM_Base_SetConfig+0x104>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d003      	beq.n	8004310 <TIM_Base_SetConfig+0x38>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a35      	ldr	r2, [pc, #212]	@ (80043e0 <TIM_Base_SetConfig+0x108>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d108      	bne.n	8004322 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a2b      	ldr	r2, [pc, #172]	@ (80043d4 <TIM_Base_SetConfig+0xfc>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d01b      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004330:	d017      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a28      	ldr	r2, [pc, #160]	@ (80043d8 <TIM_Base_SetConfig+0x100>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d013      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a27      	ldr	r2, [pc, #156]	@ (80043dc <TIM_Base_SetConfig+0x104>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d00f      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a26      	ldr	r2, [pc, #152]	@ (80043e0 <TIM_Base_SetConfig+0x108>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00b      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a25      	ldr	r2, [pc, #148]	@ (80043e4 <TIM_Base_SetConfig+0x10c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d007      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a24      	ldr	r2, [pc, #144]	@ (80043e8 <TIM_Base_SetConfig+0x110>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d003      	beq.n	8004362 <TIM_Base_SetConfig+0x8a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a23      	ldr	r2, [pc, #140]	@ (80043ec <TIM_Base_SetConfig+0x114>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d108      	bne.n	8004374 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004368:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a0e      	ldr	r2, [pc, #56]	@ (80043d4 <TIM_Base_SetConfig+0xfc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d103      	bne.n	80043a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	691a      	ldr	r2, [r3, #16]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d105      	bne.n	80043c6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f023 0201 	bic.w	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	611a      	str	r2, [r3, #16]
  }
}
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40010000 	.word	0x40010000
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40000c00 	.word	0x40000c00
 80043e4:	40014000 	.word	0x40014000
 80043e8:	40014400 	.word	0x40014400
 80043ec:	40014800 	.word	0x40014800

080043f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f023 0201 	bic.w	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800441e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0303 	bic.w	r3, r3, #3
 8004426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f023 0302 	bic.w	r3, r3, #2
 8004438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a1c      	ldr	r2, [pc, #112]	@ (80044b8 <TIM_OC1_SetConfig+0xc8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d10c      	bne.n	8004466 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f023 0308 	bic.w	r3, r3, #8
 8004452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f023 0304 	bic.w	r3, r3, #4
 8004464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a13      	ldr	r2, [pc, #76]	@ (80044b8 <TIM_OC1_SetConfig+0xc8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d111      	bne.n	8004492 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800447c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	621a      	str	r2, [r3, #32]
}
 80044ac:	bf00      	nop
 80044ae:	371c      	adds	r7, #28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40010000 	.word	0x40010000

080044bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	f023 0210 	bic.w	r2, r3, #16
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	021b      	lsls	r3, r3, #8
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f023 0320 	bic.w	r3, r3, #32
 8004506:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a1e      	ldr	r2, [pc, #120]	@ (8004590 <TIM_OC2_SetConfig+0xd4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d10d      	bne.n	8004538 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	4313      	orrs	r3, r2
 800452e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004536:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a15      	ldr	r2, [pc, #84]	@ (8004590 <TIM_OC2_SetConfig+0xd4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d113      	bne.n	8004568 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004546:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800454e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	621a      	str	r2, [r3, #32]
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40010000 	.word	0x40010000

08004594 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0303 	bic.w	r3, r3, #3
 80045ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	021b      	lsls	r3, r3, #8
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004664 <TIM_OC3_SetConfig+0xd0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10d      	bne.n	800460e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	021b      	lsls	r3, r3, #8
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800460c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a14      	ldr	r2, [pc, #80]	@ (8004664 <TIM_OC3_SetConfig+0xd0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d113      	bne.n	800463e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800461c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	621a      	str	r2, [r3, #32]
}
 8004658:	bf00      	nop
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	40010000 	.word	0x40010000

08004668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800469e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	021b      	lsls	r3, r3, #8
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	031b      	lsls	r3, r3, #12
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a10      	ldr	r2, [pc, #64]	@ (8004704 <TIM_OC4_SetConfig+0x9c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d109      	bne.n	80046dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	019b      	lsls	r3, r3, #6
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685a      	ldr	r2, [r3, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	621a      	str	r2, [r3, #32]
}
 80046f6:	bf00      	nop
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40010000 	.word	0x40010000

08004708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f023 0201 	bic.w	r2, r3, #1
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f023 030a 	bic.w	r3, r3, #10
 8004744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	621a      	str	r2, [r3, #32]
}
 800475a:	bf00      	nop
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004766:	b480      	push	{r7}
 8004768:	b087      	sub	sp, #28
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	f023 0210 	bic.w	r2, r3, #16
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004790:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	031b      	lsls	r3, r3, #12
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	621a      	str	r2, [r3, #32]
}
 80047ba:	bf00      	nop
 80047bc:	371c      	adds	r7, #28
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f043 0307 	orr.w	r3, r3, #7
 80047e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	609a      	str	r2, [r3, #8]
}
 80047f0:	bf00      	nop
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
 8004808:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004816:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	021a      	lsls	r2, r3, #8
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	431a      	orrs	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4313      	orrs	r3, r2
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	609a      	str	r2, [r3, #8]
}
 8004830:	bf00      	nop
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	f003 031f 	and.w	r3, r3, #31
 800484e:	2201      	movs	r2, #1
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1a      	ldr	r2, [r3, #32]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	43db      	mvns	r3, r3
 800485e:	401a      	ands	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6a1a      	ldr	r2, [r3, #32]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f003 031f 	and.w	r3, r3, #31
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	fa01 f303 	lsl.w	r3, r1, r3
 8004874:	431a      	orrs	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	621a      	str	r2, [r3, #32]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
	...

08004888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800489c:	2302      	movs	r3, #2
 800489e:	e050      	b.n	8004942 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a1c      	ldr	r2, [pc, #112]	@ (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d018      	beq.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048ec:	d013      	beq.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a18      	ldr	r2, [pc, #96]	@ (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00e      	beq.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a16      	ldr	r2, [pc, #88]	@ (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d009      	beq.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a15      	ldr	r2, [pc, #84]	@ (800495c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d004      	beq.n	8004916 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a13      	ldr	r2, [pc, #76]	@ (8004960 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d10c      	bne.n	8004930 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800491c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	4313      	orrs	r3, r2
 8004926:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40010000 	.word	0x40010000
 8004954:	40000400 	.word	0x40000400
 8004958:	40000800 	.word	0x40000800
 800495c:	40000c00 	.word	0x40000c00
 8004960:	40014000 	.word	0x40014000

08004964 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800497c:	2302      	movs	r3, #2
 800497e:	e03d      	b.n	80049fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	4313      	orrs	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <memset>:
 8004a08:	4402      	add	r2, r0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d100      	bne.n	8004a12 <memset+0xa>
 8004a10:	4770      	bx	lr
 8004a12:	f803 1b01 	strb.w	r1, [r3], #1
 8004a16:	e7f9      	b.n	8004a0c <memset+0x4>

08004a18 <__errno>:
 8004a18:	4b01      	ldr	r3, [pc, #4]	@ (8004a20 <__errno+0x8>)
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	2000000c 	.word	0x2000000c

08004a24 <__libc_init_array>:
 8004a24:	b570      	push	{r4, r5, r6, lr}
 8004a26:	4d0d      	ldr	r5, [pc, #52]	@ (8004a5c <__libc_init_array+0x38>)
 8004a28:	4c0d      	ldr	r4, [pc, #52]	@ (8004a60 <__libc_init_array+0x3c>)
 8004a2a:	1b64      	subs	r4, r4, r5
 8004a2c:	10a4      	asrs	r4, r4, #2
 8004a2e:	2600      	movs	r6, #0
 8004a30:	42a6      	cmp	r6, r4
 8004a32:	d109      	bne.n	8004a48 <__libc_init_array+0x24>
 8004a34:	4d0b      	ldr	r5, [pc, #44]	@ (8004a64 <__libc_init_array+0x40>)
 8004a36:	4c0c      	ldr	r4, [pc, #48]	@ (8004a68 <__libc_init_array+0x44>)
 8004a38:	f000 ffa2 	bl	8005980 <_init>
 8004a3c:	1b64      	subs	r4, r4, r5
 8004a3e:	10a4      	asrs	r4, r4, #2
 8004a40:	2600      	movs	r6, #0
 8004a42:	42a6      	cmp	r6, r4
 8004a44:	d105      	bne.n	8004a52 <__libc_init_array+0x2e>
 8004a46:	bd70      	pop	{r4, r5, r6, pc}
 8004a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4c:	4798      	blx	r3
 8004a4e:	3601      	adds	r6, #1
 8004a50:	e7ee      	b.n	8004a30 <__libc_init_array+0xc>
 8004a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a56:	4798      	blx	r3
 8004a58:	3601      	adds	r6, #1
 8004a5a:	e7f2      	b.n	8004a42 <__libc_init_array+0x1e>
 8004a5c:	080059e0 	.word	0x080059e0
 8004a60:	080059e0 	.word	0x080059e0
 8004a64:	080059e0 	.word	0x080059e0
 8004a68:	080059e4 	.word	0x080059e4

08004a6c <pow>:
 8004a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6e:	ed2d 8b02 	vpush	{d8}
 8004a72:	eeb0 8a40 	vmov.f32	s16, s0
 8004a76:	eef0 8a60 	vmov.f32	s17, s1
 8004a7a:	ec55 4b11 	vmov	r4, r5, d1
 8004a7e:	f000 f977 	bl	8004d70 <__ieee754_pow>
 8004a82:	4622      	mov	r2, r4
 8004a84:	462b      	mov	r3, r5
 8004a86:	4620      	mov	r0, r4
 8004a88:	4629      	mov	r1, r5
 8004a8a:	ec57 6b10 	vmov	r6, r7, d0
 8004a8e:	f7fb fff9 	bl	8000a84 <__aeabi_dcmpun>
 8004a92:	2800      	cmp	r0, #0
 8004a94:	d13b      	bne.n	8004b0e <pow+0xa2>
 8004a96:	ec51 0b18 	vmov	r0, r1, d8
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f7fb ffbf 	bl	8000a20 <__aeabi_dcmpeq>
 8004aa2:	b1b8      	cbz	r0, 8004ad4 <pow+0x68>
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	4629      	mov	r1, r5
 8004aac:	f7fb ffb8 	bl	8000a20 <__aeabi_dcmpeq>
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d146      	bne.n	8004b42 <pow+0xd6>
 8004ab4:	ec45 4b10 	vmov	d0, r4, r5
 8004ab8:	f000 f874 	bl	8004ba4 <finite>
 8004abc:	b338      	cbz	r0, 8004b0e <pow+0xa2>
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	4629      	mov	r1, r5
 8004ac6:	f7fb ffb5 	bl	8000a34 <__aeabi_dcmplt>
 8004aca:	b300      	cbz	r0, 8004b0e <pow+0xa2>
 8004acc:	f7ff ffa4 	bl	8004a18 <__errno>
 8004ad0:	2322      	movs	r3, #34	@ 0x22
 8004ad2:	e01b      	b.n	8004b0c <pow+0xa0>
 8004ad4:	ec47 6b10 	vmov	d0, r6, r7
 8004ad8:	f000 f864 	bl	8004ba4 <finite>
 8004adc:	b9e0      	cbnz	r0, 8004b18 <pow+0xac>
 8004ade:	eeb0 0a48 	vmov.f32	s0, s16
 8004ae2:	eef0 0a68 	vmov.f32	s1, s17
 8004ae6:	f000 f85d 	bl	8004ba4 <finite>
 8004aea:	b1a8      	cbz	r0, 8004b18 <pow+0xac>
 8004aec:	ec45 4b10 	vmov	d0, r4, r5
 8004af0:	f000 f858 	bl	8004ba4 <finite>
 8004af4:	b180      	cbz	r0, 8004b18 <pow+0xac>
 8004af6:	4632      	mov	r2, r6
 8004af8:	463b      	mov	r3, r7
 8004afa:	4630      	mov	r0, r6
 8004afc:	4639      	mov	r1, r7
 8004afe:	f7fb ffc1 	bl	8000a84 <__aeabi_dcmpun>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d0e2      	beq.n	8004acc <pow+0x60>
 8004b06:	f7ff ff87 	bl	8004a18 <__errno>
 8004b0a:	2321      	movs	r3, #33	@ 0x21
 8004b0c:	6003      	str	r3, [r0, #0]
 8004b0e:	ecbd 8b02 	vpop	{d8}
 8004b12:	ec47 6b10 	vmov	d0, r6, r7
 8004b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	4639      	mov	r1, r7
 8004b20:	f7fb ff7e 	bl	8000a20 <__aeabi_dcmpeq>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	d0f2      	beq.n	8004b0e <pow+0xa2>
 8004b28:	eeb0 0a48 	vmov.f32	s0, s16
 8004b2c:	eef0 0a68 	vmov.f32	s1, s17
 8004b30:	f000 f838 	bl	8004ba4 <finite>
 8004b34:	2800      	cmp	r0, #0
 8004b36:	d0ea      	beq.n	8004b0e <pow+0xa2>
 8004b38:	ec45 4b10 	vmov	d0, r4, r5
 8004b3c:	f000 f832 	bl	8004ba4 <finite>
 8004b40:	e7c3      	b.n	8004aca <pow+0x5e>
 8004b42:	4f01      	ldr	r7, [pc, #4]	@ (8004b48 <pow+0xdc>)
 8004b44:	2600      	movs	r6, #0
 8004b46:	e7e2      	b.n	8004b0e <pow+0xa2>
 8004b48:	3ff00000 	.word	0x3ff00000

08004b4c <sqrt>:
 8004b4c:	b538      	push	{r3, r4, r5, lr}
 8004b4e:	ed2d 8b02 	vpush	{d8}
 8004b52:	ec55 4b10 	vmov	r4, r5, d0
 8004b56:	f000 f831 	bl	8004bbc <__ieee754_sqrt>
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	462b      	mov	r3, r5
 8004b5e:	4620      	mov	r0, r4
 8004b60:	4629      	mov	r1, r5
 8004b62:	eeb0 8a40 	vmov.f32	s16, s0
 8004b66:	eef0 8a60 	vmov.f32	s17, s1
 8004b6a:	f7fb ff8b 	bl	8000a84 <__aeabi_dcmpun>
 8004b6e:	b990      	cbnz	r0, 8004b96 <sqrt+0x4a>
 8004b70:	2200      	movs	r2, #0
 8004b72:	2300      	movs	r3, #0
 8004b74:	4620      	mov	r0, r4
 8004b76:	4629      	mov	r1, r5
 8004b78:	f7fb ff5c 	bl	8000a34 <__aeabi_dcmplt>
 8004b7c:	b158      	cbz	r0, 8004b96 <sqrt+0x4a>
 8004b7e:	f7ff ff4b 	bl	8004a18 <__errno>
 8004b82:	2321      	movs	r3, #33	@ 0x21
 8004b84:	6003      	str	r3, [r0, #0]
 8004b86:	2200      	movs	r2, #0
 8004b88:	2300      	movs	r3, #0
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	f7fb fe09 	bl	80007a4 <__aeabi_ddiv>
 8004b92:	ec41 0b18 	vmov	d8, r0, r1
 8004b96:	eeb0 0a48 	vmov.f32	s0, s16
 8004b9a:	eef0 0a68 	vmov.f32	s1, s17
 8004b9e:	ecbd 8b02 	vpop	{d8}
 8004ba2:	bd38      	pop	{r3, r4, r5, pc}

08004ba4 <finite>:
 8004ba4:	b082      	sub	sp, #8
 8004ba6:	ed8d 0b00 	vstr	d0, [sp]
 8004baa:	9801      	ldr	r0, [sp, #4]
 8004bac:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8004bb0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8004bb4:	0fc0      	lsrs	r0, r0, #31
 8004bb6:	b002      	add	sp, #8
 8004bb8:	4770      	bx	lr
	...

08004bbc <__ieee754_sqrt>:
 8004bbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bc0:	4a68      	ldr	r2, [pc, #416]	@ (8004d64 <__ieee754_sqrt+0x1a8>)
 8004bc2:	ec55 4b10 	vmov	r4, r5, d0
 8004bc6:	43aa      	bics	r2, r5
 8004bc8:	462b      	mov	r3, r5
 8004bca:	4621      	mov	r1, r4
 8004bcc:	d110      	bne.n	8004bf0 <__ieee754_sqrt+0x34>
 8004bce:	4622      	mov	r2, r4
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	f7fb fcbc 	bl	8000550 <__aeabi_dmul>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4620      	mov	r0, r4
 8004bde:	4629      	mov	r1, r5
 8004be0:	f7fb fb00 	bl	80001e4 <__adddf3>
 8004be4:	4604      	mov	r4, r0
 8004be6:	460d      	mov	r5, r1
 8004be8:	ec45 4b10 	vmov	d0, r4, r5
 8004bec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf0:	2d00      	cmp	r5, #0
 8004bf2:	dc0e      	bgt.n	8004c12 <__ieee754_sqrt+0x56>
 8004bf4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004bf8:	4322      	orrs	r2, r4
 8004bfa:	d0f5      	beq.n	8004be8 <__ieee754_sqrt+0x2c>
 8004bfc:	b19d      	cbz	r5, 8004c26 <__ieee754_sqrt+0x6a>
 8004bfe:	4622      	mov	r2, r4
 8004c00:	4620      	mov	r0, r4
 8004c02:	4629      	mov	r1, r5
 8004c04:	f7fb faec 	bl	80001e0 <__aeabi_dsub>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	f7fb fdca 	bl	80007a4 <__aeabi_ddiv>
 8004c10:	e7e8      	b.n	8004be4 <__ieee754_sqrt+0x28>
 8004c12:	152a      	asrs	r2, r5, #20
 8004c14:	d115      	bne.n	8004c42 <__ieee754_sqrt+0x86>
 8004c16:	2000      	movs	r0, #0
 8004c18:	e009      	b.n	8004c2e <__ieee754_sqrt+0x72>
 8004c1a:	0acb      	lsrs	r3, r1, #11
 8004c1c:	3a15      	subs	r2, #21
 8004c1e:	0549      	lsls	r1, r1, #21
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0fa      	beq.n	8004c1a <__ieee754_sqrt+0x5e>
 8004c24:	e7f7      	b.n	8004c16 <__ieee754_sqrt+0x5a>
 8004c26:	462a      	mov	r2, r5
 8004c28:	e7fa      	b.n	8004c20 <__ieee754_sqrt+0x64>
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	02dc      	lsls	r4, r3, #11
 8004c30:	d5fb      	bpl.n	8004c2a <__ieee754_sqrt+0x6e>
 8004c32:	1e44      	subs	r4, r0, #1
 8004c34:	1b12      	subs	r2, r2, r4
 8004c36:	f1c0 0420 	rsb	r4, r0, #32
 8004c3a:	fa21 f404 	lsr.w	r4, r1, r4
 8004c3e:	4323      	orrs	r3, r4
 8004c40:	4081      	lsls	r1, r0
 8004c42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c46:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8004c4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c4e:	07d2      	lsls	r2, r2, #31
 8004c50:	bf5c      	itt	pl
 8004c52:	005b      	lslpl	r3, r3, #1
 8004c54:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8004c58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004c5c:	bf58      	it	pl
 8004c5e:	0049      	lslpl	r1, r1, #1
 8004c60:	2600      	movs	r6, #0
 8004c62:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8004c66:	106d      	asrs	r5, r5, #1
 8004c68:	0049      	lsls	r1, r1, #1
 8004c6a:	2016      	movs	r0, #22
 8004c6c:	4632      	mov	r2, r6
 8004c6e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8004c72:	1917      	adds	r7, r2, r4
 8004c74:	429f      	cmp	r7, r3
 8004c76:	bfde      	ittt	le
 8004c78:	193a      	addle	r2, r7, r4
 8004c7a:	1bdb      	suble	r3, r3, r7
 8004c7c:	1936      	addle	r6, r6, r4
 8004c7e:	0fcf      	lsrs	r7, r1, #31
 8004c80:	3801      	subs	r0, #1
 8004c82:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8004c86:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004c8a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8004c8e:	d1f0      	bne.n	8004c72 <__ieee754_sqrt+0xb6>
 8004c90:	4604      	mov	r4, r0
 8004c92:	2720      	movs	r7, #32
 8004c94:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	eb00 0e0c 	add.w	lr, r0, ip
 8004c9e:	db02      	blt.n	8004ca6 <__ieee754_sqrt+0xea>
 8004ca0:	d113      	bne.n	8004cca <__ieee754_sqrt+0x10e>
 8004ca2:	458e      	cmp	lr, r1
 8004ca4:	d811      	bhi.n	8004cca <__ieee754_sqrt+0x10e>
 8004ca6:	f1be 0f00 	cmp.w	lr, #0
 8004caa:	eb0e 000c 	add.w	r0, lr, ip
 8004cae:	da42      	bge.n	8004d36 <__ieee754_sqrt+0x17a>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	db40      	blt.n	8004d36 <__ieee754_sqrt+0x17a>
 8004cb4:	f102 0801 	add.w	r8, r2, #1
 8004cb8:	1a9b      	subs	r3, r3, r2
 8004cba:	458e      	cmp	lr, r1
 8004cbc:	bf88      	it	hi
 8004cbe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004cc2:	eba1 010e 	sub.w	r1, r1, lr
 8004cc6:	4464      	add	r4, ip
 8004cc8:	4642      	mov	r2, r8
 8004cca:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8004cce:	3f01      	subs	r7, #1
 8004cd0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8004cd4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004cd8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8004cdc:	d1dc      	bne.n	8004c98 <__ieee754_sqrt+0xdc>
 8004cde:	4319      	orrs	r1, r3
 8004ce0:	d01b      	beq.n	8004d1a <__ieee754_sqrt+0x15e>
 8004ce2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8004d68 <__ieee754_sqrt+0x1ac>
 8004ce6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8004d6c <__ieee754_sqrt+0x1b0>
 8004cea:	e9da 0100 	ldrd	r0, r1, [sl]
 8004cee:	e9db 2300 	ldrd	r2, r3, [fp]
 8004cf2:	f7fb fa75 	bl	80001e0 <__aeabi_dsub>
 8004cf6:	e9da 8900 	ldrd	r8, r9, [sl]
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4640      	mov	r0, r8
 8004d00:	4649      	mov	r1, r9
 8004d02:	f7fb fea1 	bl	8000a48 <__aeabi_dcmple>
 8004d06:	b140      	cbz	r0, 8004d1a <__ieee754_sqrt+0x15e>
 8004d08:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004d0c:	e9da 0100 	ldrd	r0, r1, [sl]
 8004d10:	e9db 2300 	ldrd	r2, r3, [fp]
 8004d14:	d111      	bne.n	8004d3a <__ieee754_sqrt+0x17e>
 8004d16:	3601      	adds	r6, #1
 8004d18:	463c      	mov	r4, r7
 8004d1a:	1072      	asrs	r2, r6, #1
 8004d1c:	0863      	lsrs	r3, r4, #1
 8004d1e:	07f1      	lsls	r1, r6, #31
 8004d20:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8004d24:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8004d28:	bf48      	it	mi
 8004d2a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8004d2e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8004d32:	4618      	mov	r0, r3
 8004d34:	e756      	b.n	8004be4 <__ieee754_sqrt+0x28>
 8004d36:	4690      	mov	r8, r2
 8004d38:	e7be      	b.n	8004cb8 <__ieee754_sqrt+0xfc>
 8004d3a:	f7fb fa53 	bl	80001e4 <__adddf3>
 8004d3e:	e9da 8900 	ldrd	r8, r9, [sl]
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4640      	mov	r0, r8
 8004d48:	4649      	mov	r1, r9
 8004d4a:	f7fb fe73 	bl	8000a34 <__aeabi_dcmplt>
 8004d4e:	b120      	cbz	r0, 8004d5a <__ieee754_sqrt+0x19e>
 8004d50:	1ca0      	adds	r0, r4, #2
 8004d52:	bf08      	it	eq
 8004d54:	3601      	addeq	r6, #1
 8004d56:	3402      	adds	r4, #2
 8004d58:	e7df      	b.n	8004d1a <__ieee754_sqrt+0x15e>
 8004d5a:	1c63      	adds	r3, r4, #1
 8004d5c:	f023 0401 	bic.w	r4, r3, #1
 8004d60:	e7db      	b.n	8004d1a <__ieee754_sqrt+0x15e>
 8004d62:	bf00      	nop
 8004d64:	7ff00000 	.word	0x7ff00000
 8004d68:	20000068 	.word	0x20000068
 8004d6c:	20000060 	.word	0x20000060

08004d70 <__ieee754_pow>:
 8004d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d74:	b091      	sub	sp, #68	@ 0x44
 8004d76:	ed8d 1b00 	vstr	d1, [sp]
 8004d7a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8004d7e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8004d82:	ea5a 0001 	orrs.w	r0, sl, r1
 8004d86:	ec57 6b10 	vmov	r6, r7, d0
 8004d8a:	d113      	bne.n	8004db4 <__ieee754_pow+0x44>
 8004d8c:	19b3      	adds	r3, r6, r6
 8004d8e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8004d92:	4152      	adcs	r2, r2
 8004d94:	4298      	cmp	r0, r3
 8004d96:	4b98      	ldr	r3, [pc, #608]	@ (8004ff8 <__ieee754_pow+0x288>)
 8004d98:	4193      	sbcs	r3, r2
 8004d9a:	f080 84ea 	bcs.w	8005772 <__ieee754_pow+0xa02>
 8004d9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004da2:	4630      	mov	r0, r6
 8004da4:	4639      	mov	r1, r7
 8004da6:	f7fb fa1d 	bl	80001e4 <__adddf3>
 8004daa:	ec41 0b10 	vmov	d0, r0, r1
 8004dae:	b011      	add	sp, #68	@ 0x44
 8004db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db4:	4a91      	ldr	r2, [pc, #580]	@ (8004ffc <__ieee754_pow+0x28c>)
 8004db6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8004dba:	4590      	cmp	r8, r2
 8004dbc:	463d      	mov	r5, r7
 8004dbe:	4633      	mov	r3, r6
 8004dc0:	d806      	bhi.n	8004dd0 <__ieee754_pow+0x60>
 8004dc2:	d101      	bne.n	8004dc8 <__ieee754_pow+0x58>
 8004dc4:	2e00      	cmp	r6, #0
 8004dc6:	d1ea      	bne.n	8004d9e <__ieee754_pow+0x2e>
 8004dc8:	4592      	cmp	sl, r2
 8004dca:	d801      	bhi.n	8004dd0 <__ieee754_pow+0x60>
 8004dcc:	d10e      	bne.n	8004dec <__ieee754_pow+0x7c>
 8004dce:	b169      	cbz	r1, 8004dec <__ieee754_pow+0x7c>
 8004dd0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8004dd4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8004dd8:	431d      	orrs	r5, r3
 8004dda:	d1e0      	bne.n	8004d9e <__ieee754_pow+0x2e>
 8004ddc:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004de0:	18db      	adds	r3, r3, r3
 8004de2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8004de6:	4152      	adcs	r2, r2
 8004de8:	429d      	cmp	r5, r3
 8004dea:	e7d4      	b.n	8004d96 <__ieee754_pow+0x26>
 8004dec:	2d00      	cmp	r5, #0
 8004dee:	46c3      	mov	fp, r8
 8004df0:	da3a      	bge.n	8004e68 <__ieee754_pow+0xf8>
 8004df2:	4a83      	ldr	r2, [pc, #524]	@ (8005000 <__ieee754_pow+0x290>)
 8004df4:	4592      	cmp	sl, r2
 8004df6:	d84d      	bhi.n	8004e94 <__ieee754_pow+0x124>
 8004df8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8004dfc:	4592      	cmp	sl, r2
 8004dfe:	f240 84c7 	bls.w	8005790 <__ieee754_pow+0xa20>
 8004e02:	ea4f 522a 	mov.w	r2, sl, asr #20
 8004e06:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8004e0a:	2a14      	cmp	r2, #20
 8004e0c:	dd0f      	ble.n	8004e2e <__ieee754_pow+0xbe>
 8004e0e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8004e12:	fa21 f402 	lsr.w	r4, r1, r2
 8004e16:	fa04 f202 	lsl.w	r2, r4, r2
 8004e1a:	428a      	cmp	r2, r1
 8004e1c:	f040 84b8 	bne.w	8005790 <__ieee754_pow+0xa20>
 8004e20:	f004 0401 	and.w	r4, r4, #1
 8004e24:	f1c4 0402 	rsb	r4, r4, #2
 8004e28:	2900      	cmp	r1, #0
 8004e2a:	d158      	bne.n	8004ede <__ieee754_pow+0x16e>
 8004e2c:	e00e      	b.n	8004e4c <__ieee754_pow+0xdc>
 8004e2e:	2900      	cmp	r1, #0
 8004e30:	d154      	bne.n	8004edc <__ieee754_pow+0x16c>
 8004e32:	f1c2 0214 	rsb	r2, r2, #20
 8004e36:	fa4a f402 	asr.w	r4, sl, r2
 8004e3a:	fa04 f202 	lsl.w	r2, r4, r2
 8004e3e:	4552      	cmp	r2, sl
 8004e40:	f040 84a3 	bne.w	800578a <__ieee754_pow+0xa1a>
 8004e44:	f004 0401 	and.w	r4, r4, #1
 8004e48:	f1c4 0402 	rsb	r4, r4, #2
 8004e4c:	4a6d      	ldr	r2, [pc, #436]	@ (8005004 <__ieee754_pow+0x294>)
 8004e4e:	4592      	cmp	sl, r2
 8004e50:	d12e      	bne.n	8004eb0 <__ieee754_pow+0x140>
 8004e52:	f1b9 0f00 	cmp.w	r9, #0
 8004e56:	f280 8494 	bge.w	8005782 <__ieee754_pow+0xa12>
 8004e5a:	496a      	ldr	r1, [pc, #424]	@ (8005004 <__ieee754_pow+0x294>)
 8004e5c:	4632      	mov	r2, r6
 8004e5e:	463b      	mov	r3, r7
 8004e60:	2000      	movs	r0, #0
 8004e62:	f7fb fc9f 	bl	80007a4 <__aeabi_ddiv>
 8004e66:	e7a0      	b.n	8004daa <__ieee754_pow+0x3a>
 8004e68:	2400      	movs	r4, #0
 8004e6a:	bbc1      	cbnz	r1, 8004ede <__ieee754_pow+0x16e>
 8004e6c:	4a63      	ldr	r2, [pc, #396]	@ (8004ffc <__ieee754_pow+0x28c>)
 8004e6e:	4592      	cmp	sl, r2
 8004e70:	d1ec      	bne.n	8004e4c <__ieee754_pow+0xdc>
 8004e72:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8004e76:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	f000 8479 	beq.w	8005772 <__ieee754_pow+0xa02>
 8004e80:	4b61      	ldr	r3, [pc, #388]	@ (8005008 <__ieee754_pow+0x298>)
 8004e82:	4598      	cmp	r8, r3
 8004e84:	d908      	bls.n	8004e98 <__ieee754_pow+0x128>
 8004e86:	f1b9 0f00 	cmp.w	r9, #0
 8004e8a:	f2c0 8476 	blt.w	800577a <__ieee754_pow+0xa0a>
 8004e8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e92:	e78a      	b.n	8004daa <__ieee754_pow+0x3a>
 8004e94:	2402      	movs	r4, #2
 8004e96:	e7e8      	b.n	8004e6a <__ieee754_pow+0xfa>
 8004e98:	f1b9 0f00 	cmp.w	r9, #0
 8004e9c:	f04f 0000 	mov.w	r0, #0
 8004ea0:	f04f 0100 	mov.w	r1, #0
 8004ea4:	da81      	bge.n	8004daa <__ieee754_pow+0x3a>
 8004ea6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004eaa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004eae:	e77c      	b.n	8004daa <__ieee754_pow+0x3a>
 8004eb0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8004eb4:	d106      	bne.n	8004ec4 <__ieee754_pow+0x154>
 8004eb6:	4632      	mov	r2, r6
 8004eb8:	463b      	mov	r3, r7
 8004eba:	4630      	mov	r0, r6
 8004ebc:	4639      	mov	r1, r7
 8004ebe:	f7fb fb47 	bl	8000550 <__aeabi_dmul>
 8004ec2:	e772      	b.n	8004daa <__ieee754_pow+0x3a>
 8004ec4:	4a51      	ldr	r2, [pc, #324]	@ (800500c <__ieee754_pow+0x29c>)
 8004ec6:	4591      	cmp	r9, r2
 8004ec8:	d109      	bne.n	8004ede <__ieee754_pow+0x16e>
 8004eca:	2d00      	cmp	r5, #0
 8004ecc:	db07      	blt.n	8004ede <__ieee754_pow+0x16e>
 8004ece:	ec47 6b10 	vmov	d0, r6, r7
 8004ed2:	b011      	add	sp, #68	@ 0x44
 8004ed4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed8:	f7ff be70 	b.w	8004bbc <__ieee754_sqrt>
 8004edc:	2400      	movs	r4, #0
 8004ede:	ec47 6b10 	vmov	d0, r6, r7
 8004ee2:	9302      	str	r3, [sp, #8]
 8004ee4:	f000 fc88 	bl	80057f8 <fabs>
 8004ee8:	9b02      	ldr	r3, [sp, #8]
 8004eea:	ec51 0b10 	vmov	r0, r1, d0
 8004eee:	bb53      	cbnz	r3, 8004f46 <__ieee754_pow+0x1d6>
 8004ef0:	4b44      	ldr	r3, [pc, #272]	@ (8005004 <__ieee754_pow+0x294>)
 8004ef2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d002      	beq.n	8004f00 <__ieee754_pow+0x190>
 8004efa:	f1b8 0f00 	cmp.w	r8, #0
 8004efe:	d122      	bne.n	8004f46 <__ieee754_pow+0x1d6>
 8004f00:	f1b9 0f00 	cmp.w	r9, #0
 8004f04:	da05      	bge.n	8004f12 <__ieee754_pow+0x1a2>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	493d      	ldr	r1, [pc, #244]	@ (8005004 <__ieee754_pow+0x294>)
 8004f0e:	f7fb fc49 	bl	80007a4 <__aeabi_ddiv>
 8004f12:	2d00      	cmp	r5, #0
 8004f14:	f6bf af49 	bge.w	8004daa <__ieee754_pow+0x3a>
 8004f18:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8004f1c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8004f20:	ea58 0804 	orrs.w	r8, r8, r4
 8004f24:	d108      	bne.n	8004f38 <__ieee754_pow+0x1c8>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	f7fb f957 	bl	80001e0 <__aeabi_dsub>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	e794      	b.n	8004e62 <__ieee754_pow+0xf2>
 8004f38:	2c01      	cmp	r4, #1
 8004f3a:	f47f af36 	bne.w	8004daa <__ieee754_pow+0x3a>
 8004f3e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004f42:	4619      	mov	r1, r3
 8004f44:	e731      	b.n	8004daa <__ieee754_pow+0x3a>
 8004f46:	0feb      	lsrs	r3, r5, #31
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	ea53 0204 	orrs.w	r2, r3, r4
 8004f4e:	d102      	bne.n	8004f56 <__ieee754_pow+0x1e6>
 8004f50:	4632      	mov	r2, r6
 8004f52:	463b      	mov	r3, r7
 8004f54:	e7e9      	b.n	8004f2a <__ieee754_pow+0x1ba>
 8004f56:	3c01      	subs	r4, #1
 8004f58:	431c      	orrs	r4, r3
 8004f5a:	d016      	beq.n	8004f8a <__ieee754_pow+0x21a>
 8004f5c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8004fe8 <__ieee754_pow+0x278>
 8004f60:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8004f64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f68:	f240 8112 	bls.w	8005190 <__ieee754_pow+0x420>
 8004f6c:	4b28      	ldr	r3, [pc, #160]	@ (8005010 <__ieee754_pow+0x2a0>)
 8004f6e:	459a      	cmp	sl, r3
 8004f70:	4b25      	ldr	r3, [pc, #148]	@ (8005008 <__ieee754_pow+0x298>)
 8004f72:	d916      	bls.n	8004fa2 <__ieee754_pow+0x232>
 8004f74:	4598      	cmp	r8, r3
 8004f76:	d80b      	bhi.n	8004f90 <__ieee754_pow+0x220>
 8004f78:	f1b9 0f00 	cmp.w	r9, #0
 8004f7c:	da0b      	bge.n	8004f96 <__ieee754_pow+0x226>
 8004f7e:	2000      	movs	r0, #0
 8004f80:	b011      	add	sp, #68	@ 0x44
 8004f82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f86:	f000 bcf3 	b.w	8005970 <__math_oflow>
 8004f8a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8004ff0 <__ieee754_pow+0x280>
 8004f8e:	e7e7      	b.n	8004f60 <__ieee754_pow+0x1f0>
 8004f90:	f1b9 0f00 	cmp.w	r9, #0
 8004f94:	dcf3      	bgt.n	8004f7e <__ieee754_pow+0x20e>
 8004f96:	2000      	movs	r0, #0
 8004f98:	b011      	add	sp, #68	@ 0x44
 8004f9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f9e:	f000 bcdf 	b.w	8005960 <__math_uflow>
 8004fa2:	4598      	cmp	r8, r3
 8004fa4:	d20c      	bcs.n	8004fc0 <__ieee754_pow+0x250>
 8004fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004faa:	2200      	movs	r2, #0
 8004fac:	2300      	movs	r3, #0
 8004fae:	f7fb fd41 	bl	8000a34 <__aeabi_dcmplt>
 8004fb2:	3800      	subs	r0, #0
 8004fb4:	bf18      	it	ne
 8004fb6:	2001      	movne	r0, #1
 8004fb8:	f1b9 0f00 	cmp.w	r9, #0
 8004fbc:	daec      	bge.n	8004f98 <__ieee754_pow+0x228>
 8004fbe:	e7df      	b.n	8004f80 <__ieee754_pow+0x210>
 8004fc0:	4b10      	ldr	r3, [pc, #64]	@ (8005004 <__ieee754_pow+0x294>)
 8004fc2:	4598      	cmp	r8, r3
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	d924      	bls.n	8005014 <__ieee754_pow+0x2a4>
 8004fca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f7fb fd30 	bl	8000a34 <__aeabi_dcmplt>
 8004fd4:	3800      	subs	r0, #0
 8004fd6:	bf18      	it	ne
 8004fd8:	2001      	movne	r0, #1
 8004fda:	f1b9 0f00 	cmp.w	r9, #0
 8004fde:	dccf      	bgt.n	8004f80 <__ieee754_pow+0x210>
 8004fe0:	e7da      	b.n	8004f98 <__ieee754_pow+0x228>
 8004fe2:	bf00      	nop
 8004fe4:	f3af 8000 	nop.w
 8004fe8:	00000000 	.word	0x00000000
 8004fec:	3ff00000 	.word	0x3ff00000
 8004ff0:	00000000 	.word	0x00000000
 8004ff4:	bff00000 	.word	0xbff00000
 8004ff8:	fff00000 	.word	0xfff00000
 8004ffc:	7ff00000 	.word	0x7ff00000
 8005000:	433fffff 	.word	0x433fffff
 8005004:	3ff00000 	.word	0x3ff00000
 8005008:	3fefffff 	.word	0x3fefffff
 800500c:	3fe00000 	.word	0x3fe00000
 8005010:	43f00000 	.word	0x43f00000
 8005014:	4b5a      	ldr	r3, [pc, #360]	@ (8005180 <__ieee754_pow+0x410>)
 8005016:	f7fb f8e3 	bl	80001e0 <__aeabi_dsub>
 800501a:	a351      	add	r3, pc, #324	@ (adr r3, 8005160 <__ieee754_pow+0x3f0>)
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	4604      	mov	r4, r0
 8005022:	460d      	mov	r5, r1
 8005024:	f7fb fa94 	bl	8000550 <__aeabi_dmul>
 8005028:	a34f      	add	r3, pc, #316	@ (adr r3, 8005168 <__ieee754_pow+0x3f8>)
 800502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502e:	4606      	mov	r6, r0
 8005030:	460f      	mov	r7, r1
 8005032:	4620      	mov	r0, r4
 8005034:	4629      	mov	r1, r5
 8005036:	f7fb fa8b 	bl	8000550 <__aeabi_dmul>
 800503a:	4b52      	ldr	r3, [pc, #328]	@ (8005184 <__ieee754_pow+0x414>)
 800503c:	4682      	mov	sl, r0
 800503e:	468b      	mov	fp, r1
 8005040:	2200      	movs	r2, #0
 8005042:	4620      	mov	r0, r4
 8005044:	4629      	mov	r1, r5
 8005046:	f7fb fa83 	bl	8000550 <__aeabi_dmul>
 800504a:	4602      	mov	r2, r0
 800504c:	460b      	mov	r3, r1
 800504e:	a148      	add	r1, pc, #288	@ (adr r1, 8005170 <__ieee754_pow+0x400>)
 8005050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005054:	f7fb f8c4 	bl	80001e0 <__aeabi_dsub>
 8005058:	4622      	mov	r2, r4
 800505a:	462b      	mov	r3, r5
 800505c:	f7fb fa78 	bl	8000550 <__aeabi_dmul>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	2000      	movs	r0, #0
 8005066:	4948      	ldr	r1, [pc, #288]	@ (8005188 <__ieee754_pow+0x418>)
 8005068:	f7fb f8ba 	bl	80001e0 <__aeabi_dsub>
 800506c:	4622      	mov	r2, r4
 800506e:	4680      	mov	r8, r0
 8005070:	4689      	mov	r9, r1
 8005072:	462b      	mov	r3, r5
 8005074:	4620      	mov	r0, r4
 8005076:	4629      	mov	r1, r5
 8005078:	f7fb fa6a 	bl	8000550 <__aeabi_dmul>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4640      	mov	r0, r8
 8005082:	4649      	mov	r1, r9
 8005084:	f7fb fa64 	bl	8000550 <__aeabi_dmul>
 8005088:	a33b      	add	r3, pc, #236	@ (adr r3, 8005178 <__ieee754_pow+0x408>)
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f7fb fa5f 	bl	8000550 <__aeabi_dmul>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4650      	mov	r0, sl
 8005098:	4659      	mov	r1, fp
 800509a:	f7fb f8a1 	bl	80001e0 <__aeabi_dsub>
 800509e:	4602      	mov	r2, r0
 80050a0:	460b      	mov	r3, r1
 80050a2:	4680      	mov	r8, r0
 80050a4:	4689      	mov	r9, r1
 80050a6:	4630      	mov	r0, r6
 80050a8:	4639      	mov	r1, r7
 80050aa:	f7fb f89b 	bl	80001e4 <__adddf3>
 80050ae:	2400      	movs	r4, #0
 80050b0:	4632      	mov	r2, r6
 80050b2:	463b      	mov	r3, r7
 80050b4:	4620      	mov	r0, r4
 80050b6:	460d      	mov	r5, r1
 80050b8:	f7fb f892 	bl	80001e0 <__aeabi_dsub>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4640      	mov	r0, r8
 80050c2:	4649      	mov	r1, r9
 80050c4:	f7fb f88c 	bl	80001e0 <__aeabi_dsub>
 80050c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050d0:	2300      	movs	r3, #0
 80050d2:	9304      	str	r3, [sp, #16]
 80050d4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80050d8:	4606      	mov	r6, r0
 80050da:	460f      	mov	r7, r1
 80050dc:	4652      	mov	r2, sl
 80050de:	465b      	mov	r3, fp
 80050e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050e4:	f7fb f87c 	bl	80001e0 <__aeabi_dsub>
 80050e8:	4622      	mov	r2, r4
 80050ea:	462b      	mov	r3, r5
 80050ec:	f7fb fa30 	bl	8000550 <__aeabi_dmul>
 80050f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050f4:	4680      	mov	r8, r0
 80050f6:	4689      	mov	r9, r1
 80050f8:	4630      	mov	r0, r6
 80050fa:	4639      	mov	r1, r7
 80050fc:	f7fb fa28 	bl	8000550 <__aeabi_dmul>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4640      	mov	r0, r8
 8005106:	4649      	mov	r1, r9
 8005108:	f7fb f86c 	bl	80001e4 <__adddf3>
 800510c:	4652      	mov	r2, sl
 800510e:	465b      	mov	r3, fp
 8005110:	4606      	mov	r6, r0
 8005112:	460f      	mov	r7, r1
 8005114:	4620      	mov	r0, r4
 8005116:	4629      	mov	r1, r5
 8005118:	f7fb fa1a 	bl	8000550 <__aeabi_dmul>
 800511c:	460b      	mov	r3, r1
 800511e:	4602      	mov	r2, r0
 8005120:	4680      	mov	r8, r0
 8005122:	4689      	mov	r9, r1
 8005124:	4630      	mov	r0, r6
 8005126:	4639      	mov	r1, r7
 8005128:	f7fb f85c 	bl	80001e4 <__adddf3>
 800512c:	4b17      	ldr	r3, [pc, #92]	@ (800518c <__ieee754_pow+0x41c>)
 800512e:	4299      	cmp	r1, r3
 8005130:	4604      	mov	r4, r0
 8005132:	460d      	mov	r5, r1
 8005134:	468a      	mov	sl, r1
 8005136:	468b      	mov	fp, r1
 8005138:	f340 82ef 	ble.w	800571a <__ieee754_pow+0x9aa>
 800513c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8005140:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8005144:	4303      	orrs	r3, r0
 8005146:	f000 81e8 	beq.w	800551a <__ieee754_pow+0x7aa>
 800514a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800514e:	2200      	movs	r2, #0
 8005150:	2300      	movs	r3, #0
 8005152:	f7fb fc6f 	bl	8000a34 <__aeabi_dcmplt>
 8005156:	3800      	subs	r0, #0
 8005158:	bf18      	it	ne
 800515a:	2001      	movne	r0, #1
 800515c:	e710      	b.n	8004f80 <__ieee754_pow+0x210>
 800515e:	bf00      	nop
 8005160:	60000000 	.word	0x60000000
 8005164:	3ff71547 	.word	0x3ff71547
 8005168:	f85ddf44 	.word	0xf85ddf44
 800516c:	3e54ae0b 	.word	0x3e54ae0b
 8005170:	55555555 	.word	0x55555555
 8005174:	3fd55555 	.word	0x3fd55555
 8005178:	652b82fe 	.word	0x652b82fe
 800517c:	3ff71547 	.word	0x3ff71547
 8005180:	3ff00000 	.word	0x3ff00000
 8005184:	3fd00000 	.word	0x3fd00000
 8005188:	3fe00000 	.word	0x3fe00000
 800518c:	408fffff 	.word	0x408fffff
 8005190:	4bd5      	ldr	r3, [pc, #852]	@ (80054e8 <__ieee754_pow+0x778>)
 8005192:	402b      	ands	r3, r5
 8005194:	2200      	movs	r2, #0
 8005196:	b92b      	cbnz	r3, 80051a4 <__ieee754_pow+0x434>
 8005198:	4bd4      	ldr	r3, [pc, #848]	@ (80054ec <__ieee754_pow+0x77c>)
 800519a:	f7fb f9d9 	bl	8000550 <__aeabi_dmul>
 800519e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80051a2:	468b      	mov	fp, r1
 80051a4:	ea4f 532b 	mov.w	r3, fp, asr #20
 80051a8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80051ac:	4413      	add	r3, r2
 80051ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80051b0:	4bcf      	ldr	r3, [pc, #828]	@ (80054f0 <__ieee754_pow+0x780>)
 80051b2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80051b6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80051ba:	459b      	cmp	fp, r3
 80051bc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80051c0:	dd08      	ble.n	80051d4 <__ieee754_pow+0x464>
 80051c2:	4bcc      	ldr	r3, [pc, #816]	@ (80054f4 <__ieee754_pow+0x784>)
 80051c4:	459b      	cmp	fp, r3
 80051c6:	f340 81a5 	ble.w	8005514 <__ieee754_pow+0x7a4>
 80051ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051cc:	3301      	adds	r3, #1
 80051ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80051d0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80051d4:	f04f 0a00 	mov.w	sl, #0
 80051d8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80051dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051de:	4bc6      	ldr	r3, [pc, #792]	@ (80054f8 <__ieee754_pow+0x788>)
 80051e0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80051e4:	ed93 7b00 	vldr	d7, [r3]
 80051e8:	4629      	mov	r1, r5
 80051ea:	ec53 2b17 	vmov	r2, r3, d7
 80051ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80051f2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80051f6:	f7fa fff3 	bl	80001e0 <__aeabi_dsub>
 80051fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80051fe:	4606      	mov	r6, r0
 8005200:	460f      	mov	r7, r1
 8005202:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005206:	f7fa ffed 	bl	80001e4 <__adddf3>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	2000      	movs	r0, #0
 8005210:	49ba      	ldr	r1, [pc, #744]	@ (80054fc <__ieee754_pow+0x78c>)
 8005212:	f7fb fac7 	bl	80007a4 <__aeabi_ddiv>
 8005216:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4630      	mov	r0, r6
 8005220:	4639      	mov	r1, r7
 8005222:	f7fb f995 	bl	8000550 <__aeabi_dmul>
 8005226:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800522a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800522e:	106d      	asrs	r5, r5, #1
 8005230:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8005234:	f04f 0b00 	mov.w	fp, #0
 8005238:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800523c:	4661      	mov	r1, ip
 800523e:	2200      	movs	r2, #0
 8005240:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005244:	4658      	mov	r0, fp
 8005246:	46e1      	mov	r9, ip
 8005248:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800524c:	4614      	mov	r4, r2
 800524e:	461d      	mov	r5, r3
 8005250:	f7fb f97e 	bl	8000550 <__aeabi_dmul>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4630      	mov	r0, r6
 800525a:	4639      	mov	r1, r7
 800525c:	f7fa ffc0 	bl	80001e0 <__aeabi_dsub>
 8005260:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005264:	4606      	mov	r6, r0
 8005266:	460f      	mov	r7, r1
 8005268:	4620      	mov	r0, r4
 800526a:	4629      	mov	r1, r5
 800526c:	f7fa ffb8 	bl	80001e0 <__aeabi_dsub>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005278:	f7fa ffb2 	bl	80001e0 <__aeabi_dsub>
 800527c:	465a      	mov	r2, fp
 800527e:	464b      	mov	r3, r9
 8005280:	f7fb f966 	bl	8000550 <__aeabi_dmul>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4630      	mov	r0, r6
 800528a:	4639      	mov	r1, r7
 800528c:	f7fa ffa8 	bl	80001e0 <__aeabi_dsub>
 8005290:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005294:	f7fb f95c 	bl	8000550 <__aeabi_dmul>
 8005298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800529c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80052a0:	4610      	mov	r0, r2
 80052a2:	4619      	mov	r1, r3
 80052a4:	f7fb f954 	bl	8000550 <__aeabi_dmul>
 80052a8:	a37d      	add	r3, pc, #500	@ (adr r3, 80054a0 <__ieee754_pow+0x730>)
 80052aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ae:	4604      	mov	r4, r0
 80052b0:	460d      	mov	r5, r1
 80052b2:	f7fb f94d 	bl	8000550 <__aeabi_dmul>
 80052b6:	a37c      	add	r3, pc, #496	@ (adr r3, 80054a8 <__ieee754_pow+0x738>)
 80052b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052bc:	f7fa ff92 	bl	80001e4 <__adddf3>
 80052c0:	4622      	mov	r2, r4
 80052c2:	462b      	mov	r3, r5
 80052c4:	f7fb f944 	bl	8000550 <__aeabi_dmul>
 80052c8:	a379      	add	r3, pc, #484	@ (adr r3, 80054b0 <__ieee754_pow+0x740>)
 80052ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ce:	f7fa ff89 	bl	80001e4 <__adddf3>
 80052d2:	4622      	mov	r2, r4
 80052d4:	462b      	mov	r3, r5
 80052d6:	f7fb f93b 	bl	8000550 <__aeabi_dmul>
 80052da:	a377      	add	r3, pc, #476	@ (adr r3, 80054b8 <__ieee754_pow+0x748>)
 80052dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e0:	f7fa ff80 	bl	80001e4 <__adddf3>
 80052e4:	4622      	mov	r2, r4
 80052e6:	462b      	mov	r3, r5
 80052e8:	f7fb f932 	bl	8000550 <__aeabi_dmul>
 80052ec:	a374      	add	r3, pc, #464	@ (adr r3, 80054c0 <__ieee754_pow+0x750>)
 80052ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f2:	f7fa ff77 	bl	80001e4 <__adddf3>
 80052f6:	4622      	mov	r2, r4
 80052f8:	462b      	mov	r3, r5
 80052fa:	f7fb f929 	bl	8000550 <__aeabi_dmul>
 80052fe:	a372      	add	r3, pc, #456	@ (adr r3, 80054c8 <__ieee754_pow+0x758>)
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	f7fa ff6e 	bl	80001e4 <__adddf3>
 8005308:	4622      	mov	r2, r4
 800530a:	4606      	mov	r6, r0
 800530c:	460f      	mov	r7, r1
 800530e:	462b      	mov	r3, r5
 8005310:	4620      	mov	r0, r4
 8005312:	4629      	mov	r1, r5
 8005314:	f7fb f91c 	bl	8000550 <__aeabi_dmul>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4630      	mov	r0, r6
 800531e:	4639      	mov	r1, r7
 8005320:	f7fb f916 	bl	8000550 <__aeabi_dmul>
 8005324:	465a      	mov	r2, fp
 8005326:	4604      	mov	r4, r0
 8005328:	460d      	mov	r5, r1
 800532a:	464b      	mov	r3, r9
 800532c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005330:	f7fa ff58 	bl	80001e4 <__adddf3>
 8005334:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005338:	f7fb f90a 	bl	8000550 <__aeabi_dmul>
 800533c:	4622      	mov	r2, r4
 800533e:	462b      	mov	r3, r5
 8005340:	f7fa ff50 	bl	80001e4 <__adddf3>
 8005344:	465a      	mov	r2, fp
 8005346:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800534a:	464b      	mov	r3, r9
 800534c:	4658      	mov	r0, fp
 800534e:	4649      	mov	r1, r9
 8005350:	f7fb f8fe 	bl	8000550 <__aeabi_dmul>
 8005354:	4b6a      	ldr	r3, [pc, #424]	@ (8005500 <__ieee754_pow+0x790>)
 8005356:	2200      	movs	r2, #0
 8005358:	4606      	mov	r6, r0
 800535a:	460f      	mov	r7, r1
 800535c:	f7fa ff42 	bl	80001e4 <__adddf3>
 8005360:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005364:	f7fa ff3e 	bl	80001e4 <__adddf3>
 8005368:	46d8      	mov	r8, fp
 800536a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800536e:	460d      	mov	r5, r1
 8005370:	465a      	mov	r2, fp
 8005372:	460b      	mov	r3, r1
 8005374:	4640      	mov	r0, r8
 8005376:	4649      	mov	r1, r9
 8005378:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800537c:	f7fb f8e8 	bl	8000550 <__aeabi_dmul>
 8005380:	465c      	mov	r4, fp
 8005382:	4680      	mov	r8, r0
 8005384:	4689      	mov	r9, r1
 8005386:	4b5e      	ldr	r3, [pc, #376]	@ (8005500 <__ieee754_pow+0x790>)
 8005388:	2200      	movs	r2, #0
 800538a:	4620      	mov	r0, r4
 800538c:	4629      	mov	r1, r5
 800538e:	f7fa ff27 	bl	80001e0 <__aeabi_dsub>
 8005392:	4632      	mov	r2, r6
 8005394:	463b      	mov	r3, r7
 8005396:	f7fa ff23 	bl	80001e0 <__aeabi_dsub>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80053a2:	f7fa ff1d 	bl	80001e0 <__aeabi_dsub>
 80053a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053aa:	f7fb f8d1 	bl	8000550 <__aeabi_dmul>
 80053ae:	4622      	mov	r2, r4
 80053b0:	4606      	mov	r6, r0
 80053b2:	460f      	mov	r7, r1
 80053b4:	462b      	mov	r3, r5
 80053b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053ba:	f7fb f8c9 	bl	8000550 <__aeabi_dmul>
 80053be:	4602      	mov	r2, r0
 80053c0:	460b      	mov	r3, r1
 80053c2:	4630      	mov	r0, r6
 80053c4:	4639      	mov	r1, r7
 80053c6:	f7fa ff0d 	bl	80001e4 <__adddf3>
 80053ca:	4606      	mov	r6, r0
 80053cc:	460f      	mov	r7, r1
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4640      	mov	r0, r8
 80053d4:	4649      	mov	r1, r9
 80053d6:	f7fa ff05 	bl	80001e4 <__adddf3>
 80053da:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80053de:	a33c      	add	r3, pc, #240	@ (adr r3, 80054d0 <__ieee754_pow+0x760>)
 80053e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e4:	4658      	mov	r0, fp
 80053e6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80053ea:	460d      	mov	r5, r1
 80053ec:	f7fb f8b0 	bl	8000550 <__aeabi_dmul>
 80053f0:	465c      	mov	r4, fp
 80053f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053f6:	4642      	mov	r2, r8
 80053f8:	464b      	mov	r3, r9
 80053fa:	4620      	mov	r0, r4
 80053fc:	4629      	mov	r1, r5
 80053fe:	f7fa feef 	bl	80001e0 <__aeabi_dsub>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4630      	mov	r0, r6
 8005408:	4639      	mov	r1, r7
 800540a:	f7fa fee9 	bl	80001e0 <__aeabi_dsub>
 800540e:	a332      	add	r3, pc, #200	@ (adr r3, 80054d8 <__ieee754_pow+0x768>)
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	f7fb f89c 	bl	8000550 <__aeabi_dmul>
 8005418:	a331      	add	r3, pc, #196	@ (adr r3, 80054e0 <__ieee754_pow+0x770>)
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	4606      	mov	r6, r0
 8005420:	460f      	mov	r7, r1
 8005422:	4620      	mov	r0, r4
 8005424:	4629      	mov	r1, r5
 8005426:	f7fb f893 	bl	8000550 <__aeabi_dmul>
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	4630      	mov	r0, r6
 8005430:	4639      	mov	r1, r7
 8005432:	f7fa fed7 	bl	80001e4 <__adddf3>
 8005436:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005438:	4b32      	ldr	r3, [pc, #200]	@ (8005504 <__ieee754_pow+0x794>)
 800543a:	4413      	add	r3, r2
 800543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005440:	f7fa fed0 	bl	80001e4 <__adddf3>
 8005444:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005448:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800544a:	f7fb f817 	bl	800047c <__aeabi_i2d>
 800544e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005450:	4b2d      	ldr	r3, [pc, #180]	@ (8005508 <__ieee754_pow+0x798>)
 8005452:	4413      	add	r3, r2
 8005454:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005458:	4606      	mov	r6, r0
 800545a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800545e:	460f      	mov	r7, r1
 8005460:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005464:	f7fa febe 	bl	80001e4 <__adddf3>
 8005468:	4642      	mov	r2, r8
 800546a:	464b      	mov	r3, r9
 800546c:	f7fa feba 	bl	80001e4 <__adddf3>
 8005470:	4632      	mov	r2, r6
 8005472:	463b      	mov	r3, r7
 8005474:	f7fa feb6 	bl	80001e4 <__adddf3>
 8005478:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800547c:	4632      	mov	r2, r6
 800547e:	463b      	mov	r3, r7
 8005480:	4658      	mov	r0, fp
 8005482:	460d      	mov	r5, r1
 8005484:	f7fa feac 	bl	80001e0 <__aeabi_dsub>
 8005488:	4642      	mov	r2, r8
 800548a:	464b      	mov	r3, r9
 800548c:	f7fa fea8 	bl	80001e0 <__aeabi_dsub>
 8005490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005494:	f7fa fea4 	bl	80001e0 <__aeabi_dsub>
 8005498:	465c      	mov	r4, fp
 800549a:	4602      	mov	r2, r0
 800549c:	e036      	b.n	800550c <__ieee754_pow+0x79c>
 800549e:	bf00      	nop
 80054a0:	4a454eef 	.word	0x4a454eef
 80054a4:	3fca7e28 	.word	0x3fca7e28
 80054a8:	93c9db65 	.word	0x93c9db65
 80054ac:	3fcd864a 	.word	0x3fcd864a
 80054b0:	a91d4101 	.word	0xa91d4101
 80054b4:	3fd17460 	.word	0x3fd17460
 80054b8:	518f264d 	.word	0x518f264d
 80054bc:	3fd55555 	.word	0x3fd55555
 80054c0:	db6fabff 	.word	0xdb6fabff
 80054c4:	3fdb6db6 	.word	0x3fdb6db6
 80054c8:	33333303 	.word	0x33333303
 80054cc:	3fe33333 	.word	0x3fe33333
 80054d0:	e0000000 	.word	0xe0000000
 80054d4:	3feec709 	.word	0x3feec709
 80054d8:	dc3a03fd 	.word	0xdc3a03fd
 80054dc:	3feec709 	.word	0x3feec709
 80054e0:	145b01f5 	.word	0x145b01f5
 80054e4:	be3e2fe0 	.word	0xbe3e2fe0
 80054e8:	7ff00000 	.word	0x7ff00000
 80054ec:	43400000 	.word	0x43400000
 80054f0:	0003988e 	.word	0x0003988e
 80054f4:	000bb679 	.word	0x000bb679
 80054f8:	080059c8 	.word	0x080059c8
 80054fc:	3ff00000 	.word	0x3ff00000
 8005500:	40080000 	.word	0x40080000
 8005504:	080059a8 	.word	0x080059a8
 8005508:	080059b8 	.word	0x080059b8
 800550c:	460b      	mov	r3, r1
 800550e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005512:	e5d7      	b.n	80050c4 <__ieee754_pow+0x354>
 8005514:	f04f 0a01 	mov.w	sl, #1
 8005518:	e65e      	b.n	80051d8 <__ieee754_pow+0x468>
 800551a:	a3b4      	add	r3, pc, #720	@ (adr r3, 80057ec <__ieee754_pow+0xa7c>)
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	4630      	mov	r0, r6
 8005522:	4639      	mov	r1, r7
 8005524:	f7fa fe5e 	bl	80001e4 <__adddf3>
 8005528:	4642      	mov	r2, r8
 800552a:	e9cd 0100 	strd	r0, r1, [sp]
 800552e:	464b      	mov	r3, r9
 8005530:	4620      	mov	r0, r4
 8005532:	4629      	mov	r1, r5
 8005534:	f7fa fe54 	bl	80001e0 <__aeabi_dsub>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005540:	f7fb fa96 	bl	8000a70 <__aeabi_dcmpgt>
 8005544:	2800      	cmp	r0, #0
 8005546:	f47f ae00 	bne.w	800514a <__ieee754_pow+0x3da>
 800554a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800554e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005552:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8005556:	fa43 fa0a 	asr.w	sl, r3, sl
 800555a:	44da      	add	sl, fp
 800555c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005560:	489d      	ldr	r0, [pc, #628]	@ (80057d8 <__ieee754_pow+0xa68>)
 8005562:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8005566:	4108      	asrs	r0, r1
 8005568:	ea00 030a 	and.w	r3, r0, sl
 800556c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8005570:	f1c1 0114 	rsb	r1, r1, #20
 8005574:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8005578:	fa4a fa01 	asr.w	sl, sl, r1
 800557c:	f1bb 0f00 	cmp.w	fp, #0
 8005580:	4640      	mov	r0, r8
 8005582:	4649      	mov	r1, r9
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	bfb8      	it	lt
 800558a:	f1ca 0a00 	rsblt	sl, sl, #0
 800558e:	f7fa fe27 	bl	80001e0 <__aeabi_dsub>
 8005592:	4680      	mov	r8, r0
 8005594:	4689      	mov	r9, r1
 8005596:	4632      	mov	r2, r6
 8005598:	463b      	mov	r3, r7
 800559a:	4640      	mov	r0, r8
 800559c:	4649      	mov	r1, r9
 800559e:	f7fa fe21 	bl	80001e4 <__adddf3>
 80055a2:	2400      	movs	r4, #0
 80055a4:	a37c      	add	r3, pc, #496	@ (adr r3, 8005798 <__ieee754_pow+0xa28>)
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	4620      	mov	r0, r4
 80055ac:	460d      	mov	r5, r1
 80055ae:	f7fa ffcf 	bl	8000550 <__aeabi_dmul>
 80055b2:	4642      	mov	r2, r8
 80055b4:	e9cd 0100 	strd	r0, r1, [sp]
 80055b8:	464b      	mov	r3, r9
 80055ba:	4620      	mov	r0, r4
 80055bc:	4629      	mov	r1, r5
 80055be:	f7fa fe0f 	bl	80001e0 <__aeabi_dsub>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4630      	mov	r0, r6
 80055c8:	4639      	mov	r1, r7
 80055ca:	f7fa fe09 	bl	80001e0 <__aeabi_dsub>
 80055ce:	a374      	add	r3, pc, #464	@ (adr r3, 80057a0 <__ieee754_pow+0xa30>)
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	f7fa ffbc 	bl	8000550 <__aeabi_dmul>
 80055d8:	a373      	add	r3, pc, #460	@ (adr r3, 80057a8 <__ieee754_pow+0xa38>)
 80055da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055de:	4680      	mov	r8, r0
 80055e0:	4689      	mov	r9, r1
 80055e2:	4620      	mov	r0, r4
 80055e4:	4629      	mov	r1, r5
 80055e6:	f7fa ffb3 	bl	8000550 <__aeabi_dmul>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4640      	mov	r0, r8
 80055f0:	4649      	mov	r1, r9
 80055f2:	f7fa fdf7 	bl	80001e4 <__adddf3>
 80055f6:	4604      	mov	r4, r0
 80055f8:	460d      	mov	r5, r1
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005602:	f7fa fdef 	bl	80001e4 <__adddf3>
 8005606:	e9dd 2300 	ldrd	r2, r3, [sp]
 800560a:	4680      	mov	r8, r0
 800560c:	4689      	mov	r9, r1
 800560e:	f7fa fde7 	bl	80001e0 <__aeabi_dsub>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4620      	mov	r0, r4
 8005618:	4629      	mov	r1, r5
 800561a:	f7fa fde1 	bl	80001e0 <__aeabi_dsub>
 800561e:	4642      	mov	r2, r8
 8005620:	4606      	mov	r6, r0
 8005622:	460f      	mov	r7, r1
 8005624:	464b      	mov	r3, r9
 8005626:	4640      	mov	r0, r8
 8005628:	4649      	mov	r1, r9
 800562a:	f7fa ff91 	bl	8000550 <__aeabi_dmul>
 800562e:	a360      	add	r3, pc, #384	@ (adr r3, 80057b0 <__ieee754_pow+0xa40>)
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	4604      	mov	r4, r0
 8005636:	460d      	mov	r5, r1
 8005638:	f7fa ff8a 	bl	8000550 <__aeabi_dmul>
 800563c:	a35e      	add	r3, pc, #376	@ (adr r3, 80057b8 <__ieee754_pow+0xa48>)
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	f7fa fdcd 	bl	80001e0 <__aeabi_dsub>
 8005646:	4622      	mov	r2, r4
 8005648:	462b      	mov	r3, r5
 800564a:	f7fa ff81 	bl	8000550 <__aeabi_dmul>
 800564e:	a35c      	add	r3, pc, #368	@ (adr r3, 80057c0 <__ieee754_pow+0xa50>)
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	f7fa fdc6 	bl	80001e4 <__adddf3>
 8005658:	4622      	mov	r2, r4
 800565a:	462b      	mov	r3, r5
 800565c:	f7fa ff78 	bl	8000550 <__aeabi_dmul>
 8005660:	a359      	add	r3, pc, #356	@ (adr r3, 80057c8 <__ieee754_pow+0xa58>)
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	f7fa fdbb 	bl	80001e0 <__aeabi_dsub>
 800566a:	4622      	mov	r2, r4
 800566c:	462b      	mov	r3, r5
 800566e:	f7fa ff6f 	bl	8000550 <__aeabi_dmul>
 8005672:	a357      	add	r3, pc, #348	@ (adr r3, 80057d0 <__ieee754_pow+0xa60>)
 8005674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005678:	f7fa fdb4 	bl	80001e4 <__adddf3>
 800567c:	4622      	mov	r2, r4
 800567e:	462b      	mov	r3, r5
 8005680:	f7fa ff66 	bl	8000550 <__aeabi_dmul>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4640      	mov	r0, r8
 800568a:	4649      	mov	r1, r9
 800568c:	f7fa fda8 	bl	80001e0 <__aeabi_dsub>
 8005690:	4604      	mov	r4, r0
 8005692:	460d      	mov	r5, r1
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	4640      	mov	r0, r8
 800569a:	4649      	mov	r1, r9
 800569c:	f7fa ff58 	bl	8000550 <__aeabi_dmul>
 80056a0:	2200      	movs	r2, #0
 80056a2:	e9cd 0100 	strd	r0, r1, [sp]
 80056a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80056aa:	4620      	mov	r0, r4
 80056ac:	4629      	mov	r1, r5
 80056ae:	f7fa fd97 	bl	80001e0 <__aeabi_dsub>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056ba:	f7fb f873 	bl	80007a4 <__aeabi_ddiv>
 80056be:	4632      	mov	r2, r6
 80056c0:	4604      	mov	r4, r0
 80056c2:	460d      	mov	r5, r1
 80056c4:	463b      	mov	r3, r7
 80056c6:	4640      	mov	r0, r8
 80056c8:	4649      	mov	r1, r9
 80056ca:	f7fa ff41 	bl	8000550 <__aeabi_dmul>
 80056ce:	4632      	mov	r2, r6
 80056d0:	463b      	mov	r3, r7
 80056d2:	f7fa fd87 	bl	80001e4 <__adddf3>
 80056d6:	4602      	mov	r2, r0
 80056d8:	460b      	mov	r3, r1
 80056da:	4620      	mov	r0, r4
 80056dc:	4629      	mov	r1, r5
 80056de:	f7fa fd7f 	bl	80001e0 <__aeabi_dsub>
 80056e2:	4642      	mov	r2, r8
 80056e4:	464b      	mov	r3, r9
 80056e6:	f7fa fd7b 	bl	80001e0 <__aeabi_dsub>
 80056ea:	460b      	mov	r3, r1
 80056ec:	4602      	mov	r2, r0
 80056ee:	493b      	ldr	r1, [pc, #236]	@ (80057dc <__ieee754_pow+0xa6c>)
 80056f0:	2000      	movs	r0, #0
 80056f2:	f7fa fd75 	bl	80001e0 <__aeabi_dsub>
 80056f6:	ec41 0b10 	vmov	d0, r0, r1
 80056fa:	ee10 3a90 	vmov	r3, s1
 80056fe:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005706:	da30      	bge.n	800576a <__ieee754_pow+0x9fa>
 8005708:	4650      	mov	r0, sl
 800570a:	f000 f87d 	bl	8005808 <scalbn>
 800570e:	ec51 0b10 	vmov	r0, r1, d0
 8005712:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005716:	f7ff bbd2 	b.w	8004ebe <__ieee754_pow+0x14e>
 800571a:	4c31      	ldr	r4, [pc, #196]	@ (80057e0 <__ieee754_pow+0xa70>)
 800571c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005720:	42a3      	cmp	r3, r4
 8005722:	d91a      	bls.n	800575a <__ieee754_pow+0x9ea>
 8005724:	4b2f      	ldr	r3, [pc, #188]	@ (80057e4 <__ieee754_pow+0xa74>)
 8005726:	440b      	add	r3, r1
 8005728:	4303      	orrs	r3, r0
 800572a:	d009      	beq.n	8005740 <__ieee754_pow+0x9d0>
 800572c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005730:	2200      	movs	r2, #0
 8005732:	2300      	movs	r3, #0
 8005734:	f7fb f97e 	bl	8000a34 <__aeabi_dcmplt>
 8005738:	3800      	subs	r0, #0
 800573a:	bf18      	it	ne
 800573c:	2001      	movne	r0, #1
 800573e:	e42b      	b.n	8004f98 <__ieee754_pow+0x228>
 8005740:	4642      	mov	r2, r8
 8005742:	464b      	mov	r3, r9
 8005744:	f7fa fd4c 	bl	80001e0 <__aeabi_dsub>
 8005748:	4632      	mov	r2, r6
 800574a:	463b      	mov	r3, r7
 800574c:	f7fb f986 	bl	8000a5c <__aeabi_dcmpge>
 8005750:	2800      	cmp	r0, #0
 8005752:	d1eb      	bne.n	800572c <__ieee754_pow+0x9bc>
 8005754:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80057f4 <__ieee754_pow+0xa84>
 8005758:	e6f7      	b.n	800554a <__ieee754_pow+0x7da>
 800575a:	469a      	mov	sl, r3
 800575c:	4b22      	ldr	r3, [pc, #136]	@ (80057e8 <__ieee754_pow+0xa78>)
 800575e:	459a      	cmp	sl, r3
 8005760:	f63f aef3 	bhi.w	800554a <__ieee754_pow+0x7da>
 8005764:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005768:	e715      	b.n	8005596 <__ieee754_pow+0x826>
 800576a:	ec51 0b10 	vmov	r0, r1, d0
 800576e:	4619      	mov	r1, r3
 8005770:	e7cf      	b.n	8005712 <__ieee754_pow+0x9a2>
 8005772:	491a      	ldr	r1, [pc, #104]	@ (80057dc <__ieee754_pow+0xa6c>)
 8005774:	2000      	movs	r0, #0
 8005776:	f7ff bb18 	b.w	8004daa <__ieee754_pow+0x3a>
 800577a:	2000      	movs	r0, #0
 800577c:	2100      	movs	r1, #0
 800577e:	f7ff bb14 	b.w	8004daa <__ieee754_pow+0x3a>
 8005782:	4630      	mov	r0, r6
 8005784:	4639      	mov	r1, r7
 8005786:	f7ff bb10 	b.w	8004daa <__ieee754_pow+0x3a>
 800578a:	460c      	mov	r4, r1
 800578c:	f7ff bb5e 	b.w	8004e4c <__ieee754_pow+0xdc>
 8005790:	2400      	movs	r4, #0
 8005792:	f7ff bb49 	b.w	8004e28 <__ieee754_pow+0xb8>
 8005796:	bf00      	nop
 8005798:	00000000 	.word	0x00000000
 800579c:	3fe62e43 	.word	0x3fe62e43
 80057a0:	fefa39ef 	.word	0xfefa39ef
 80057a4:	3fe62e42 	.word	0x3fe62e42
 80057a8:	0ca86c39 	.word	0x0ca86c39
 80057ac:	be205c61 	.word	0xbe205c61
 80057b0:	72bea4d0 	.word	0x72bea4d0
 80057b4:	3e663769 	.word	0x3e663769
 80057b8:	c5d26bf1 	.word	0xc5d26bf1
 80057bc:	3ebbbd41 	.word	0x3ebbbd41
 80057c0:	af25de2c 	.word	0xaf25de2c
 80057c4:	3f11566a 	.word	0x3f11566a
 80057c8:	16bebd93 	.word	0x16bebd93
 80057cc:	3f66c16c 	.word	0x3f66c16c
 80057d0:	5555553e 	.word	0x5555553e
 80057d4:	3fc55555 	.word	0x3fc55555
 80057d8:	fff00000 	.word	0xfff00000
 80057dc:	3ff00000 	.word	0x3ff00000
 80057e0:	4090cbff 	.word	0x4090cbff
 80057e4:	3f6f3400 	.word	0x3f6f3400
 80057e8:	3fe00000 	.word	0x3fe00000
 80057ec:	652b82fe 	.word	0x652b82fe
 80057f0:	3c971547 	.word	0x3c971547
 80057f4:	4090cc00 	.word	0x4090cc00

080057f8 <fabs>:
 80057f8:	ec51 0b10 	vmov	r0, r1, d0
 80057fc:	4602      	mov	r2, r0
 80057fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005802:	ec43 2b10 	vmov	d0, r2, r3
 8005806:	4770      	bx	lr

08005808 <scalbn>:
 8005808:	b570      	push	{r4, r5, r6, lr}
 800580a:	ec55 4b10 	vmov	r4, r5, d0
 800580e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005812:	4606      	mov	r6, r0
 8005814:	462b      	mov	r3, r5
 8005816:	b991      	cbnz	r1, 800583e <scalbn+0x36>
 8005818:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800581c:	4323      	orrs	r3, r4
 800581e:	d03d      	beq.n	800589c <scalbn+0x94>
 8005820:	4b35      	ldr	r3, [pc, #212]	@ (80058f8 <scalbn+0xf0>)
 8005822:	4620      	mov	r0, r4
 8005824:	4629      	mov	r1, r5
 8005826:	2200      	movs	r2, #0
 8005828:	f7fa fe92 	bl	8000550 <__aeabi_dmul>
 800582c:	4b33      	ldr	r3, [pc, #204]	@ (80058fc <scalbn+0xf4>)
 800582e:	429e      	cmp	r6, r3
 8005830:	4604      	mov	r4, r0
 8005832:	460d      	mov	r5, r1
 8005834:	da0f      	bge.n	8005856 <scalbn+0x4e>
 8005836:	a328      	add	r3, pc, #160	@ (adr r3, 80058d8 <scalbn+0xd0>)
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	e01e      	b.n	800587c <scalbn+0x74>
 800583e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005842:	4291      	cmp	r1, r2
 8005844:	d10b      	bne.n	800585e <scalbn+0x56>
 8005846:	4622      	mov	r2, r4
 8005848:	4620      	mov	r0, r4
 800584a:	4629      	mov	r1, r5
 800584c:	f7fa fcca 	bl	80001e4 <__adddf3>
 8005850:	4604      	mov	r4, r0
 8005852:	460d      	mov	r5, r1
 8005854:	e022      	b.n	800589c <scalbn+0x94>
 8005856:	460b      	mov	r3, r1
 8005858:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800585c:	3936      	subs	r1, #54	@ 0x36
 800585e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005862:	4296      	cmp	r6, r2
 8005864:	dd0d      	ble.n	8005882 <scalbn+0x7a>
 8005866:	2d00      	cmp	r5, #0
 8005868:	a11d      	add	r1, pc, #116	@ (adr r1, 80058e0 <scalbn+0xd8>)
 800586a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800586e:	da02      	bge.n	8005876 <scalbn+0x6e>
 8005870:	a11d      	add	r1, pc, #116	@ (adr r1, 80058e8 <scalbn+0xe0>)
 8005872:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005876:	a31a      	add	r3, pc, #104	@ (adr r3, 80058e0 <scalbn+0xd8>)
 8005878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587c:	f7fa fe68 	bl	8000550 <__aeabi_dmul>
 8005880:	e7e6      	b.n	8005850 <scalbn+0x48>
 8005882:	1872      	adds	r2, r6, r1
 8005884:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005888:	428a      	cmp	r2, r1
 800588a:	dcec      	bgt.n	8005866 <scalbn+0x5e>
 800588c:	2a00      	cmp	r2, #0
 800588e:	dd08      	ble.n	80058a2 <scalbn+0x9a>
 8005890:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005894:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005898:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800589c:	ec45 4b10 	vmov	d0, r4, r5
 80058a0:	bd70      	pop	{r4, r5, r6, pc}
 80058a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80058a6:	da08      	bge.n	80058ba <scalbn+0xb2>
 80058a8:	2d00      	cmp	r5, #0
 80058aa:	a10b      	add	r1, pc, #44	@ (adr r1, 80058d8 <scalbn+0xd0>)
 80058ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058b0:	dac1      	bge.n	8005836 <scalbn+0x2e>
 80058b2:	a10f      	add	r1, pc, #60	@ (adr r1, 80058f0 <scalbn+0xe8>)
 80058b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058b8:	e7bd      	b.n	8005836 <scalbn+0x2e>
 80058ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80058be:	3236      	adds	r2, #54	@ 0x36
 80058c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80058c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80058c8:	4620      	mov	r0, r4
 80058ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005900 <scalbn+0xf8>)
 80058cc:	4629      	mov	r1, r5
 80058ce:	2200      	movs	r2, #0
 80058d0:	e7d4      	b.n	800587c <scalbn+0x74>
 80058d2:	bf00      	nop
 80058d4:	f3af 8000 	nop.w
 80058d8:	c2f8f359 	.word	0xc2f8f359
 80058dc:	01a56e1f 	.word	0x01a56e1f
 80058e0:	8800759c 	.word	0x8800759c
 80058e4:	7e37e43c 	.word	0x7e37e43c
 80058e8:	8800759c 	.word	0x8800759c
 80058ec:	fe37e43c 	.word	0xfe37e43c
 80058f0:	c2f8f359 	.word	0xc2f8f359
 80058f4:	81a56e1f 	.word	0x81a56e1f
 80058f8:	43500000 	.word	0x43500000
 80058fc:	ffff3cb0 	.word	0xffff3cb0
 8005900:	3c900000 	.word	0x3c900000

08005904 <with_errno>:
 8005904:	b510      	push	{r4, lr}
 8005906:	ed2d 8b02 	vpush	{d8}
 800590a:	eeb0 8a40 	vmov.f32	s16, s0
 800590e:	eef0 8a60 	vmov.f32	s17, s1
 8005912:	4604      	mov	r4, r0
 8005914:	f7ff f880 	bl	8004a18 <__errno>
 8005918:	eeb0 0a48 	vmov.f32	s0, s16
 800591c:	eef0 0a68 	vmov.f32	s1, s17
 8005920:	ecbd 8b02 	vpop	{d8}
 8005924:	6004      	str	r4, [r0, #0]
 8005926:	bd10      	pop	{r4, pc}

08005928 <xflow>:
 8005928:	4603      	mov	r3, r0
 800592a:	b507      	push	{r0, r1, r2, lr}
 800592c:	ec51 0b10 	vmov	r0, r1, d0
 8005930:	b183      	cbz	r3, 8005954 <xflow+0x2c>
 8005932:	4602      	mov	r2, r0
 8005934:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005938:	e9cd 2300 	strd	r2, r3, [sp]
 800593c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005940:	f7fa fe06 	bl	8000550 <__aeabi_dmul>
 8005944:	ec41 0b10 	vmov	d0, r0, r1
 8005948:	2022      	movs	r0, #34	@ 0x22
 800594a:	b003      	add	sp, #12
 800594c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005950:	f7ff bfd8 	b.w	8005904 <with_errno>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	e7ee      	b.n	8005938 <xflow+0x10>
 800595a:	0000      	movs	r0, r0
 800595c:	0000      	movs	r0, r0
	...

08005960 <__math_uflow>:
 8005960:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005968 <__math_uflow+0x8>
 8005964:	f7ff bfe0 	b.w	8005928 <xflow>
 8005968:	00000000 	.word	0x00000000
 800596c:	10000000 	.word	0x10000000

08005970 <__math_oflow>:
 8005970:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005978 <__math_oflow+0x8>
 8005974:	f7ff bfd8 	b.w	8005928 <xflow>
 8005978:	00000000 	.word	0x00000000
 800597c:	70000000 	.word	0x70000000

08005980 <_init>:
 8005980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005982:	bf00      	nop
 8005984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005986:	bc08      	pop	{r3}
 8005988:	469e      	mov	lr, r3
 800598a:	4770      	bx	lr

0800598c <_fini>:
 800598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598e:	bf00      	nop
 8005990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005992:	bc08      	pop	{r3}
 8005994:	469e      	mov	lr, r3
 8005996:	4770      	bx	lr
